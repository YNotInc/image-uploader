{"version":3,"sources":["components/footer/index.tsx","utils/API.js","utils/authentication-store.tsx","utils/rbac-rule.tsx","components/can.tsx","utils/url-parser.tsx","components/navbar/buttons/user-btn.tsx","components/navbar/buttons/admin-btn.tsx","components/navbar/buttons/login-btn.tsx","components/navbar/index.tsx","components/navbar/btn-data/index.tsx","history.js","components/home/index.tsx","utils/url-btn-updates.tsx","pages/HomeContainer.tsx","components/inputs/text.tsx","forms/login/index.tsx","pages/LoginContainer/index.tsx","utils/input-validation.tsx","components/image-selector/index.tsx","components/image-uploader/index.tsx","forms/product/insert/index.tsx","utils/token-store.tsx","utils/credential-store.tsx","components/products/list/item/index.tsx","utils/product-store.tsx","pages/ProductInsertContainer/utils/helpers.tsx","pages/ProductInsertContainer/index.tsx","components/buttons/transition-img/index.tsx","components/buttons/product-image-view-btn.tsx","components/products/list/index.js","components/upload-spinner/index.js","pages/ProductsListContainer.tsx","forms/product/update/index.tsx","pages/ProductUpdateContainer.tsx","components/buttons/transition-btn/index.tsx","components/buttons/update-btn.tsx","components/buttons/action-btn/index.tsx","components/buttons/delete-btn.tsx","pages/ProductViewContainer/index.tsx","forms/registration/index.js","pages/RegistrationContainer.tsx","App.js","serviceWorker.js","index.js"],"names":["Footer","color","className","fluid","Date","getFullYear","href","api","register","data","a","console","log","axios","method","url","post","login","getProducts","baseURL","get","headers","Accept","getProduct","authToken","refreshToken","Authorization","refreshtoken","getUserInfo","response","JSON","stringify","refreshTokens","accessToken","email","expired","deleteProduct","delete","remove","updateProduct","name","value","image","propName","patch","insertCloudinary","imageObj","formData","FormData","append","config","insertProduct","id","cloudImageUrl","cloudPublicId","cloudImagePublicId","insert","authenticationStore_value","localStorage","getItem","hasAccessTokenExpired","returnValue","currentTime","moment","utc","local","format","userCredentials","parse","sessionExpirationTime","expiration","isAfter","timeDiff","diff","setLocalStorage","access_token","refresh_token","message","setItem","getLocalStorage","curCredentials","curCredObj","curCredResponse","resetLocalStorage","clear","setUserRole","API","then","userRecord","userRole","role","catch","err","userRoleObj","rules","visitor","static","user","admin","writer","dynamic","userId","postOwnerId","Can","props","action","permissions","staticPermissions","includes","dynamicPermissions","permissionCondition","check","perform","yes","no","defaultProps","urlParser","urlArray","window","location","pathname","split","length","UserBtn","curBtnSelected","activeIndex","buttonIndex","activeName","authorization","onClick","captureEvent","activeClassName","active","to","route","label","AdminBtn","LoginBtn","NavbarPage","state","loggedOut","toggleCollapse","setState","isOpen","navItems","userItems","key","adminItem","loginItem","redirect","refreshPage","myNav","currentPage","homeLink","handleChangeActive","bind","event","button","this","handlePageClick","curBtnName","target","hmOrProdBtnSelected","setRole","auth","redirectHome","expand","navbar","left","map","btn","btnIdx","e","nav","caret","right","fab","icon","Component","createBrowserHistory","Home","data-jarallax","data-wow-delay","urlBtnUpdates","btnElement","pageName","document","querySelector","setAttribute","HomeContainer","collapse","Fragment","Text","size","htmlFor","aria-labelledby","type","data-testid","testId","placeholder","onChange","changeHandler","LoginForm","getRole","useState","password","isUserAuthorized","token","history","useHistory","submitHandler","preventDefault","res","status","prevState","authenticationStore","test","push","middle","onSubmit","LoginContainer","displayInputErrors","idTagName","pwdTagName","imgTagName","getElementById","emailText","passwordText","imageFile","files","style","borderColor","removeImgErrorDisplay","imageId","imageClassAttr","classList","removeInputErrors","ImageSelector","submitBtnId","imageType","imageClassName","ref","imageSelectRef","aria-describedby","imageName","accept","fileTypes","selectImage","previewCanvasRef","ImageUploader","uploaderBorder","React","createRef","aria","ProductInsertForm","insertClickHandler","placeholderName","productName","placeholderValue","productValue","maxMB","imageMin","imageMax","submitImageHandler","productImage","setImageProp","refresh","newCredentialResponse","credentials","setLocalCredWNewTokens","refreshURL","tokenStore","getEvaluatedCredentials","refreshed","ProductItem","nameText","valueText","src","alt","getProductDetails","baseUrl","product","productDetails","productItemComponent","_id","retrieveUpdatedProductList","products","productId","deleteProductResponse","updateResponse","cloudinaryResponse","insertResponse","performDBAction","cb","uniqueProductError","uniqueProductMsg","callBackResponse","productsList","stageDBAction","dBActionResults","namePlaceHolder","valuePlaceHolder","dbObj","setImageParagraphTag","para","imageSize","imageWidth","imageHeight","previewCanvas","createTextNode","listItem","createElement","appendChild","orderedList","removeItem","element","item","getElementsByTagName","isItemCreated","removeChild","removeCanvas","setFileMessage","tag","errorTag","innerHTML","getFormattedFileSize","returnFileSize","number","toFixed","appendImage","img","canvas","onload","width","height","getContext","drawImage","prepend","setFileSize","areDimensionsValid","acceptedMsg","unacceptedMsg","disabled","isFileSelected","input","imgOnError","invalidMsg","displayImage","canvasElement","loadImage","blob","Promise","resolve","reject","URL","createObjectURL","imageProps","imageSrc","onerror","convertImageFromUrlToBase64String","Image","crossOrigin","context","dataUrl","toDataURL","isFileTypeValid","file","i","ProductInsertContainer","cloudinaryURL","base64Str","fileMsgElement","previewCanvasElement","submitImageElement","productImageClickHandler","persist","current","inputElement","imgHelper","loadedImgResult","toString","isInputValid","unit","slice","toLowerCase","fileSizeNumber","replace","imageUrl","base64StringImage","currentCredentials","cloudinaryResult","public_id","setElementRef","setStateVariables","credentialStore","newUserCredentials","evaluatedCredentials","resetStateVariables","dbActionResults","Error","displayMessage","labelElement","labelValue","imgInputInfo","imageSelectorLabel","labels","textContent","fileName","baseURI","productImageName","transitionImg","imgWithLink","imgWithoutLink","ProductImageViewBtn","viewPath","ProductListItem","UploadSpinner","faSpinner","ProductsListContainer","productsListData","loading","returnProducts","productData","ProductUpdateForm","updateClickHandler","ProductUpdateContainer","pushedProps","productItem","splice","join","dBActionResult","transitionBtn","tabIndex","buttonName","UpdateBtn","path","btnName","ActionBtn","btnClickHandler","DeleteBtn","ProductViewContainer","useEffect","fetchCredentials","fetchAccessTokens","areCredentialsValid","credentialsActive","fetchProducts","deleteClickHandler","RegistrationForm","clickHandler","RegistrationContainer","existingUserError","existingUserMsg","addEventListener","correctInput","regData","regResponse","redirectLogin","App","credentialsValid","localStateObj","exact","render","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2ce9a13.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\nimport { MDBContainer, MDBFooter } from \"mdbreact\";\r\n\r\nlet Footer = () => {\r\n    return (\r\n        <MDBFooter color=\"blue\" className=\"font-small pt-4 fixed-bottom\">\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.MDBootstrap.com\"> MDBootstrap.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n    );\r\n};\r\n\r\nexport default Footer;","import axios from \"axios\";\r\n/****************************************************\r\n * API.js SHOULD NEVER CATCH ERROR, THAT SHOULD BE\r\n * HANDLED BY THE CONTAINER ON THE FRONTEND.  The\r\n * API IS JUST FORWARDING THE HTTP REQUEST To Backend\r\n *****************************************************/\r\n// Create Export Hash\r\nexport let api = {\r\n  register: async (data) => {\r\n    /*************************************************************\r\n     *  package and send the body to the endpoint\r\n     ************************************************************/\r\n    console.log(\"Sending data to:\", \"/api/user/register\");\r\n    const post = await axios({\r\n      method: \"post\",\r\n      url: \"/api/user/register\",\r\n      data: data,\r\n    }); // post\r\n    /*************************************************************\r\n     * Send the results back to the calling program\r\n     ************************************************************/\r\n    return post;\r\n  },\r\n  login: async (data) => {\r\n    console.log(\"in login- Data:\", data);\r\n    /*************************************************************\r\n     *  package and send the body to the endpoint\r\n     ************************************************************/\r\n    let post = await axios.post(\"/api/user/login\", data);\r\n    /*************************************************************\r\n     * Send the results back to the calling program\r\n     ************************************************************/\r\n    return post;\r\n  },\r\n  // products list GET\r\n  getProducts: async (baseURL) => {\r\n    if (baseURL) {\r\n      console.log(\"In API.getProducts\", baseURL);\r\n      let get = await axios.get(baseURL, {\r\n        headers: {\r\n          Accept: \"application/json,application/xml;q=0.9,*/*;q=0.8\",\r\n        },\r\n      });\r\n      // let get = await axios.get(baseURL);\r\n      return get;\r\n    }\r\n  },\r\n  // individual product, make it resemble deleteProduct below\r\n  getProduct: async (baseURL, authToken, refreshToken) => {\r\n    if (baseURL) {\r\n      try {\r\n        console.log(\"in API.getProduct\", baseURL);\r\n        console.log(\"authToken:\", authToken);\r\n        console.log(\"refreshToken\", refreshToken);\r\n        const get = await axios.get(baseURL, {\r\n          headers: {\r\n            Authorization: authToken,\r\n            \"Content-Type\": \"application/json\",\r\n            refreshtoken: refreshToken,\r\n          },\r\n        });\r\n        /********************************************\r\n         * Send the results back to calling program\r\n         ********************************************/\r\n        console.log(\"GET=\", get);\r\n        return get;\r\n      } catch (err) {\r\n        console.log(\"Get Product Unauthorized Error:\", err);\r\n        return err;\r\n      }\r\n    }\r\n  },\r\n  getUserInfo: async (baseURL, authToken, refreshToken) => {\r\n    try {\r\n      // console.log(\"in API.getProduct\", baseURL);\r\n      // console.log(\"authToken:\", authToken);\r\n      // console.log(\"refreshToken\", refreshToken);\r\n      if (baseURL) {\r\n        let response = await axios.get(baseURL, \r\n          {\r\n            headers: {\r\n            Authorization: authToken,\r\n            \"Content-Type\": \"application/json\",\r\n            refreshtoken: refreshToken,\r\n            },\r\n          });\r\n\r\n        console.log(\"APIGETUSERINFO: \" + JSON.stringify(response));\r\n        return response;\r\n      } else {\r\n        console.log(\"API.baseURL:\", baseURL);\r\n      }\r\n    } catch (err) {\r\n      console.log(\"UserInfo Unauthorized Error:\", err);\r\n      return err;\r\n    }\r\n  },\r\n\r\n  refreshTokens: async (url, accessToken, refreshToken, email, expired) => {\r\n    console.log(\"API In URL: \", url);\r\n    console.log(\"API In AccessToken: \", accessToken);\r\n    console.log(\"API In RefreshToken: \", refreshToken);\r\n    console.log(\"API In Email: \", email);\r\n    if (url) {\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const post = await axios({\r\n        method: \"post\",\r\n        url,\r\n        data: {\r\n          email,\r\n          expired,\r\n        },\r\n        headers: {\r\n          Authorization: accessToken,\r\n          \"Content-Type\": \"application/json\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n      }); // post\r\n      // console.log(post.data, post.status);\r\n      /*************************************************************\r\n       * Send the results back to the calling program\r\n       ************************************************************/\r\n      return post;\r\n    }\r\n  }, // catch\r\n\r\n  // /:productId\r\n  deleteProduct: async (baseURL, authToken, refreshToken, expired, email) => {\r\n    if (baseURL) {\r\n      const data = {\r\n        expired: expired,\r\n        email: email,\r\n      };\r\n      console.log(\"DATA:\", JSON.stringify(data));\r\n      console.log(`API: GOING TO DELETE ROUTE: ${baseURL}`);\r\n      console.log(\r\n        `authtoken: ${authToken}, refreshtoken: ${refreshToken}, expired: ${expired}, email: ${email}, URL: ${baseURL}`\r\n      );\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const remove = await axios.delete(baseURL, {\r\n        headers: {\r\n          Authorization: authToken,\r\n          \"Content-Type\": \"application/json\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n        data: data,\r\n      });\r\n      /**********************************************\r\n       * Send the results back to the calling program\r\n       **********************************************/\r\n      // console.log(\"REMOVE=\", remove);\r\n      return remove;\r\n    }\r\n  },\r\n\r\n  // /:productId\r\n  updateProduct: async (\r\n    baseURL,\r\n    authToken,\r\n    refreshToken,\r\n    name,\r\n    value,\r\n    image,\r\n    expired,\r\n    email\r\n  ) => {\r\n    if (baseURL) {\r\n      console.log(\"in API.updateProduct, baseURL:\", baseURL);\r\n      console.log(\"authToken:\", authToken);\r\n      console.log(\"refreshToken\", refreshToken);\r\n      console.log(\r\n        \"API-updateProduct: name:\",\r\n        name,\r\n        \"value:\",\r\n        value,\r\n        \"expired:\",\r\n        expired\r\n      );\r\n\r\n      const data = [\r\n        // first set\r\n        {\r\n          propName: \"name\",\r\n          value: name,\r\n        },\r\n        // second set\r\n        {\r\n          propName: \"value\",\r\n          value: value,\r\n        },\r\n        // third set\r\n        {\r\n          propName: \"expired\",\r\n          value: expired,\r\n        },\r\n        // fourth set\r\n        {\r\n          propName: \"email\",\r\n          value: email,\r\n        },\r\n      ];\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const patch = await axios.patch(baseURL, data, {\r\n        headers: {\r\n          Authorization: authToken,\r\n          \"Content-Type\": \"application/json\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n      });\r\n      /*************************************************************\r\n       * Send the results back to the calling program\r\n       ************************************************************/\r\n      return patch;\r\n    }\r\n  },\r\n  // insertCloudinary: \"/api/products/cloudinary/insert/\"\r\n  insertCloudinary: async (baseURL, imageObj, authToken, refreshToken) => {\r\n    if (imageObj) {\r\n      console.log(\"In insertCloudinary\", baseURL);\r\n      // console.log (\"#ImageObj:\", imageObj);\r\n\r\n      //create formData from BASE64 file\r\n      const formData = new FormData();\r\n      formData.append(\"file\", imageObj);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: authToken,\r\n          \"Content-Type\": \"multipart/form-data\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n      };\r\n      console.log(`Cloudinary: ${JSON.stringify(config)}; FormData: ${JSON.stringify(formData)}`);\r\n      // NEW POST WITH FORMDATA\r\n      const post = await axios.post(baseURL, formData, config);\r\n\r\n      return post;\r\n    }\r\n  },\r\n\r\n  // /:productId\r\n  insertProduct: async (\r\n    baseURL,\r\n    id,\r\n    email,\r\n    authToken,\r\n    refreshToken,\r\n    name,\r\n    value,\r\n    image,\r\n    expired\r\n  ) => {\r\n    var cloudImageUrl = image.cloudImageUrl;\r\n    var cloudPublicId = image.cloudImagePublicId;\r\n    if (baseURL) {\r\n      console.log(\"authToken:\", authToken);\r\n      console.log(\"refreshToken\", refreshToken);\r\n      // console.log(\"API: INSERT TOKEN:\", 'name:', name, ',value:', value,'base64', image.base64Str);\r\n\r\n      const data = [\r\n        {\r\n          propName: \"name\",\r\n          value: name,\r\n        },\r\n        {\r\n          propName: \"value\",\r\n          value: value,\r\n        },\r\n        // {\r\n        //     'propName': 'productImage',\r\n        //     'value': base64Image\r\n        // },\r\n        {\r\n          propName: \"productImage\",\r\n          value: cloudImageUrl,\r\n        },\r\n        {\r\n          propName: \"cloudId\",\r\n          value: cloudPublicId,\r\n        },\r\n        {\r\n          propName: \"productId\",\r\n          value: id,\r\n        },\r\n        {\r\n          propName: \"authToken\",\r\n          value: authToken,\r\n        },\r\n        {\r\n          propName: \"refreshToken\",\r\n          value: refreshToken,\r\n        },\r\n        {\r\n          propName: \"email\",\r\n          value: email,\r\n        },\r\n        {\r\n          propName: \"expired\",\r\n          value: expired,\r\n        },\r\n      ];\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const headers = {\r\n          headers: {\r\n            Authorization: authToken,\r\n            \"Content-Type\": \"application/json\",\r\n            refreshtoken: refreshToken,\r\n          }\r\n      };\r\n      console.log(`Insert Product DATA: ${JSON.stringify(data)}; headers: ${JSON.stringify(headers)}`);\r\n      \r\n      const insert = await axios.post(baseURL, data, headers);\r\n      /*************************************************************\r\n       * Send the results back to the calling program\r\n       ************************************************************/\r\n      return insert;\r\n    }\r\n  },\r\n};\r\n","import { api as API } from './API';\r\nimport moment, { Moment } from 'moment';\r\n// Import Server-Side Utilities:\r\n\r\n\r\n/**********************\r\n * Contains methods for storing credentials in localStorage and packaging for setting as state variables\r\n */\r\nlet set = (name: string, value: string) => {\r\n    localStorage.setItem(name, value);\r\n};\r\n\r\nlet get = (name: string) => {\r\n    let authenticationStore_value = localStorage.getItem(name);\r\n    console.log(name, ':', authenticationStore_value);\r\n    let returnValue = authenticationStore_value ? authenticationStore_value : '';\r\n    return returnValue;\r\n};\r\n\r\nlet hasAccessTokenExpired = (() => {\r\n    let data = localStorage.getItem('data');\r\n    // set hasAccessTokenExpired to true to get the refreshToken method to execute.  Request will fail with no tokens and return.  Otherwise\r\n    let returnValue = false;\r\n\r\n    if (data !== null && typeof data !== 'undefined') {\r\n        let currentTime = moment.utc(moment()).local().format(\"L LT\");\r\n        const userCredentials = JSON.parse(get('data'));\r\n        //5/17/2020\r\n        /***********************************/\r\n        // let { expiration } = data;\r\n        // let sessionExpirationTime = moment.utc(moment(expiration)).local().format(\"MM/DD/YYYY LT\");\r\n        let sessionExpirationTime = moment.utc(userCredentials.expiration).local().format(\"MM/DD/YYYY LT\");\r\n\r\n\r\n\r\n        /************************************/\r\n        console.log(\"currentTime.isAfter(sessionExpirationTime):\", moment(currentTime).isAfter(sessionExpirationTime));\r\n\r\n        console.log(\"sessionExpirationTime.isAfter(currentTime):\", moment(sessionExpirationTime).isAfter(moment(currentTime)));\r\n\r\n\r\n        console.log('currentTime:', currentTime, 'sessionExpiration:', sessionExpirationTime);\r\n\r\n        // Get TIme difference in minutes\r\n        let timeDiff = moment(sessionExpirationTime).diff(moment(currentTime), 'minutes');\r\n\r\n        console.log('TIMEDIFF:', timeDiff);\r\n\r\n        returnValue = timeDiff <= 10 ? true : false;\r\n        // return returnValue;\r\n        // return false;\r\n    } // if\r\n    return returnValue;\r\n});\r\n\r\nlet setLocalStorage = ((\r\n    access_token: string, refresh_token: string, expiration: Moment | null,\r\n    email: string,\r\n    message?: string) => {\r\n\r\n    let data = {\r\n        access_token,\r\n        refresh_token,\r\n        expiration,\r\n        email,\r\n        message\r\n    };\r\n    console.log(\"created data\", data.message);\r\n    set('data', JSON.stringify(data));\r\n    console.log(\"set LocalStorage data\", data.message);\r\n    return data;\r\n});\r\n\r\nlet getLocalStorage = (async () => {\r\n    console.log(\"In getLocalStorage\");\r\n    \r\n    let curCredResponse;\r\n\r\n    let curCredentials = await localStorage.getItem('data');\r\n    console.log(\"curCredentials:\", curCredentials);\r\n    if (curCredentials !== null && typeof curCredentials !== 'undefined') {\r\n        // get data from local storage\r\n        const curCredObj = JSON.parse(get('data'));\r\n        console.log(\"CurCredObj\", curCredObj);\r\n        curCredResponse = curCredObj;\r\n    }\r\n    else {\r\n        curCredResponse = {\r\n            access_token: '',\r\n            refresh_token: '',\r\n            expiration: '',\r\n            email: '',\r\n            message: ''\r\n        };\r\n    }\r\n    console.log(\"AuthenticationStore return curCredentials:\", curCredResponse);\r\n    return curCredResponse;\r\n});\r\n\r\nlet resetLocalStorage = () => {\r\n    console.log(\"LOCAL STORAGE CLEARED\");\r\n    localStorage.clear();\r\n};\r\n\r\nlet setUserState = async (email: string, authToken: string, refreshToken: string) => {\r\n    // set state variables:\r\n    // let stateVariables = await getLocalStorage();\r\n\r\n    // this.setState(stateVariables);\r\n    // let user;\r\n    let baseURL = `/api/user/information/${email}`;\r\n    console.log(\"authenticationStore.setUserState: Email=*\" + email + \"*\");\r\n\r\n    // 01/03/2020: Get User role\r\n    let userRoleObj = await API.getUserInfo(baseURL, authToken, refreshToken)\r\n        .then(userRecord => {\r\n            console.log(\"BASE URL=\", baseURL);\r\n            console.log(\"USER userRecord=\", userRecord);\r\n            // set user\r\n\r\n            let userObject = {\r\n                role: userRecord?.data.role,\r\n                // data: products\r\n            };\r\n            console.log(\"PLC2USEROBJECT:\", userObject);\r\n            return userObject\r\n\r\n        })\r\n        .catch(err => {\r\n            console.log(\"ERROR: Setting ROLE to VISITOR:\", err);\r\n            var userObject = {\r\n                role: \"visitor\",\r\n                // data: products\r\n            };\r\n            return userObject;\r\n            // this.setState({ user: userObject });\r\n        });\r\n    return userRoleObj;\r\n};\r\n\r\n// get user role from backend\r\nvar setUserRole = async (email: string, authToken: string, refreshToken: string) => {\r\n\r\n    let baseURL = `/api/user/information/${email}`;\r\n    // console.log(\"authenticationStore.setUserRole: Email=*\" + email + \"*\");\r\n\r\n    // Get User role\r\n    let userRoleObj = await API.getUserInfo(baseURL, authToken, refreshToken)\r\n        .then(userRecord => {\r\n \r\n            // set user\r\n            const userRole = {\r\n                role: userRecord?.data.role,\r\n            };\r\n\r\n            if (!userRole.role) {\r\n                userRole.role = \"visitor\";\r\n            }\r\n            return userRole;\r\n        })\r\n        .catch(err => {\r\n            console.log(\"ERROR: Setting ROLE to VISITOR:\", err);\r\n            let userRole = {\r\n                role: \"visitor\",\r\n            };\r\n            return userRole;\r\n        });\r\n    return userRoleObj;\r\n}\r\n\r\nexport { set, get, hasAccessTokenExpired, setLocalStorage, getLocalStorage, resetLocalStorage, setUserState, setUserRole };","const rules = {\r\n    visitor: {\r\n      static: [\r\n        \"products:hide\",\r\n        // \"products:view\",\r\n        \"home-page:visit\"\r\n        ]\r\n    },\r\n    user : {\r\n      static: [ \r\n        \"products:view\", \r\n        \"products:details\",\r\n          \"products:hide\",\r\n          \"home-page:visit\"\r\n      ]\r\n    },\r\n    admin: {\r\n      static: [\r\n        \"products:view\",\r\n        \"products:hide\",\r\n        \"products:update\",\r\n        \"products:insert\",\r\n        \"products:delete\",\r\n        \"products:details\",\r\n        \"users:get\",\r\n        \"users:getSelf\",\r\n        \"home-page:visit\",\r\n        \"dashboard-page:visit\"\r\n      ]\r\n    },\r\n    writer: {\r\n      static: [\r\n        \"posts:list\",\r\n        \"posts:create\",\r\n        \"users:getSelf\",\r\n        \"home-page:visit\",\r\n        \"dashboard-page:visit\"\r\n      ],  //static\r\n      // dynamic not currently used\r\n      dynamic: {\r\n        \"posts:edit\": (userId:string , postOwnerId: string) => {\r\n          if (!userId || !postOwnerId) return false;\r\n          return userId === postOwnerId;\r\n        }\r\n      } // dyanmic\r\n    }\r\n  };\r\n\r\n  export default rules;","import rules from \"../utils/rbac-rule\";\r\n\r\n\r\n/**\r\n * Check if user has access to view \r\n * the element to displayed in the yes \r\n * prop\r\n * @param rules \r\n * @param role \r\n * @param action \r\n * @param [data] \r\n * @returns  \r\n */\r\nconst check = (rules: RulesType, role: string, action: string, data?: any) => {\r\n  console.log(\"CAN ROLE:\",  \"*\"\r\n  +role+\"*\");\r\n  const permissions = rules[role];\r\n  if (!permissions) {\r\n    // role is not present in the rules\r\n    console.log(\"NO PERMISSIONS\");\r\n    return false;\r\n  }\r\n\r\n  const staticPermissions = permissions.static;\r\n\r\n  if (staticPermissions && staticPermissions.includes(action)) {\r\n    // static rule not provided for action\r\n    console.log(\"Data is static\");\r\n    return true;\r\n  }\r\n\r\n  // dynmic not currently used\r\n  const dynamicPermissions = permissions.dynamic;\r\n\r\n  if (dynamicPermissions) {\r\n    console.log(\"Data is Dynamic\");\r\n    const permissionCondition = dynamicPermissions[action];\r\n    if (!permissionCondition) {\r\n      // dynamic rule not provided for action\r\n      return false;\r\n    }\r\n    return permissionCondition(data);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst Can = (props: CanPropType) =>  \r\n  check(rules, props.role, props.perform, props.data)\r\n    ? props.yes()\r\n    : props.no();\r\n\r\nCan.defaultProps = {\r\n  yes: () => null,\r\n  no: () => null\r\n};\r\n\r\nexport default Can;","export let urlParser = () => {\r\n        let url = window.location.pathname;\r\n        let urlArray = url.split('/');\r\n        console.log(\"@@@URLARRAY:\", urlArray);\r\n        return urlArray[urlArray.length-1];\r\n        // const id = urlArray[urlArray.length - 1];\r\n        // console.log(\"ID:\", id);\r\n        //replace space with app\r\n        // urlArray.splice(0, 1, '/api');\r\n        // remove product from url\r\n        // URL Syntax: /api/products/:id\r\n        // urlArray.splice(2, 1);\r\n        // console.log(\"newURLElements:\", urlArray);\r\n        // const baseUrl = urlArray.join('/');\r\n        // console.log(\"baseUrl:\", baseUrl);\r\n};","import {\r\n  MDBNavItem, MDBNavLink\r\n} from \"mdbreact\"; \r\nimport Can from \"../../can\";\r\nimport \"./styles.css\";\r\n\r\nfunction UserBtn(props: UserBtnPropType) {\r\n  console.log(\"USERBUTTON PROPS:\", props);\r\n  const curBtnSelected = props.activeIndex===props.buttonIndex && props.activeName===props.name;\r\n  return (<Can\r\n    role={props.userRole}\r\n    perform={props.authorization}\r\n    yes={() => (\r\n      <>\r\n        <MDBNavItem\r\n          onClick={props.captureEvent}\r\n        >\r\n          <MDBNavLink\r\n            activeClassName={curBtnSelected? \"activate\": \"de-activate\"}\r\n            active={false}\r\n            name={props.name}\r\n            to={props.route}\r\n          >\r\n            {props.label}\r\n          </MDBNavLink>\r\n        </MDBNavItem>\r\n      </>\r\n      // </span>\r\n    )}\r\n    no={() => <></>}\r\n  />)\r\n};\r\n\r\nexport default UserBtn;","import {\r\n    MDBDropdownItem, MDBNavLink\r\n    } from \"mdbreact\";\r\n\r\nlet AdminBtn = (props: AdminBtnPropType) => {\r\n  return(\r\n      <MDBNavLink\r\n        to={props.route}\r\n      >\r\n        <MDBDropdownItem\r\n          name={props.name}\r\n          onClick={props.captureEvent}\r\n        >{props.name}</MDBDropdownItem>\r\n      </MDBNavLink>\r\n  )\r\n};\r\n\r\nexport default AdminBtn;","import {\r\n  MDBDropdownItem, MDBNavLink\r\n} from \"mdbreact\"; \r\n\r\nlet LoginBtn = (props: LoginBtnPropType) => {\r\n  return (\r\n    <MDBNavLink to={props.route}>\r\n      <MDBDropdownItem\r\n        name={props.name}\r\n        onClick={props.captureEvent}\r\n      >\r\n        {props.name}\r\n      </MDBDropdownItem>\r\n    </MDBNavLink>\r\n  )\r\n};\r\n\r\nexport default LoginBtn;","import { ChangeEvent, Component } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nimport * as auth from \"../../utils/authentication-store\";\r\nimport Can from \"../can\";\r\nimport { navbarOptions } from \"./btn-data/index\";\r\nimport \"./btn-data/style.css\";\r\nimport { urlParser } from \"../../utils/url-parser\";\r\nimport UserBtn from './buttons/user-btn';\r\nimport AdminBtn from \"./buttons/admin-btn\";\r\nimport LoginBtn from \"./buttons/login-btn\";\r\nclass NavbarPage extends Component<NavbarPagePropType> {\r\n  state: NavbarPageStateType;\r\n  loggedOut!: boolean;\r\n\r\n  constructor(props: NavbarPagePropType) {\r\n    super(props);\r\n    const navItems: NavbarType = navbarOptions(this.props);\r\n    this.state = {\r\n      activeIndex: 0,\r\n      activeName: '',\r\n      isOpen: false,\r\n      role: this.props.role,\r\n      redirect: this.props.redirect,\r\n      loggedOut: this.props.loggedOut,\r\n      refreshPage: this.props.refreshPage,\r\n      myNav: navItems,\r\n      currentPage: '',\r\n      homeLink: '',\r\n    }; //state\r\n    console.log(\"First STate ROLE:\", this.props.role)\r\n    console.log(\"myNavAll:\", this.state.myNav);\r\n    console.log(\"myNav userItems:\", this.state.myNav.userItems);\r\n    this.handleChangeActive = this.handleChangeActive.bind(this);\r\n  } // constructor\r\n\r\n  componentDidMount() {\r\n  } //\r\n\r\n  handleChangeActive(event: ChangeEvent<HTMLInputElement>, button: UserItemsType | AdminItemType | LoginItemType, activeIndex: number) {\r\n    this.props.handlePageClick(event);\r\n    const curBtnName = event.target.name;\r\n    const hmOrProdBtnSelected = curBtnName === 'home' || curBtnName === 'products';\r\n    console.log(\"BUTTONEVENT:\", event.target.name);\r\n    console.log(\"ActiveIndex:\", activeIndex);\r\n    console.log(\"BUTTON:\", button);\r\n    console.log(\"BUTTONNAME\", button.name);\r\n    //urlParser is launching before page settled\r\n    console.log(\"PageName:\", urlParser());\r\n\r\n    // SetState is asyc, so use a callback method\r\n    // Set the active index to the current page\r\n    if (hmOrProdBtnSelected) {\r\n      this.setState({\r\n        activeIndex,\r\n        activeName: button.name\r\n      }, () => {\r\n        console.log(\"State BUTTONNAME:\", this.state.activeName);\r\n        console.log(\"State BUTTONIndex:\", this.state.activeIndex);\r\n      });\r\n    }\r\n\r\n    // Set LoggedOut to true when logout is clicked\r\n    if (event.target.name === \"logout\") {\r\n      this.props.setRole(\"visitor\", true);\r\n      auth.resetLocalStorage();\r\n    }\r\n  }\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n\r\n    /***********************\r\n   * 05/25/2020\r\n   * 1) Trigger refresh on login and logout\r\n    /************************************** */\r\n    console.log(\"Navbar/index.js just update\");\r\n    // console.log(\"CurrentPage:\", this.props.currentPage);\r\n    if (this.props.currentPage === \"Logout\") {\r\n      // When credentials are cleared force password reset, since no new page is displayed\r\n      // console.log(\"Navbar In LOGOUT1, currentPage:\", this.props.currentPage)\r\n      // console.log(\"NAVBAR: DIDMOUNT componentDidMount\");\r\n      // console.log(\"NAVBAR: DIDMOUNT state.Role:\", this.state.role);\r\n      // console.log(\"NAVBAR: DIDMOUNT props.Role:\", this.props.role);\r\n      // console.log(\"NAVBAR: DIDMOUNT state.loggedOut:\", this.state.loggedOut);\r\n      // console.log(\"Navbar: DIDMOUNT ComponentDIDMOUNT\");\r\n\r\n      /******************************************\r\n       Authorization-Part1:\r\n       ********************* \r\n       Clear Credentails on \r\n       Logout making state.role out of sync with \r\n       prop.role\r\n       ******************************************/\r\n      auth.resetLocalStorage();\r\n      if (\r\n        this.state.role !== \"visitor\" &&\r\n        !this.loggedOut &&\r\n        this.state.role === this.props.role\r\n      ) {\r\n        console.log(\"LOG USER OUT IN NAV\");\r\n        console.log(\r\n          \"Navbar1: userRole =\",\r\n          this.state.role,\r\n          \"LoggedOut:\",\r\n          this.state.loggedOut\r\n        );\r\n        this.props.setRole(\"visitor\", true);\r\n      } else if (\r\n        /******************************************\r\n       Authorization-Part2: \r\n       *******************\r\n       Catch the out-of-sync props.role and \r\n       state.role, indicating a logout state\r\n       ******************************************/\r\n        this.state.role !== this.props.role &&\r\n        this.state.role !== \"visitor\"\r\n      ) {\r\n        this.setState({ role: \"visitor\" });\r\n        console.log(\r\n          \"Navbar2: userRole =\",\r\n          this.state.role,\r\n          \"LoggedOut:\",\r\n          this.state.loggedOut\r\n        );\r\n        this.props.redirectHome();\r\n      }\r\n    }\r\n  } //componentDidUpdate\r\n\r\n  render() {\r\n    var userRole = this.state.role;\r\n    console.log(\"NAVBAR CONTAINER: userRole =\", userRole);\r\n    const { activeIndex } = this.state;\r\n\r\n    console.log(\"PropsCurrentPage: \", this.props.currentPage);\r\n    console.log(\"PropsName: \", this.props.name);\r\n\r\n    let loggedOut = this.props.loggedOut;\r\n    return (\r\n      <MDBNavbar\r\n        color=\"default-color\"\r\n        expand=\"md\"\r\n        className=\"sticky-top z-depth-6\"\r\n        id=\"main-header\"\r\n      >\r\n        {/* id=\"main-header\" */}\r\n        {/* <!-- Navbar brand --> */}\r\n        <a\r\n          className=\"navbar-brand\"\r\n          href=\"#!\"\r\n        >\r\n          {\"Brand\"}\r\n        </a>\r\n        <MDBNavbarToggler\r\n          onClick={this.toggleCollapse}\r\n        >\r\n          <i className=\"fas fa-bars\"></i>\r\n        </MDBNavbarToggler>\r\n        <MDBCollapse\r\n          id=\"navbarCollapse3\"\r\n          isOpen={this.state.isOpen}\r\n          navbar\r\n        >\r\n          <MDBNavbarNav left>\r\n            {this.state.myNav.userItems?.map((btn: UserItemsType, btnIdx: number) => {\r\n              console.log(\"UserItems:\", btn);\r\n              return (<UserBtn\r\n                activeIndex={activeIndex}\r\n                activeName={btn.name}\r\n                buttonIndex={btnIdx}\r\n                userRole={userRole}\r\n                authorization={btn.authorization}\r\n                captureEvent={(e) => { this.handleChangeActive(e, btn, btnIdx) }}\r\n                name={btn.name}\r\n                route={btn.route}\r\n                label={btn.label}\r\n                key={btn.key}\r\n              />)\r\n            })}\r\n            <Can\r\n              role={userRole}\r\n              perform=\"products:insert\"\r\n              yes={() => (\r\n                <>\r\n                  {!loggedOut ?<MDBNavItem>\r\n                    <MDBDropdown>\r\n                      <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">Admin</span>\r\n                      </MDBDropdownToggle>\r\n                      <MDBDropdownMenu className=\"dropdown-default\">\r\n                        {\r\n                          this.state.myNav.adminItem?.map((btn: AdminItemType, btnIdx: number) => {\r\n                            console.log(\"AdminItems:\", btn);\r\n                            return (<AdminBtn\r\n                              name={btn.name}\r\n                              route={btn.route}\r\n                              key={btn.key}\r\n                              captureEvent={(event) => { this.handleChangeActive(event, btn, btnIdx) }}\r\n                            />)\r\n                          })\r\n                        }\r\n                      </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                  </MDBNavItem>: ''}\r\n                </>\r\n              )}\r\n              no={() => <></>}\r\n            />\r\n          </MDBNavbarNav>\r\n          <MDBNavbarNav right>\r\n            <MDBNavItem>\r\n              <MDBNavLink\r\n                activeClassName={\"not-active\"}\r\n                className=\"waves-effect waves-light\"\r\n                to=\"#!\"\r\n              >\r\n                <MDBIcon fab icon=\"twitter\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink\r\n                activeClassName={\"not-active\"}\r\n                className=\"waves-effect waves-light\"\r\n                to=\"#!\"\r\n              >\r\n                <MDBIcon\r\n                  fab icon=\"google-plus-g\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n\r\n            <MDBNavItem>\r\n              <MDBDropdown>\r\n                <MDBDropdownToggle nav caret>\r\n                  <MDBIcon icon=\"user\" />\r\n                </MDBDropdownToggle>\r\n                <MDBDropdownMenu className=\"dropdown-default\" right>\r\n                  {\r\n                    this.state.myNav.loginItem?.map((btn: LoginItemType, btnIdx: number) => {\r\n                      console.log(\"LoginItems:\", btn);\r\n                      return (<LoginBtn\r\n                        name={btn.name}\r\n                        route={btn.route}\r\n                        key={btn.key}\r\n                        captureEvent={(event) => { this.handleChangeActive(event, btn, btnIdx) }}\r\n                        setRole={this.props.setRole}\r\n                        role={this.props.role}\r\n                      />)\r\n                    })\r\n                  }\r\n                </MDBDropdownMenu>\r\n              </MDBDropdown>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    );\r\n  } //render\r\n}\r\n\r\nexport default NavbarPage;","export function navbarOptions(props: NavbarOptionsPropType): NavbarType {\r\n\r\n  let userItems: UserItemsType[] = [\r\n    {\r\n      name: 'home',\r\n      label: 'Home',\r\n      route: '/',\r\n      authorization: 'home-page:visit',\r\n      key: 0\r\n    },\r\n    {\r\n      name: 'products',\r\n      label: 'Products',\r\n      route: '/products',\r\n      // authorization: 'products:view',\r\n      authorization: 'home-page:visit',\r\n      key: 1\r\n    }\r\n  ];\r\n\r\n  let adminItem: AdminItemType[] = [\r\n    {\r\n      name: 'insert',\r\n      route: '/product/insert',\r\n      key: 10\r\n    }\r\n  ];\r\n\r\n  let loginItem: LoginItemType[] = [\r\n    {\r\n      name: 'registration',\r\n      route: '/user/registration',\r\n      key: 20\r\n    },\r\n    {\r\n      name: 'login',\r\n      route: '/user/login',\r\n      key: 21\r\n    },\r\n    {\r\n      name: 'logout',\r\n      route: '#',\r\n      key: 22\r\n    }\r\n  ];\r\n\r\n  let items = { \r\n    userItems: userItems,\r\n    adminItem: adminItem,\r\n    loginItem: loginItem\r\n  };\r\n  return items as NavbarType;\r\n}\r\n","import { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();\r\n","  \r\nimport React from \"react\";\r\n\r\n// IMPORTANT: Contains MDBBootstrap Styles\r\nimport './styles.css';\r\n\r\n// import { MDBCarousel, MDBCarouselCaption, MDBCarouselInner, MDBCarouselItem, MDBView, MDBMask, MDBContainer } from \"mdbreact\";\r\n\r\nlet Home = function() {\r\n    return (\r\n        <header>\r\n          <div \r\n          className=\"view jarallax\" data-jarallax='{\"speed\": 0.2}'>\r\n            <div className=\"container h-100 d-flex justify-content-center align-items-center\">\r\n              <div className=\"row pt-5 mt-3\">\r\n                <div className=\"col-md-12 mb-3\">\r\n                  <div className=\"intro-info-content text-center\">\r\n                    <h1 className=\"display-3 mb-5 wow fadeInDown\" data-wow-delay=\"0.3s\">NEW\r\n                      <a className=\"indigo-text font-weight-bold\" href=\"#!\">COLLECTION</a>\r\n                    </h1>\r\n                    <h5 className=\"text-uppercase mb-5 mt-1 font-weight-bold wow fadeInDown\" data-wow-delay=\"0.3s\">Free\r\n                      delivery & special prices</h5>\r\n                    <a className=\"btn btn-outline-indigo btn-lg wow fadeInDown\" data-wow-delay=\"0.3s\" href=\"#!\">Shop</a>\r\n                    <a className=\"btn btn-indigo btn-lg wow fadeInDown\" data-wow-delay=\"0.3s\" href=\"#!\">Lookbook</a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div></header>);\r\n};\r\n\r\nexport default Home;","import { urlParser } from \"./url-parser\";\r\n\r\nexport let urlBtnUpdates = () => {\r\n        const pageName = urlParser();\r\n        console.log(\"PageName:\", pageName);\r\n        // Add a de-activate or activate class to the button with the corresponding name\r\n        let btnElement;\r\n        let className;\r\n        let element;\r\n        if (pageName === '' || pageName === 'home') {\r\n                btnElement = 'home';\r\n                className = 'activate';\r\n\r\n                //set other btn to de-activate\r\n                element = document.querySelector(`[name=products]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent');\r\n        }\r\n        else if (pageName === 'products') {\r\n                btnElement = 'products';\r\n                className = 'activate';\r\n\r\n                //set other btn to de-activate\r\n                element = document.querySelector(`[name=home]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent');\r\n        }\r\n        else {\r\n                // reset both buttons\r\n\r\n                element = document.querySelector(`[name=home]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent'); \r\n\r\n                element = document.querySelector(`[name=products]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent');\r\n        }\r\n\r\n        // set page's current button to activate\r\n        // console.log(\"CLASSNAME:\", className);\r\n        element = document.querySelector(`[name=${btnElement}]`);\r\n        element?.setAttribute('class', className + ' nav-link Ripple-parent');\r\n};","import React, { Component } from \"react\";\r\n\r\n// Import Components\r\nimport Home from \"../components/home\";\r\nimport { urlBtnUpdates } from \"utils/url-btn-updates\";\r\n\r\n\r\nclass HomeContainer extends Component<HomePropType, HomeStateType> {\r\n    state: HomeStateType;\r\n    constructor(props: HomePropType) {\r\n        super(props);\r\n        this.state = {};\r\n    } // constructor\r\n\r\n    componentDidMount() {\r\n        urlBtnUpdates();\r\n    }\r\n    \r\n    onClick() {\r\n        this.setState(\r\n            {\r\n                collapse: !this.state.collapse,\r\n            }\r\n        );\r\n    } // onClick\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Home />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n} // class\r\n\r\nexport default HomeContainer;","import { MDBRow, MDBCol } from 'mdbreact';\nimport React from 'react';\n\nlet Text = (props: TextPropType) => {\n  return (\n    <React.Fragment>\n      <MDBRow><br /></MDBRow>\n      <MDBRow>\n        <MDBCol\n          size=\"auto\"\n        >\n          <label id={props.id} htmlFor={props.id}>\n            {props.label}\n          </label>\n        </MDBCol>\n        <MDBCol>\n          <input\n            aria-labelledby={props.id}\n            type=\"text\"\n            className={props.className}\n            id={props.id}\n            data-testid={props.testId}\n            placeholder={props.placeholder}\n            name={props.name}\n            value={props.value}\n            onChange={props.changeHandler}\n          />\n        </MDBCol>\n      </MDBRow>\n    </React.Fragment>\n  );\n};\n\nexport default Text;","import { MDBContainer, MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\nimport Text from \"components/inputs/text\";\n\n// Import Server-Side Utilities:\nimport { api as API } from '../../utils/API';\n\nimport { useState, FormEvent } from \"react\";\n\n// Import module to get/set variables from/in the LocalStorage\nimport * as authenticationStore from '../../utils/authentication-store';\n\nimport { useHistory } from \"react-router\";\n\nconst LoginForm = ({ getRole }: { getRole: () => string }) => {\n    const initState: LoginStateType = {\n        email: '',\n        password: '',\n        message: '',\n        access_token: '',\n        refresh_token: '',\n        expiration: '',\n        hasAccessTokenExpired: false,\n        isUserAuthorized: false,\n        authToken: '',\n        token: ''\n    };\n\n    const [state, setState] = useState(initState);\n    let history = useHistory();\n\n    const submitHandler = async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        let data = {\n            email: state.email,\n            password: state.password\n        };\n        try {\n            // Post credentials, to get new token\n            const res = await API.login(data);\n            console.log(`RES: ${JSON.stringify(res)}`);\n            if (res?.status === 200) {\n                // Step 1 of 2: Set state variables from response\n                let { message, access_token, refresh_token, expiration, email } = res.data;\n\n                // Update login credentials on state object\n                setState((prevState) => ({\n                    ...prevState,\n                    access_token,\n                    expiration,\n                    refresh_token,\n                    message,\n                    email\n                }) as unknown as Pick<LoginStateType, keyof LoginStateType>);\n\n                // Step 2 fo 2: Set Local Storage variables from respons\n                let test = await authenticationStore.setLocalStorage(\n                    access_token,\n                    refresh_token,\n                    expiration,\n                    email,\n                    message);\n\n                console.log(`test: ${JSON.stringify(test)}`)\n\n                /***********************************\n                 * Get user role and set on App Router\n                 ***********************************/\n                await getRole();\n\n                // Optional: Since we are pushing to next page.  Clear email and password field\n                setState((prevState) => ({\n                    ...prevState,\n                    email: '',\n                    password: ''\n                }) as unknown as Pick<LoginStateType, keyof LoginStateType>);\n                // Transition to the products route in App.js \n                history.push('/products');\n            }//if\n        }//try\n        catch (err) {\n            console.log(\"LOGIN ERROR\", err);\n            // Update error message on state object\n            setState((prevState) => ({\n                ...prevState,\n                message: err.message\n            }) as unknown as Pick<LoginStateType, keyof LoginStateType>);\n        }\n    };//submitHandler\n\n    return (\n        <>\n            <main\n                role=\"main\"\n                className=\"form-align flex-shrink-0\"\n            >\n                <MDBContainer>\n                    <MDBRow>\n                        <MDBCol\n                            size=\"12\"\n                            middle={true}\n                        >\n                            <form onSubmit={(e: FormEvent<HTMLFormElement>) => submitHandler(e)} data-testid=\"login-form\">\n                                <h1 className=\"mt-5\">\n                                    Login Form\n                                </h1>\n                                <br />\n                                {/* email */}\n                                <div className=\"from-group\">\n                                    <Text\n                                        htmlFor={\"formGroupEmail\"}\n                                        className={\"form-control\"}\n                                        id={\"formGroupEmail\"}\n                                        testId={\"login-email\"}\n                                        // placeholder={\"email\"}\n                                        label=\"Email\"\n                                        name={\"email\"}\n                                        value={state.email}\n                                        changeHandler={(e) => {\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                email: e.target.value\n                                            }))\n                                        }}\n                                    />\n                                    {/* password */}\n                                    <Text\n                                        htmlFor={\"formGroupPassword\"}\n                                        className={\"form-control\"}\n                                        id={\"formGroupPassword\"}\n                                        testId={\"login-password\"}\n                                        // placeholder=\"password\"\n                                        name={\"password\"}\n                                        label={\"Password\"}\n                                        value={state.password}\n                                        changeHandler={(e) => {\n                                            setState((prevState) => ({\n                                                ...prevState,\n                                                password: e.target.value\n                                            }))\n                                        }}\n                                    />\n\n                                    {/* button */}\n                                    <br />\n                                    <MDBRow>\n                                        <MDBCol>\n                                            <label htmlFor=\"formGroupPassword\" />\n                                            <MDBBtn\n                                                type=\"submit\"\n                                                className={\"mx-0\"}\n                                                color=\"blue-grey\"\n                                            >\n                                                Submit\n                                            </MDBBtn>\n                                            <h3\n                                                className={\"mt-5\"}\n                                            >\n                                                {state.message ? state.message : ''}\n                                            </h3>\n                                            <h3\n                                                className=\"mt-5\"\n                                            >\n                                                {state.token ? state.token : ''}\n                                            </h3>\n                                        </MDBCol>\n                                    </MDBRow>\n                                </div>\n                            </form>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n            </main>\n        </>\n    );\n};\n\nexport default LoginForm;","// Import Components\r\nimport LoginForm from \"../../forms/login/index\";\r\n\r\n/**\r\n * Props login container - Update user authorization and authentication when login credentials are provided.\r\n * @param props.getRole, props.history \r\n * @returns  \r\n */\r\nlet LoginContainer = ({getRole}: {getRole: ()=>string }) => {\r\n    return (\r\n        <>\r\n            <LoginForm\r\n                getRole={getRole} \r\n            />\r\n        </>\r\n    )\r\n} // function\r\n\r\nexport default LoginContainer;","function correctInput(id: string) {\r\n\r\n  const target = document.getElementById(id)! as HTMLInputElement;\r\n  console.log(\"target:\", target);\r\n\r\n  target.addEventListener(\"keyup\", eventHandler);\r\n\r\n  function eventHandler(e: Event) {\r\n    const regex = /\\s/g;\r\n    target.value = target.value.replace(regex, \"\").toLowerCase()!;\r\n  }\r\n}\r\nfunction displayInputErrors(idTagName: string, pwdTagName: string, imgTagName: string = '') {\r\n  const email = document.getElementById(idTagName)! as HTMLInputElement;\r\n  const emailText = email.value;\r\n  const password = document.getElementById(pwdTagName)! as HTMLInputElement;\r\n  const passwordText = password?.value;\r\n\r\n  //Optional\r\n  const image = document.getElementById\r\n  (imgTagName)! as any;\r\n  if (image) {\r\n    const imageFile = image.files[0];\r\n    console.log(\"IMAGEFile:\", imageFile);\r\n    if (!imageFile) {\r\n      console.log(\"Image Input Border should be set to red\")\r\n      // image.style.border = \"solid 1px red!important\";\r\n      image.setAttribute(\"class\", \"image-input-error\")\r\n    }\r\n  }\r\n\r\n  if (!emailText) {\r\n    console.log(\"Style should be red\");\r\n    if (email) {\r\n      email.style.borderColor = \"red\";\r\n    }\r\n  }\r\n  if (!passwordText) {\r\n    password.style.borderColor = \"red\";\r\n  }\r\n}\r\n\r\nfunction removeImgErrorDisplay(imageId: string, imageClassAttr: string) {\r\n  document.getElementById(imageId)?.classList.remove(imageClassAttr);\r\n}\r\n\r\nfunction\r\n  removeInputErrors(target: any) {\r\n  target.style.borderColor = \"\";\r\n}\r\n\r\nexport { correctInput, displayInputErrors, removeImgErrorDisplay, removeInputErrors };\r\n","import React from 'react';\r\nimport \"./styles.css\";\r\n\r\n// export class Uploader extends Component {\r\nexport let ImageSelector = (\r\n    props: ImageSelectorPropType) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={\"input-group img-select-btn\"}>\r\n                <label \r\n                className=\"image-label  visually-hidden\" htmlFor={props.submitBtnId}>Select Image:</label>\r\n                <input\r\n                    type={props.imageType}\r\n                    className={`${props.imageClassName} border`}\r\n                    id={props.submitBtnId}\r\n                    ref={props.imageSelectRef}\r\n                    aria-describedby=\"inputGroupFileAddon01\"\r\n                    name={props.imageName}\r\n                    accept={props.fileTypes}\r\n                    onChange={\r\n                        (event) => {\r\n                            props.selectImage(event, props.imageSelectRef, props.previewCanvasRef);\r\n                        }\r\n                    }\r\n                />\r\n                </div>\r\n        </React.Fragment >\r\n    )\r\n};","import React from 'react';\r\nimport { MDBCol, MDBRow } from \"mdbreact\";\r\nimport { ImageSelector } from \"../image-selector\";\r\nimport './styles.css';\r\n\r\n// export class Uploader extends Component {\r\nexport let ImageUploader = (props: ImageUploadPropType) => {\r\n  let { image, uploaderBorder } = props;\r\n  // create ref\r\n  let imageSelectRef: ImageUploadRefObject<HTMLInputElement> = React.createRef();\r\n  let previewCanvasRef: ImageUploadRefObject<HTMLInputElement> = React.createRef();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MDBCol size=\"1\" className={uploaderBorder}>\r\n        {/* BLANK */}\r\n      </MDBCol>\r\n\r\n      {/* BROWSE BUTTON */}\r\n      <MDBCol size=\"4\">\r\n        {/* Display Image */}\r\n        <div className=\"col-12 input-border\">\r\n          {/********IMAGE PREVIEW CANVAS*********/}\r\n          <MDBRow>\r\n            <div className=\"name-container name-container-border\">\r\n              <div\r\n                className=\"preview\"\r\n                ref={previewCanvasRef}>\r\n                {/* <h4>Image Preview</h4> */}\r\n                <p id=\"file-msg\"></p>\r\n              </div>\r\n            </div>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <ImageSelector\r\n              imageName={image.imageName}\r\n              imageClassName={image.className}\r\n              imageType={image.type}\r\n              submitBtnId={image.submitBtnId}\r\n              imageSelectRef={imageSelectRef}\r\n              previewCanvasRef={previewCanvasRef}\r\n              aria={\"inputGroupFileAddon01\"}\r\n              fileTypes={\".png, .jpeg, .jpg\"}\r\n              selectImage={props.selectImage}\r\n            />\r\n          </MDBRow>\r\n        </div>\r\n      </MDBCol>\r\n    </React.Fragment >\r\n  )\r\n};","import { FC } from 'react';\r\nimport { MDBBtn, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport { ImageUploader } from '../../../components/image-uploader';\r\nimport \"./styles.css\";\r\nimport Text from 'components/inputs/text';\r\n\r\n//FC = FunctionComponent\r\nlet ProductInsertForm: FC<ProductInsertFormPropType> = (props: ProductInsertFormPropType) => {\r\n    console.log(\"PRODUCTINSERTINPUTS\", props.image);\r\n    console.log(\"PRODUCTINSERT FileTypes\", props.image.fileTypes);\r\n    return (\r\n        <main className=\"form-align\">\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol size=\"12\" middle={true}>\r\n                        <form onSubmit={props.insertClickHandler}>\r\n                            <h1 className=\"mt-5\">Product Insert Form</h1>\r\n                            <br />\r\n                            <div className=\"product-name-value-form-group\">\r\n                                <Text\r\n                                    htmlFor=\"insertFormGroupProductName\"\r\n                                    className=\"form-control product-name\"\r\n                                    id={\"insertFormGroupProductName\"}\r\n                                    testId={\"product-name\"}\r\n                                    placeholder={props.placeholderName }\r\n                                    name={\"productName\"}\r\n                                    label={\"Name\"}\r\n                                    value={props.productName}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                <Text\r\n                                    htmlFor={\"insertFormGroupProductValue\"}\r\n                                    className={\"form-control product-value\"}\r\n                                    id={\"insertFormGroupProductValue\"}\r\n                                    testId={\"product-value\"}\r\n                                    placeholder={props.placeholderValue}\r\n                                    name={\"productValue\"}\r\n                                    label={\"Value\"}\r\n                                    value={props.productValue}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                <br />\r\n                                <MDBRow className={\"image-require-border\"}>\r\n                                    {/* REQUIREMENTS */}\r\n                                    <MDBCol size=\"12\">Image Requirements (PNG, JPG):<br />\r\n                                        <MDBCol size=\"7\">\r\n                                            <div className=\"col-12\">\r\n                                                <b>Filesize:</b> &#60; {props.image.maxMB}MB, <b>Dimensions: </b>\r\n                                            Min: {props.image.imageMin}, Max: {props.image.imageMax}\r\n                                            </div>\r\n                                        </MDBCol>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow role=\"main\" className=\"upload-image-form-group image-require-border\">\r\n                                    <br></br>\r\n                                    <ImageUploader\r\n                                        uploaderBorder={\"uploader-border\"}\r\n                                        image={props.image}\r\n                                        submitImageHandler={props.submitImageHandler}\r\n                                        productImage={props.productImage}\r\n                                        selectImage={props.selectImage}\r\n                                        setImageProp={props.setImageProp}\r\n                                    />\r\n                                    <MDBCol\r\n                                        className={\"image-require-border\"}>\r\n                                        {/******SUBMIT BUTTON: PRODUCT/VALUE UPLOAD*********/}\r\n                                        <label htmlFor=\"formGroupSubmitButton\" />\r\n                                        <MDBBtn\r\n                                            id=\"submit-image\"\r\n                                            color=\"blue-grey\"\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Submitfc\r\n                                        </MDBBtn>\r\n                                        <h3 className=\"mt-5\">{props.message ? props.message : ''}</h3>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </div>\r\n                        </form>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </main >\r\n    )\r\n};\r\n\r\nexport default ProductInsertForm;","// Import Server-Side Utilities:\r\nimport { api as API } from './API';\r\n\r\nexport let token = {\r\n    refresh: async (url:string, accessToken: string, refreshToken: string, email: string, expired:boolean) => {\r\n        console.log('In REFRESHTOKENS:', refreshToken);\r\n        /*************************************************************\r\n         *  package and send the body to the endpoint\r\n         ************************************************************/\r\n        let newCredentialResponse = await API.refreshTokens(url, accessToken, refreshToken, email, expired);\r\n        console.log(\"tokenStore: newCredentialResponse = \", newCredentialResponse);\r\n\r\n        /*************************************************************\r\n         * Send the newCredentialResponse back to the calling program\r\n         ************************************************************/\r\n        return newCredentialResponse;\r\n    }\r\n};","import { token as tokenStore } from './token-store';\r\n// import * as authenticationStore from \"./authenticationStore\";\r\nimport * as auth from './authentication-store';\r\n\r\nexport let credentials = {\r\n    // Pulls credentials from backend and stores in localstorage\r\n    setLocalCredWNewTokens: async (\r\n        refresh_token: string, \r\n        refreshURL: string, \r\n        authToken: string,\r\n        email: string, \r\n        hasAccessTokenExpired: boolean) => {\r\n        console.log(\"ProductListContainer refresh-token: \", refresh_token);\r\n\r\n        /***************************************\r\n         * Step3: RefreshTokens: If tokens have expired\r\n         * **************************************/\r\n        try {\r\n            /*********************************\r\n             * Step3b:Call refreshTokens to perform update\r\n             *********************************/\r\n            console.log(\"CredentialStore: Before TokenStore Call\");\r\n            let res = await tokenStore.refresh(refreshURL, authToken, refresh_token, email, hasAccessTokenExpired);\r\n            /**************************/\r\n            console.log(\"CredentialStore: After TokenStore Call\");\r\n\r\n            // do something with response\r\n            console.log(\"ProductionList:response returned\", res);\r\n            if (res?.status === 200) {\r\n                console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED RES:\", res);\r\n                /***********************************************\r\n                 * Step4: Set Local Storage Variables\r\n                 ************************************************/\r\n                let { access_token, refresh_token, expiration, email, message } = await auth.setLocalStorage(\r\n                    res.data.access_token,\r\n                    res.data.refresh_token,\r\n                    res.data.expiration,\r\n                    res.data.email,\r\n                    res.data.message);\r\n                console.log(\"After setlocalStorage\");\r\n                /*********************************************\r\n                 * STEP5: Return variables to productListContainer\r\n                 ********************************************/\r\n                return ({\r\n                    access_token,\r\n                    refresh_token,\r\n                    expiration,\r\n                    email,\r\n                    message\r\n                });\r\n                // console.log(\"After return\");\r\n                /********************************************/\r\n                // }\r\n            } // if\r\n        } // try\r\n        catch (err: unknown) {\r\n            // Clear all localStorage, due to invalid Refresh token\r\n            if ((err as CatchErrorType).response.status === 401) {\r\n                console.log('401 status received in ProductUpdate');\r\n                /***********************************************\r\n                 * STEP6: Reset Local Storage Variables\r\n                 ************************************************/\r\n                // console.log(\"In if 3: baseURL =\", baseURL);\r\n                await auth.resetLocalStorage();\r\n\r\n                /*********************************************\r\n                 * STEP7: SET STATE VARIABLES FROM Local Storage\r\n                 *********************************************/\r\n                return ({\r\n                    authToken: '',\r\n                    access_token: '',\r\n                    refresh_token: '',\r\n                    expiration: null,\r\n                    email: '',\r\n                    hasAccessTokenExpired: false,\r\n                    isUserAuthorized: false,\r\n                    message: (err as CatchErrorType).response.data.message\r\n                });\r\n            } // if\r\n        } // catch  \r\n    }, // get\r\n    /************************************************\r\n         Get all state credentials from local storage to send a get request for data \r\n    ************************************************/\r\n    getEvaluatedCredentials: (\r\n        curCredentials: CurrentCredentialType) => {\r\n        let authToken = \"Bearer \" + curCredentials.access_token;\r\n        console.log(\"In getEval:\", authToken);\r\n        let hasAccessTokenExpired = auth.hasAccessTokenExpired();\r\n\r\n        const credentials = {\r\n            access_token: curCredentials.access_token,\r\n            refresh_token: curCredentials.refresh_token,\r\n            expiration: curCredentials.expiration,\r\n            email: curCredentials.email,\r\n            message: curCredentials.message,\r\n            hasAccessTokenExpired,\r\n            authToken,\r\n            isUserAuthorized: true,\r\n            refreshed: false\r\n        };\r\n        return credentials;\r\n    }\r\n}; // export","// import ViewProductBtn from '../ViewProductBtn';\r\n// import LinkActionBtn from '../LinkActionBtn';\r\n\r\nlet ProductItem = (props: ProductItemPropType) => {\r\n  let name = props.name;\r\n  let nameText = `Name: ${name}`;\r\n  let value = props.value;\r\n  let valueText = `Price: $${value}`;\r\n  let id = props.id;\r\n  let image: string = props.image;\r\n  console.log('in productLIst:', props);\r\n\r\n  return (\r\n    <div className=\"container-fluid text-center\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n        <br></br>\r\n          <img src={image} alt={`product ${id}`} />\r\n          <p className=\"mt-2\"><b>{name? nameText: ''}</b></p>\r\n          <p><b>{value ? valueText: ''}</b><br /></p>\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ProductItem;","import { api as API } from './API';\nimport ProductViewItem from \"../components/products/list/item\";\nimport React from \"react\";\n\n\n/**\n* getProductDetails - Get product details for individual product from controller\n* @param baseUrl \n* @returns  \n*/\nexport let getProductDetails = async (baseUrl: string, authToken: string, refreshToken: string) => {\n    let product = await API.getProduct(baseUrl, authToken, refreshToken);\n    let productDetails = product && { ...product.data };\n    console.log(\"@ProductDetails\", productDetails)\n    const productItemComponent = <ProductViewItem\n        image={productDetails.productImage}\n        key={productDetails._id}\n        id={productDetails._id}\n        name={productDetails.name}\n        value={productDetails.value}\n    /> as JSX.Element;\n    return productItemComponent;\n}\n\n/**\n* retrieveUpdatedProductList - retrieves all products from the database\n* @returns  \n*/\nexport let retrieveUpdatedProductList = async () => {\n    /************************************\n     * STEP9: Get the new updated productsList\n     ***********************************/\n    const baseURL = '/api/products';\n    try {\n        let res = await API.getProducts(baseURL);\n\n        let data = res?.data.products;\n        console.log(\"productStore:retrieveUpdatedProductList data =\", data);\n        return data;\n    } catch (err) {\n        console.log(\"ERROR\", err);\n    }\n};\n\n/**\n * Delete Product - Deletes an individual product\n * @param url \n * @param productId \n * @param email \n * @param accessToken \n * @param refresh_token \n * @param expired \n * @param [name] \n * @param [value] \n * @param [imageSrc] \n * @returns  \n */\nexport async function deleteProduct(\n    url: string,\n    productId: string,\n    email: string,\n    accessToken: string,\n    refresh_token: string,\n    expired: boolean,\n    name = null,\n    value = null,\n    imageSrc = null\n) {\n    console.log('IN DELETE PRODUCT CALL');\n    console.log(`DATA URL: ${url}, ATOKENT: ${accessToken}, RTOKEN: ${refresh_token}, EXPIRED: ${expired}, EMAIL: ${email}`);\n\n    let deleteProductResponse = await API.deleteProduct(url, accessToken, refresh_token, expired, email);\n\n    /*NEVER COMES BACK*/\n    console.log(\"deleteProduct: \", deleteProductResponse);\n\n    // Return deleteProductResponse from deleteProduct on the backend\n    return deleteProductResponse;\n}\n\n// \n/**\n * Update product - Updates image data in SQL db, with info from request body\n * @param url \n * @param id \n * @param email \n * @param authToken \n * @param refreshToken \n * @param expired \n * @param name \n * @param value \n * @param [image] \n * @returns  \n */\n export let updateProduct = async (\n    url: string,\n    id: string,\n    email: string,\n    authToken: string,\n    refreshToken: string,\n    expired: boolean,\n    name: string,\n    value: string,\n    image = null) => {\n    console.log('ProductStore:IN UPDATE PRODUCT CALL', \"expired\", expired);\n    let updateResponse = await API.updateProduct(url, authToken, refreshToken, name, value, image, expired, email);\n\n    // Return results to the calling program\n    return updateResponse;\n};\n\n/**\n* insertCloudinary - Insert image into cloudinary storage server\n* @param baseURL \n* @param imageObj \n* @returns  \n*/\nexport let insertCloudinary = async (baseURL: string, imageObj: string, authToken: string, refreshToken: string) => {\n    const cloudinaryResponse = await API.insertCloudinary(baseURL, imageObj, authToken, refreshToken);\n\n    return cloudinaryResponse;\n};\n\n// Define Call to Server Side utils to post body to the backend server:\n/**\n * Inserts product - Inserts image details from request body into sql db\n * @param url \n * @param id \n * @param email \n * @param [authToken] \n * @param [refreshToken] \n * @param [expired] \n * @param name \n * @param value \n * @param image \n * @returns  \n */\nexport async function insertProduct(\n    url: string,\n    id: string,\n    email: string,\n    authToken = null,\n    refreshToken = null,\n    expired = null,\n    name: string,\n    value: string,\n    image: ImageType) {\n    console.log('ProductStore: insertProduct: IN INSERT PRODUCT CALL');\n    console.log(\"ProductStore: insertProduct: Insert Product Image:\", image);\n    console.log(\"ProductStore: insertProduct: email:\", email);\n    let insertResponse = await\n        API.insertProduct(url, id, email, authToken, refreshToken, name, value, image, expired);\n\n    // Return results to the calling program\n    return insertResponse;\n}\n\n/**\n* Perform DB Action - Executes the callback function, with user credentials\n* @param [productId] \n* @param email \n* @param authToken \n* @param refreshToken \n* @param expired \n* @param [name] \n* @param [value] \n* @param [image] \n* @param url \n* @param cb \n* @returns  \n*/\nexport let performDBAction = async (\n    productId = '',\n    email: string,\n    authToken: string,\n    refreshToken: string,\n    expired: boolean,\n    name: string | null | undefined = null,\n    value: string | null | undefined = null,\n    image: ImageType | null = null,\n    url: string,\n    cb: Function) => {\n\n    const uniqueProductError: string = \"Request failed with status code 500\";\n    const uniqueProductMsg = \"Invalid Input\";\n\n    console.log(\"ProductStore: PerformDbAction:\", \"email:\", email);\n    console.log('ProductUpdateContainer:refresh_token = ', refreshToken);\n\n    /**********************************\n     *  STEP8: Call method to delete product\n     ***********************************/\n    try {\n        // Set Refresh Token Temporarly to norefresh to clear checkAuthization\n        // let refresh_token = 'norefresh';\n\n        console.log(\"BEFORE UPDATE CALLED\");\n        console.log(\"PerformDBAction Image:\", image);\n        let callBackResponse = await cb(\n            url + productId,\n            productId,\n            email,\n            authToken,\n            refreshToken,\n            expired,\n            name,\n            value,\n            image\n        );\n\n        console.log(\"AFTER UPDATE CALLED\");\n\n        console.log(\"RESPONSEMESSAGE \", JSON.stringify(callBackResponse), \"STATUS\", callBackResponse.status);\n\n        if (callBackResponse.status === 200 || callBackResponse.status === 201) {\n            /************************************\n             *  10142019: Set the global variable to  \n             *  the updated ProductsListContainer\n             ***********************************/\n\n            let productsList = await retrieveUpdatedProductList();\n            console.log(\"retrievedUpdatedProductList:\", productsList);\n\n            let data = {\n                message: \"Action Completed\",\n                refresh_token: \"norefresh\",\n                isUserAuthorized: true,\n                hasAccessTokenExpired: false,\n                productsList: productsList\n            };\n\n            return data;\n        }\n    }\n    catch (err) {\n        console.log('err:', err.message);\n        let data = {message: ''};\n\n        if (err.message === uniqueProductError) {\n            data = {\n                message: uniqueProductMsg\n            };\n        } else {\n            data = {\n                message: err.message\n            };\n        }\n        \n        return data\n    }\n};\n\n/**\n * stage db action - An integrator that passes an id and a callback function \n * corresponding to the desired db action to be performed, and retrieves the \n * new data and updates the state variables, to be displayed to screen.\n * @param id \n * @param email \n * @param name \n * @param value \n * @param image \n * @param url \n * @param refreshToken \n * @param authToken \n * @param expired \n * @param cb \n * @returns  \n */\n export let stageDBAction = async (\n    id: string,\n    email: string,\n    name: string | null,\n    value: string | null,\n    image: ImageType | null,\n    url: string,\n    refreshToken: string,\n    authToken: string,\n    expired: boolean,\n    cb: Function) => {\n    console.log(\"Start stageDBAction: performDBAction\");\n    console.log(\"stageDBAction-email:\", email);\n\n    // Execute callback function and return results\n    let dBActionResults = await performDBAction(\n        id,\n        email,\n        authToken,\n        refreshToken,\n        expired,\n        name,\n        value,\n        image,\n        url,\n        cb);\n\n    console.log(\"PRODUCTINSERT: CONTAINER performDBAction dBActionResults:\", dBActionResults);\n\n    /************************************\n     * Set placeholder text if data was inserted\n     ****************************************/\n    let namePlaceHolder;\n    let valuePlaceHolder;\n    if (dBActionResults?.message === \"Action Completed\") {\n\n        if (name) {\n            namePlaceHolder = { placeholderName: name };\n        }\n        if (value) {\n            valuePlaceHolder = { placeholderValue: value };\n\n        }\n    }\n    console.log(\"Passed performDBAction\");\n    let {\n        message,\n        isUserAuthorized,\n        productsList\n    }: PerformDBActionType = dBActionResults!;\n\n    if (message === \"Request failed with status code 401\") {\n        message = \"Please Login\";\n    }\n    /***************************************************\n     * Set objects to be returned from stageDBAction\n     *****************************************************/\n    let dbObj;\n    if (namePlaceHolder && valuePlaceHolder) {\n        dbObj = {\n            message,\n            refreshToken,\n            isUserAuthorized,\n            expired,\n            productsList,\n            placeholderName: namePlaceHolder ? namePlaceHolder.placeholderName : '',\n            placeholderValue: valuePlaceHolder ? valuePlaceHolder.placeholderValue : ''\n        }\n    }\n    else {\n        dbObj = {\n            message,\n            refreshToken,\n            isUserAuthorized,\n            hasAccessTokenExpired: expired,\n            productsList\n        }\n    }\n\n    console.log(\"STAGEDBACTION: productListData =\", productsList);\n\n    return dbObj;\n}\n","let setImageParagraphTag = (para: Text, color: string, imageName: string, imageSize: string, imageWidth: number, imageHeight: number, previewCanvas: HTMLCanvasElement) => {\r\n  // Set Paragraph\r\n  para = document.createTextNode('File Name: ' + imageName + ', File Size: ' + imageSize + ', Width: ' + imageWidth + ', Height: ' + imageHeight);\r\n\r\n  let listItem = document.createElement('li');\r\n  listItem.setAttribute('id', 'li-id');\r\n\r\n\r\n  // listItem.appendChild(lnBreak);\r\n  listItem.appendChild(para);\r\n\r\n  let orderedList = document.createElement('ol');\r\n  previewCanvas.appendChild(orderedList);\r\n\r\n  orderedList.appendChild(listItem);\r\n\r\n  listItem.style.color = color;\r\n  // remove canvas if image added\r\n  removeItem('canvas', previewCanvas);\r\n};\r\n\r\nlet removeItem = (element: string, previewCanvas: HTMLCanvasElement) => {\r\n  /************************/\r\n  if (previewCanvas) {\r\n    let item = previewCanvas.getElementsByTagName(`${element}`);\r\n    const isItemCreated = item.length ? true : false;\r\n    console.log(\"item Length\", item.length);\r\n    console.log(\"is item created\", isItemCreated);\r\n    console.log(\"no item\", item);\r\n    if (isItemCreated) {\r\n      previewCanvas.removeChild(item[0]);\r\n    }\r\n    /************************/\r\n  }\r\n\r\n};\r\n\r\nlet removeCanvas = (previewCanvas: HTMLCanvasElement) => {\r\n  if (previewCanvas) {\r\n    var canvasElement = previewCanvas.getElementsByTagName('canvas');\r\n    if (canvasElement.length >= 1) {\r\n      removeItem('canvas', previewCanvas);\r\n      removeItem('ol', previewCanvas);\r\n    }\r\n  }\r\n\r\n};\r\n\r\n\r\nlet setFileMessage = (tag: string, message: string) => {\r\n  const errorTag = document.getElementById(tag)!;\r\n  if (errorTag) {\r\n    errorTag.innerHTML = message;\r\n  }\r\n};\r\n\r\nlet getFormattedFileSize = (files: FileList): string => {\r\n  let curFiles = files;\r\n  return returnFileSize(curFiles[0].size)!;\r\n};\r\n\r\n/*Returns formatted version of file size*/\r\nlet returnFileSize = (number: number) => {\r\n  if (number < 1024) {\r\n    return number + 'bytes'\r\n  } else if (number >= 1024 && number < 1048576) {\r\n    return (number / 1024).toFixed(1) + 'KB'\r\n  } else if (number >= 1048576) {\r\n    return (number / 1048576).toFixed(1) + 'MB'\r\n  }\r\n};\r\n\r\nlet appendImage = (img: HTMLImageElement, canvas: HTMLCanvasElement, previewCanvas: HTMLCanvasElement) => {\r\n  img.onload = () => {\r\n    // Set canvas dimension to match image\r\n    canvas.width = img.width\r\n    canvas.height = img.height\r\n    // canvas.width = previewCanvas.width;\r\n    // canvas.height = previewCanvas.height;\r\n    var context: CanvasRenderingContext2D = canvas.getContext('2d')!;\r\n\r\n    // Draw image to canvas centered\r\n    // https://stackoverflow.com/questions/16317971/draw-images-on-in-the-middle-of-a-canvas\r\n    context.drawImage(img, canvas.width / 2 - img.width / 2,\r\n      canvas.height / 2 - img.height / 2);\r\n    // previewCanvas.appendChild(canvas);\r\n    canvas.setAttribute(\"class\", \"img-fluid\");\r\n    previewCanvas.prepend(canvas);\r\n  };\r\n};\r\n\r\nlet checkImageDimensions = (imageWidth: number, imageMin: number, imageHeight: number, imageMax: number) => {\r\n  let areDimensionsValid = false;\r\n  // let para = document.createTextNode('');\r\n\r\n  // if dimensions valid\r\n  if (imageWidth >= imageMin && imageWidth <= imageMax && imageHeight >= imageMin && imageHeight <= imageMax) {\r\n    areDimensionsValid = true;\r\n  }\r\n  // dimensions not valid\r\n  else {\r\n    areDimensionsValid = false;\r\n  }\r\n  return areDimensionsValid;\r\n};\r\n\r\nlet setFileSize = (areDimensionsValid: boolean, errorTag: string, acceptedMsg: string, unacceptedMsg: string, imageName: string, imageSize: string, files: FileList, previewCanvas: HTMLCanvasElement, imageWidth: number, imageHeight: number) => {\r\n  let para = document.createTextNode('');\r\n  if (areDimensionsValid) {\r\n    // Set file size with Units:\r\n    imageSize = getFormattedFileSize(files);\r\n    setImageParagraphTag(para, 'black', imageName, imageSize, imageWidth, imageHeight, previewCanvas);\r\n    setFileMessage(errorTag, acceptedMsg);\r\n    let submitBtn: HTMLButtonElement = document.getElementById('submit-image') as HTMLButtonElement;\r\n    submitBtn.disabled = false;\r\n  }\r\n  else {\r\n    console.log(\"****DIMENSIONS NOT VALID****\");\r\n    const submitImgBtn: HTMLButtonElement = document.getElementById('submit-image') as HTMLButtonElement;\r\n    submitImgBtn.disabled = true;\r\n\r\n    // Set file size with Units:\r\n    imageSize = getFormattedFileSize(files);\r\n    setImageParagraphTag(para, 'red', imageName, imageSize, imageWidth, imageHeight, previewCanvas);\r\n    setFileMessage(errorTag, unacceptedMsg);\r\n  }\r\n  return imageSize;\r\n};\r\n\r\nlet isFileSelected = (input: HTMLInputElement) => {\r\n  let curFiles = input ? input.files : null;\r\n  return curFiles;\r\n};\r\n\r\nlet imgOnError = (previewCanvas: HTMLCanvasElement, imageWidth: number, imageMax: number, imageHeight: number, errorTag: string, invalidMsg: string) => {\r\n  if (imageWidth <= imageMax && imageHeight <= imageMax) {\r\n    console.log('NOT A Valid File: ');\r\n    setFileMessage(errorTag, invalidMsg);\r\n    const submitImgBtn: HTMLButtonElement = document.getElementById('submit-image') as HTMLButtonElement;\r\n    submitImgBtn.disabled = true;\r\n    console.log(\"IMAGE ERROR ONLOAD\");\r\n  }\r\n  // Remove Canvas and Paragraph for wrong dimensions or no file.\r\n  removeCanvas(previewCanvas);\r\n  console.log(\"in imgONERROR\");\r\n}; // oneerror\r\n\r\n\r\nlet displayImage = (img: HTMLImageElement, areDimensionsValid: boolean, previewCanvas: HTMLCanvasElement) => {\r\n  var canvasElement = previewCanvas.getElementsByTagName('canvas');\r\n  var canvas = document.createElement('canvas');\r\n  console.log(\"DISPLAYIMAGE CANVASELEMENT:\", canvasElement);\r\n  if (!areDimensionsValid) {\r\n\r\n  }\r\n  // No Image added to canvas\r\n  else if (canvasElement.length === 0) {\r\n    appendImage(img, canvas, previewCanvas)\r\n  }\r\n  // Image added to canvas\r\n  else {\r\n    removeItem('canvas', previewCanvas);\r\n    appendImage(img, canvas, previewCanvas);\r\n  }\r\n};\r\n\r\nlet loadImage = (img: HTMLImageElement, blob: Blob): Promise<ImagePropsType> => {\r\n  console.log(\"IMG\", img, \"BLOB\", blob);\r\n  return new Promise(function (resolve, reject) {\r\n    // define source\r\n    img.src = URL.createObjectURL(blob);\r\n    // resolve promise onLoad\r\n    img.onload = () => {\r\n\r\n      const imageProps: ImagePropsType = {\r\n        imageName: blob.name,\r\n        imageHeight: img.height,\r\n        imageWidth: img.width,\r\n        imageSize: blob.size,\r\n        imageSrc: img.src\r\n      };\r\n      resolve(imageProps);\r\n    };\r\n    // reject promise onError\r\n    img.onerror = () => {\r\n      reject(\"rejected\");\r\n    };\r\n  });\r\n};\r\n\r\n/* Base64 Decoder: Remove the metadata\r\nhttps://www.base64decode.net/base64-image-decoder */\r\nlet convertImageFromUrlToBase64String = async (url: string): Promise<string> => {\r\n  console.log(\"In convertImageStart\");\r\n  var img = new Image();\r\n  img.crossOrigin = 'Anonymous'\r\n  var dataUrl;\r\n  return new Promise(function (resolve, reject) {\r\n    // Setting the img.src will call img.onload when the src is loaded\r\n    console.log(\"URL1: \", url);\r\n    // Pull Width/Height from URL and store in img objec\r\n    img.src = url;// url is the img src\r\n    console.log(\"URL2: \", url);\r\n\r\n    img.onload = () => {\r\n      var canvas = document.createElement('canvas');\r\n      console.log(`canvas width: ${canvas.width}`);\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      console.log(\"IMGWIDTH:\", img.width, \"IMGHEIGHT:\", img.height);\r\n\r\n      // Get a canvas reference to draw to the canvas\r\n      var context: CanvasRenderingContext2D = canvas.getContext('2d')!;\r\n      console.log(`canvas width: ${canvas.width}`);\r\n      // Draw image to the canvas centered\r\n      // https://stackoverflow.com/questions/16317971/draw-images-on-in-the-middle-of-a-canvas\r\n      context.drawImage(img, canvas.width / 2 - img.width / 2,\r\n        canvas.height / 2 - img.height / 2);\r\n      // Return a data URI containing a representation of the image in jpg format\r\n      dataUrl = canvas.toDataURL('image/jpg');\r\n      console.log(\"Images loaded helper.js resolved\", typeof dataUrl);\r\n      resolve(dataUrl);\r\n    };\r\n\r\n    // reject promis onError\r\n    img.onerror = (err) => {\r\n      reject(\"image rejected in BASE64 Conversion:\"+ err);\r\n    };\r\n  }); // promise\r\n};// convertImage\r\n\r\n// Check whether the file type of the input file is valid\r\nlet isFileTypeValid = (file: File, fileTypes: string[]) => {\r\n  if (file) {\r\n    console.log(\"FILEType :\", file.type);\r\n    for (var i = 0; i < fileTypes.length; i++) {\r\n      if (file.type === fileTypes[i]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  else\r\n    return false;\r\n};\r\n\r\nexport {\r\n  setImageParagraphTag, removeItem, removeCanvas, setFileMessage, getFormattedFileSize, appendImage, checkImageDimensions, setFileSize, isFileSelected, imgOnError, displayImage,\r\n  loadImage, convertImageFromUrlToBase64String, isFileTypeValid, returnFileSize\r\n};","import { Component, FormEvent } from \"react\";\r\nimport { AxiosError } from \"axios\";\r\n// Import module to get/set variables from/in the LocalStorage\r\nimport * as auth from \"../../utils/authentication-store\";\r\nimport Can from \"components/can\";\r\nimport {\r\n  displayInputErrors,\r\n  removeImgErrorDisplay,\r\n  removeInputErrors,\r\n} from \"utils/input-validation\";\r\n\r\n// Import Components\r\nimport ProductInsertForm from \"../../forms/product/insert\";\r\nimport { credentials as credentialStore } from \"../../utils/credential-store\";\r\nimport { insertProduct, stageDBAction } from \"../../utils/product-store\";\r\nimport * as imgHelper from \"./utils/helpers\";\r\nimport { insertCloudinary } from \"../../utils/product-store\";\r\nimport { ChangeEvent } from \"react\";\r\nimport { Moment } from \"moment\";\r\nimport \"./styles.css\";\r\n\r\nclass ProductInsertContainer extends Component<\r\n  ProductInsertContainerPropType,\r\n  ProductInserContainerStateType\r\n> {\r\n  cloudinaryURL = \"/api/products/cloudinary/insert/\";\r\n  refreshURL = \"/api/user/login/refresh\";\r\n  baseURL = \"/api/products/product/insert/\";\r\n  constructor(props: ProductInsertContainerPropType) {\r\n    super(props);\r\n    this.state = {\r\n      productId: \"\",\r\n      productName: \"\",\r\n      ProductInsertForm: \"\",\r\n      productImage: \"\",\r\n      placeholderName: \"\",\r\n      placeholderValue: \"\",\r\n      productsList: [],\r\n      authToken: \"\",\r\n      refresh_token: \"\",\r\n      email: \"\",\r\n      hasAccessTokenExpired: false,\r\n      isUserAuthorized: true,\r\n      message: \"\",\r\n      // Image imputs for Image Uploader component\r\n      image: {\r\n        base64Str: \"\",\r\n        cloudImageUrl: \"\",\r\n        cloudImagePublicId: \"\",\r\n        input: \"\",\r\n        file: \"\",\r\n        submitBtnId: \"image-input\",\r\n        fileTypes: [\"image/jpeg\", \"image/jpg\", \"image/png\"],\r\n        imageName: \"\",\r\n        imageWidth: 0,\r\n        imageHeight: 0,\r\n        imageSize: 0,\r\n        imageSrc: \"\",\r\n        imageMin: 200,\r\n        imageMax: 450,\r\n        maxMB: 2,\r\n        errorTag: \"file-msg\",\r\n        invalidMsg: \"Not a valid file.\",\r\n        unacceptedMsg: \"File not accepted.\",\r\n        acceptedMsg: \"File accepted.\",\r\n        fileMsgElement: \"\",\r\n        previewCanvasElement: \"\",\r\n        submitImageElement: \"\",\r\n        className: \"customFileInput\",\r\n        type: \"file\",\r\n      },\r\n    };\r\n\r\n    this.changeHandler = this.changeHandler.bind(this);\r\n    this.insertClickHandler = this.insertClickHandler.bind(this);\r\n    // @ts-ignore\r\n    this.insertProduct = insertProduct.bind(this);\r\n    this.productImageClickHandler = this.productImageClickHandler.bind(this);\r\n    this.submitImageHandler = this.submitImageHandler.bind(this);\r\n    this.selectImage = this.selectImage.bind(this);\r\n    this.setImageProp = this.setImageProp.bind(this);\r\n    this.message = this.message.bind(this);\r\n  } // constructor\r\n\r\n  setElementRef() {\r\n    this.setImageProp(\r\n      \"fileMsgElement\",\r\n      document.getElementById(this.state.image.errorTag)\r\n    );\r\n\r\n    console.log(\"ImageUploaderStateMounted\", this.state.image.imageMin);\r\n  }\r\n\r\n  //  Select an image\r\n  /************/\r\n  async selectImage(\r\n    event: FormEvent<HTMLInputElement>,\r\n    imageSelectRef: ImageUploadRefObject<HTMLInputElement>,\r\n    previewCanvasRef: ImageUploadRefObject<HTMLDivElement>\r\n  ) {\r\n    // event.preventDefault();\r\n    event.persist();\r\n    console.log(\"EVENT:\", event);\r\n    console.log(\"IMGREF:\", imageSelectRef, \"; PVCanvasRef:\", previewCanvasRef);\r\n    console.log(\r\n      \"SELECTIMAGE imageSelectRef:\",\r\n      imageSelectRef?.current,\r\n      \"previewCanvasRef:\",\r\n      previewCanvasRef?.current,\r\n      \"imageSelectRef1:\",\r\n      typeof imageSelectRef\r\n    );\r\n\r\n    // Get Reference to the canvas\r\n    let previewCanvasElement = previewCanvasRef?.current;\r\n    let inputElement = imageSelectRef?.current;\r\n\r\n    this.setImageProp(\"previewCanvasElement\", previewCanvasElement);\r\n    this.setImageProp(\"input\", inputElement);\r\n\r\n    // Create copy of image props\r\n    let image = this.state.image;\r\n    console.log(\r\n      \"In Contanier: imagebtn:\",\r\n      image.submitBtnId,\r\n      \"file:\",\r\n      image.input,\r\n      \"file2\",\r\n      image.file\r\n    );\r\n\r\n    // 12/12: Handle image name display;\r\n    /*******************************************/\r\n    await this.productImageClickHandler(event);\r\n    /*******************************************/\r\n\r\n    // copy image.input  to state.image\r\n    this.setState({ image: image });\r\n\r\n    // this.setImageProp(\"input\", image.file);\r\n    console.log(\"FILE INPUT: \", this.state.image.input);\r\n\r\n    this.setImageProp(\"file\", this.state.image.file);\r\n\r\n    let img;\r\n\r\n    if (\r\n      imgHelper.isFileSelected(image.input) &&\r\n      imgHelper.isFileTypeValid(image.file, image.fileTypes)\r\n    ) {\r\n      var blob = image.input.files[0];\r\n\r\n      // save image back to prop\r\n      img = new Image();\r\n      try {\r\n        const loadedImgResult: ImagePropsType = await imgHelper.loadImage(\r\n          img,\r\n          blob\r\n        );\r\n        console.log(\"loadedImgResult\", loadedImgResult);\r\n\r\n        // Set variables\r\n        img.src = loadedImgResult.imageSrc.toString();\r\n        this.setImageProp(\"imageSrc\", loadedImgResult.imageSrc);\r\n        this.setImageProp(\"imageWidth\", loadedImgResult.imageWidth);\r\n        this.setImageProp(\"imageHeight\", loadedImgResult.imageHeight);\r\n        this.setImageProp(\"imageSize\", loadedImgResult.imageSize);\r\n        this.setImageProp(\"imageName\", loadedImgResult.imageName);\r\n\r\n        console.log(\r\n          \"DISPLAYIMAGE PREVIEW CANVAS:\",\r\n          image.previewCanvasElement,\r\n          \"*\",\r\n          \"state:\",\r\n          this.state.image.previewCanvasElement\r\n        );\r\n\r\n        // remove OL tag\r\n        imgHelper.removeItem(\"ol\", image.previewCanvasElement);\r\n        var areDimensionsValid = imgHelper.checkImageDimensions(\r\n          image.imageWidth,\r\n          image.imageMin,\r\n          image.imageHeight,\r\n          image.imageMax\r\n        );\r\n        console.log(\"AREDIMENSIONSVALID:\", areDimensionsValid);\r\n\r\n        this.setImageProp(\r\n          \"imageSize\",\r\n          imgHelper.setFileSize(\r\n            areDimensionsValid,\r\n            image.errorTag,\r\n            image.acceptedMsg,\r\n            image.unacceptedMsg,\r\n            image.imageName,\r\n            image.imageSize,\r\n            image.input.files,\r\n            image.previewCanvasElement,\r\n            image.imageWidth,\r\n            image.imageHeight\r\n          )\r\n        );\r\n\r\n        // Create Canvas and load image\r\n        imgHelper.displayImage(\r\n          img,\r\n          areDimensionsValid,\r\n          image.previewCanvasElement\r\n        );\r\n\r\n        //12/12/09: set new image prop values\r\n        this.setState({ image });\r\n\r\n        // Remove error class from image-input, if file selected\r\n        removeImgErrorDisplay(\"image-input\", \"image-input-error\");\r\n      } catch (err) {\r\n        console.log(\"failure \", err);\r\n        imgHelper.imgOnError(\r\n          image.previewCanvasElement,\r\n          image.imageWidth,\r\n          image.imageMax,\r\n          image.imageHeight,\r\n          image.errorTag,\r\n          image.invalidMsg\r\n        );\r\n      }\r\n      // console.log(\"IMAGE NAME\", this.imageName);\r\n    } // if\r\n    else {\r\n      imgHelper.removeCanvas(image.previewCanvasElement);\r\n      imgHelper.setFileMessage(image.errorTag, image.unacceptedMsg);\r\n    }\r\n  }\r\n  /************/\r\n  setImageProp(key: string, value: HTMLElement | null | string | number) {\r\n    // Make a copy of props\r\n    var image = this.state.image;\r\n    console.log(\"setImageProp\", image, \"Key\", key, \"Value\", value);\r\n    // update props\r\n    image[key] = value;\r\n\r\n    // PROBLEM\r\n    /*******************/\r\n    console.log(\"image: \", image);\r\n    /*******************/\r\n    // Update state with new value\r\n    this.setState({ image: image });\r\n\r\n    console.log(\"Key:\", [key]);\r\n    console.log(\"Value:\", value);\r\n    console.log(`Image ${key}:`, this.state.image[key]);\r\n  }\r\n  async submitImageHandler(event: FormEvent<HTMLFormElement>, img: any) {\r\n    // Don't refresh the page!\r\n    // event.preventDefault();\r\n    event.persist();\r\n    console.log(\"IN SUBMITIMAGEHANDLER\");\r\n\r\n    //local copy of image\r\n    let image;\r\n    let {\r\n      input,\r\n      imageWidth,\r\n      imageHeight,\r\n      imageMin,\r\n      imageMax,\r\n      imageName,\r\n      imageSize,\r\n      maxMB,\r\n      errorTag,\r\n      acceptedMsg,\r\n      unacceptedMsg,\r\n      fileMsgElement,\r\n      previewCanvasElement,\r\n      imageSrc,\r\n    } = img;\r\n\r\n    // set img props\r\n    this.setState({\r\n      image: img,\r\n    });\r\n    // if file selected\r\n    if (imgHelper.isFileSelected(input)) {\r\n      console.log(\"ActionHelper file selected\");\r\n\r\n      // checks image dimension and file size\r\n      let isInputValid = false;\r\n\r\n      // Check Image Dimensions\r\n      if (\r\n        imageWidth >= imageMin &&\r\n        imageWidth <= imageMax &&\r\n        imageHeight >= imageMin &&\r\n        imageHeight <= imageMax\r\n      ) {\r\n        isInputValid = true;\r\n      } else {\r\n        isInputValid = false;\r\n      }\r\n\r\n      // Check Image Size\r\n      console.log(\"FileName:\", imageName);\r\n      console.log(\"FileSize:\", imageSize);\r\n\r\n      // Get Unit of Measure\r\n      var unit = imageSize.slice(-2).toLowerCase();\r\n\r\n      // Get FileSize\r\n      var fileSizeNumber = imageSize.replace(/[^\\d.-]/g, \"\");\r\n\r\n      console.log(\"FILESIZE = \" + fileSizeNumber + \", Unit = \" + unit);\r\n      console.log(\"Max File Size:\", maxMB);\r\n\r\n      if (unit === \"mb\") {\r\n        console.log(\r\n          \"max file size:\",\r\n          maxMB,\r\n          \", actual file size:\",\r\n          fileSizeNumber\r\n        );\r\n        if (fileSizeNumber <= maxMB) {\r\n          isInputValid = true;\r\n        } else {\r\n          isInputValid = false;\r\n        }\r\n      } else if (unit === \"kb\") {\r\n        if (fileSizeNumber <= maxMB * 1000) {\r\n          isInputValid = true;\r\n        } else {\r\n          isInputValid = false;\r\n        }\r\n      }\r\n\r\n      // If input is not valid do not accept image and do nothing\r\n      console.log(\"Is Input File Valid:\", isInputValid);\r\n      if (!isInputValid) {\r\n        console.log(\"image not acceptable\");\r\n        if (fileMsgElement) {\r\n          imgHelper.setFileMessage(errorTag, unacceptedMsg);\r\n        } else {\r\n          imgHelper.setFileMessage(errorTag, acceptedMsg);\r\n        }\r\n      } else {\r\n        console.log(\"Image is acceptable\");\r\n        var imageUrl = imageSrc;\r\n\r\n        console.log(\"Call convertImageFromURLTOBase\");\r\n        /******************************************************    Converts image to base64String\r\n         ****************************************************/\r\n        let base64StringImage: string =\r\n          await imgHelper.convertImageFromUrlToBase64String(imageUrl);\r\n        console.log(`***Base64StringImage: ${typeof base64StringImage}`);\r\n        /**************************\r\n         * Code Burst onChange Event\r\n         * upload to Cloudinary\r\n         **************************/\r\n        console.log(\"Calling productStore.insertCloudinary\");\r\n\r\n        const currentCredentials = await auth.getLocalStorage();\r\n\r\n        console.log(\"CurrentCredentials:\", currentCredentials);\r\n\r\n        const authToken = \"Bearer \" + currentCredentials.access_token;\r\n\r\n        console.log(\"ProdInsertCont-AuthToken:\", authToken);\r\n        const refreshToken = currentCredentials.refresh_token;\r\n\r\n        console.log(\"ProdInsertCont-RefreshToken:\", refreshToken);\r\n\r\n        let cloudinaryResult = await insertCloudinary(\r\n          this.cloudinaryURL,\r\n          base64StringImage,\r\n          authToken,\r\n          refreshToken\r\n        );\r\n        console.log(\"CloudinaryResult:\", cloudinaryResult);\r\n        // If cloudinary insert successfull\r\n        if (cloudinaryResult) {\r\n          // this.setState({cloudImageUrl: cloudinaryResult.url});\r\n          /**************************/\r\n          console.log(\"Converted Image: \", base64StringImage);\r\n          // copy image state to local variable\r\n          image = this.state.image;\r\n          //update cloudImageUrl\r\n          console.log(\"CLOUD URL:\", cloudinaryResult?.data.url);\r\n          image.cloudImageUrl = cloudinaryResult?.data.url;\r\n          console.log(\"CLOUD IMAGEURL:\", image.cloudImageUrl);\r\n          image.cloudImagePublicId = cloudinaryResult?.data.public_id;\r\n\r\n          /****************************/\r\n          // Save image.cloudImagePublicId to db, where productImage == image.cloudImageURL\r\n          /****************************/\r\n          console.log(\"public_id\", image.cloudImagePublicId);\r\n          /*************************** */\r\n          // update base64Str\r\n          image.base64Str = base64StringImage;\r\n          // update image state variable\r\n          console.log(\"Image:\", image);\r\n          this.setState({ image: image });\r\n          console.log(\r\n            \"State image: \",\r\n            this.state.image,\r\n            \"cloud image url\",\r\n            this.state.image.cloudImageUrl\r\n          );\r\n        } // if cloudinary\r\n      } // else\r\n      // remove canvas after submit\r\n      imgHelper.removeCanvas(previewCanvasElement);\r\n      // var image = this.state.image;\r\n\r\n      /*****************************/\r\n      // Reset image Name\r\n      /*******************************/\r\n\r\n      await this.productImageClickHandler(event);\r\n    } // if file selected\r\n\r\n    console.log(\"SubmitImageHandler: file NOT selected\");\r\n  } // submit-Image on click\r\n\r\n  /***************************************************/\r\n  async setStateVariables(\r\n    access_token: string,\r\n    refresh_token: string,\r\n    expiration: Moment | null,\r\n    email: string,\r\n    message: string\r\n  ) {\r\n    /************************************************\r\n     * SET State VARIABLES FROM LocalStorage\r\n     ************************************************/\r\n    let authToken = \"Bearer \" + access_token;\r\n\r\n    console.log(\"Auth token\", authToken);\r\n    this.setState({ authToken });\r\n\r\n    console.log(\"Refresh token\", refresh_token);\r\n    this.setState({ refresh_token });\r\n\r\n    this.setState({ email });\r\n\r\n    let hasAccessTokenExpired = await auth.hasAccessTokenExpired();\r\n\r\n    console.log(\"Expired?\", hasAccessTokenExpired);\r\n    this.setState({ hasAccessTokenExpired });\r\n\r\n    this.setState({ isUserAuthorized: true });\r\n\r\n    this.setState({ message });\r\n    /************************************************/\r\n  }\r\n\r\n  resetStateVariables() {\r\n    this.setState({ authToken: \"\" });\r\n    this.setState({ access_token: \"\" });\r\n    this.setState({ refresh_token: \"\" });\r\n    this.setState({ email: \"\" });\r\n    this.setState({ hasAccessTokenExpired: false });\r\n  }\r\n\r\n  componentDidMount({ location } = this.props) {\r\n    this.setElementRef();\r\n    if (location.state) {\r\n      /******************************\r\n       * Pass product info from click button\r\n       * *******************************/\r\n      const { name, value } = location.state;\r\n      var image = this.state.image;\r\n      image.imageName = \"Choose File\";\r\n      this.setState({\r\n        placeholderName: name,\r\n        placeholderValue: `$ ${value}`,\r\n        image: image,\r\n      });\r\n    }\r\n  }\r\n\r\n  changeHandler(event: ChangeEvent<HTMLInputElement>) {\r\n    // First disable default behavior\r\n    event.preventDefault();\r\n    const { name, value } = event.target;\r\n\r\n    if (name && typeof value === \"string\") {\r\n      this.setState({\r\n        // set name computed property to the name of the element clicked,\r\n        // and set the corresponding state property to the element's value\r\n        [name]: value,\r\n      });\r\n      if (event.target.style.borderColor === \"red\") {\r\n        removeInputErrors(event.target);\r\n      }\r\n    }\r\n  } // changeHandler\r\n\r\n  async insertClickHandler(event: FormEvent<HTMLFormElement>) {\r\n    event.preventDefault();\r\n    console.log(\"PRODUCTINSERTCONTAINER: insertCLICKHANDLER CLICKED\");\r\n    try {\r\n      let name = this.state.productName;\r\n      let value = this.state.productValue;\r\n      let image = this.state.image.input;\r\n\r\n      /************************************************************************\r\n       * Reset state variables representing view input after submit\r\n       * **********************************************************************/\r\n      // this.setState({ productName: '' });\r\n      // this.setState({ productValue: '' });\r\n      // this.setState({ placeholderName: '' });\r\n      // this.setState({ placeholderValue: '' });\r\n\r\n      /************************************\r\n       * STEP1 of 8: Get Data out of local Storage\r\n       ************************************/\r\n      let { access_token, refresh_token, expiration, email } =\r\n        await auth.getLocalStorage();\r\n      /*************************************/\r\n\r\n      /******************************************\r\n       * STEP2 of 8: SET STATE VARIABLES With data returned from localStorage\r\n       *******************************/\r\n      await this.setStateVariables(\r\n        access_token,\r\n        refresh_token,\r\n        expiration,\r\n        email,\r\n        this.state.message\r\n      );\r\n\r\n      console.log(\"hasAccessTokenExpired\", this.state.hasAccessTokenExpired);\r\n      /******************************************\r\n       * STEP3 of 8: Determine if Token Refresh is needed\r\n       *******************************/\r\n      if (this.state.hasAccessTokenExpired) {\r\n        console.log(\r\n          \"ProductInsertContainer refresh-token: \",\r\n          this.state.refresh_token\r\n        );\r\n\r\n        /**********************************\r\n         * STEP4 of 8: RefreshTokens: If\r\n         * tokens have expired\r\n         * *********************************/\r\n        try {\r\n          /***************************\r\n           * STEP5 of 8: Call\r\n           * credendentialStore to get\r\n           * new AccessTokens from the\r\n           * API, AND SET LOCAL STORAGE\r\n           * WITH RESULTS, if\r\n           * refreshTokens valid\r\n           ****************************/\r\n          let newUserCredentials = await credentialStore.setLocalCredWNewTokens(\r\n            this.state.refresh_token,\r\n            this.refreshURL,\r\n            this.state.authToken,\r\n            this.state.email,\r\n            this.state.hasAccessTokenExpired\r\n          );\r\n          /**************************/\r\n          console.log(\"newUserCredentials STATUS\", newUserCredentials);\r\n          if (newUserCredentials) {\r\n            console.log(\r\n              \"NEW ACCESS TOKENS HAVE BEEN RECEIVED newUserCredentials:\",\r\n              newUserCredentials\r\n            );\r\n\r\n            /*************************\r\n             * STEP6 of 8: Evaluate\r\n             * localStorage\r\n             * credentials and set\r\n             * state variables with\r\n             * results\r\n             ************************/\r\n            // Get state credentials\r\n            const evaluatedCredentials =\r\n              credentialStore.getEvaluatedCredentials(\r\n                await auth.getLocalStorage()\r\n              );\r\n\r\n            // Set state credentials\r\n            this.setState(evaluatedCredentials);\r\n\r\n            console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\r\n            /*********************/\r\n          }\r\n          // AccessToken and RefreshToken expired\r\n          else {\r\n            console.log(\"I NEVER MADE IT TO IF\");\r\n            // this.props.setRole(\"visitor\", true);\r\n            // auth.resetLocalStorage();\r\n          }\r\n        } catch (err: unknown) {\r\n          // Clear all localStorage, due to invalid Refresh token\r\n          console.log(\"ERRORED OUT IN Insert CATCH\", err);\r\n          if (\r\n            (err as AxiosError).response &&\r\n            (err as AxiosError).response?.status === 401\r\n          ) {\r\n            console.log(\"401 status received in ProductInsert\");\r\n            /**********************\r\n             * Reset Local Storage\r\n             * Variables\r\n             ***********************/\r\n            await auth.resetLocalStorage();\r\n\r\n            /******************\r\n             * SET STATE VARIABLES\r\n             * FROM Local Storage\r\n             ********************/\r\n            await this.resetStateVariables();\r\n            console.log(\"err\", (err as AxiosError).response);\r\n            console.log(\r\n              \"error status code\",\r\n              (err as AxiosError).response?.status\r\n            );\r\n            this.setState({ isUserAuthorized: false });\r\n            console.log(\"isUserAuthorised = \", this.state.isUserAuthorized);\r\n            this.setState({\r\n              message: (err as AxiosError).response?.data.message,\r\n            });\r\n          } // if\r\n        } // catch\r\n      }\r\n      console.log(\"AUTHORIZED?:\", this.state.isUserAuthorized);\r\n      if (this.state.isUserAuthorized) {\r\n        // 5/17/2020:\r\n        console.log(\r\n          \"ProductInsertContainer:refresh_token = \",\r\n          this.state.refresh_token\r\n        );\r\n\r\n        /**************************************\r\n         * Step 7 of 8: ConvertImage to base64:\r\n         * *************************************/\r\n        // 12/22/2019: CONVERT IMAGE TO BASEURL\r\n        /**************************************/\r\n        await this.submitImageHandler(event, this.state.image);\r\n        // console.log(\"base64 still here:\", this.state.image.base64Str);\r\n        console.log(\"In stage\");\r\n\r\n        // Check if a product name, value, and image has been selected, before input submission:\r\n        if (!name || !value || !image) {\r\n          displayInputErrors(\r\n            \"insertFormGroupProductName\",\r\n            \"insertFormGroupProductValue\",\r\n            \"image-input\"\r\n          );\r\n        } else {\r\n          /***********************************************\r\n           * Step8 of 8: PERFORM A DB ACTION IF TOKENS R VALID\r\n           **********************************************/\r\n          const dbActionResults = await stageDBAction(\r\n            this.state.productId,\r\n            this.state.email,\r\n            name,\r\n            value,\r\n            this.state.image,\r\n            this.baseURL,\r\n            this.state.refresh_token,\r\n            this.state.authToken,\r\n            this.state.hasAccessTokenExpired,\r\n            insertProduct\r\n          );\r\n          console.log(\"Out stage\");\r\n          console.log(\"ProductInsertContainer:\", dbActionResults);\r\n          /***************************************************\r\n           * Set State with the results of calling the DB Action\r\n           ***************************************************/\r\n          this.setState(dbActionResults);\r\n        }\r\n      } // if\r\n    } catch (err: unknown) {\r\n      // try\r\n      if (err instanceof Error) {\r\n        console.log(err);\r\n        const displayMessage =\r\n          err.message === \"Request failed with status code 401\"\r\n            ? \"Please Login\"\r\n            : \"\";\r\n        this.setState({\r\n          message: displayMessage,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Handles changing input text when an image is clicked\r\n  productImageClickHandler(event: FormEvent) {\r\n    // event.preventDefault();\r\n    event.persist();\r\n    let element = document.getElementById(\r\n      this.state.image.submitBtnId\r\n    ) as HTMLInputElement;\r\n\r\n    // 12/12\r\n    let imageSelectorLabel = document.querySelector(\"#img-select-label\");\r\n    let labelElement;\r\n    let labelValue;\r\n    let imgInputInfo;\r\n    console.log(\"QUERY SELECTOR\", imageSelectorLabel?.innerHTML);\r\n\r\n    console.log(\"Image Selector Element\", element);\r\n    if (element.labels && element.files) {\r\n      console.log(\"ELEMENT:\", element?.files);\r\n      labelElement = element?.labels[0];\r\n      labelValue = labelElement?.textContent;\r\n      imgInputInfo = element?.files[0];\r\n    }\r\n\r\n    let image;\r\n\r\n    // Upload Image has NO target, so set the labelValue to choose file\r\n    if (!event.target) {\r\n      // copy and update image\r\n      image = this.state.image;\r\n      // update imageName for no event\r\n      image.imageName = \"No File Chosen\";\r\n      console.log(\"ELSE: IMAGENAME:\", image.imageName);\r\n      this.setState({\r\n        image: image,\r\n      });\r\n      labelValue = this.state.image.imageName;\r\n      console.log(\"LabelElement:\", labelElement);\r\n      console.log(\"LabelValue:\", labelValue);\r\n      // console.log(\"ProductImageClickHandler: FILENAME:\", fileName);\r\n    }\r\n    // If File selected, Set File and FileName\r\n    if (imgInputInfo && element.files) {\r\n      console.log(\"IMG Select EVENT INFO\", event.target);\r\n      const fileName = element?.files[0].name.toString();\r\n\r\n      let labelValue = labelElement?.textContent;\r\n      console.log(\"PRODUCTIMAGECLICKHANDLER:\", element?.baseURI);\r\n      console.log(\"LabelValue:\", labelValue);\r\n      console.log(\"FILENAME:\", fileName);\r\n\r\n      // copy and update image\r\n      image = this.state.image;\r\n      image.imageName = fileName;\r\n      console.log(\"IF: IMAGENAME:\", image.imageName);\r\n\r\n      // 12/07/2019\r\n      image.file = imgInputInfo;\r\n      console.log(\"ProductImageClickHandler file:\", this.state.image.file);\r\n      this.setState({\r\n        image: image,\r\n      });\r\n      console.log(\"ProductImageClickHandler Image Path:\", imgInputInfo);\r\n      console.log(\"ProductImageName:\", this.state.image.imageName);\r\n      labelValue = this.state.image.imageName;\r\n      console.log(\"labelElement:\", labelElement);\r\n      console.log(\"labelValue:\", labelValue);\r\n    }\r\n    // If no file chosen go here\r\n    else {\r\n      image = this.state.image;\r\n      image.imageName = \"No File Chosen\";\r\n      console.log(\"ELSE: IMAGENAME:\", image.imageName);\r\n      this.setImageProp(image, image);\r\n      labelValue = this.state.imageName;\r\n    }\r\n  }\r\n\r\n  message = () => {\r\n    console.log(\"Message method called\");\r\n  };\r\n  render() {\r\n    const role = this.props.role;\r\n    let loggedOut = this.props.loggedOut;\r\n    console.log(\"User loggedOut:\", loggedOut, \" role:\", role);\r\n    if (this.state.image) {\r\n      return (\r\n        <>\r\n          {!loggedOut ? (\r\n            <Can\r\n              role={role}\r\n              perform=\"products:update\"\r\n              yes={() => (\r\n                <>\r\n                  <ProductInsertForm\r\n                    changeHandler={this.changeHandler}\r\n                    insertClickHandler={this.insertClickHandler}\r\n                    productImageName={this.state.image.imageName}\r\n                    productName={this.state.productName}\r\n                    productValue={this.state.productValue}\r\n                    productImage={this.state.productImage}\r\n                    placeholderName={this.state.placeholderName}\r\n                    placeholderValue={this.state.placeholderValue}\r\n                    message={this.state.message}\r\n                    image={this.state.image}\r\n                    submitImageHandler={this.submitImageHandler}\r\n                    selectImage={this.selectImage}\r\n                    setImageProp={this.setImageProp}\r\n                  />\r\n                </>\r\n              )}\r\n              no={() => <></>}\r\n            />\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </>\r\n      );\r\n    }\r\n  }\r\n} // class\r\n\r\nexport default ProductInsertContainer;\r\n","import \"./style.css\";\r\nimport { Link } from 'react-router-dom';\r\nimport Can from \"components/can\";\r\n\r\nfunction transitionImg(props: TransitionImgPropType) {\r\n  console.log(\"IMG Props:\", props);\r\n  const { name } = props.to.state;\r\n  let loggedOut = props.loggedOut;\r\n  let role = props.userRole;\r\n  const imgWithLink = (<Link\r\n    to={props.to}\r\n    className=\"view overlay zoom rounded\">\r\n    <img\r\n      className=\"card-img-top image-rules img-fluid\"\r\n      src={props.productImage}\r\n      alt={`product ${props.id}`} \r\n    />\r\n  </Link>);\r\n\r\n  const imgWithoutLink = (<a className=\"view overlay zoom rounded\" href=\"#!\"><img\r\n    className=\"card-img-top image-rules img-fluid\"\r\n    src={props.productImage}\r\n    alt={`product ${props.id}`}\r\n  /></a>);\r\n  return (\r\n    <>\r\n      <div className=\"card-wrapper inline-block\">\r\n        <div className=\"card card-rotating\">\r\n          <Can\r\n            role={role}\r\n            perform=\"products:view\"\r\n            yes={\r\n              () => (\r\n                <>\r\n                  {!loggedOut ? imgWithLink : imgWithoutLink}\r\n                </>\r\n              )}\r\n            no={() =>\r\n              <>\r\n                {imgWithoutLink}\r\n              </>}\r\n          />\r\n          <a href=\"#!\">\r\n            <div className=\"mask rgba-white-slight\"></div>\r\n          </a>\r\n          {/* Card Content */}\r\n          <div className=\"card-body card-body-cascade text-center\">\r\n\r\n            {/* Title */}\r\n            <h4 className=\"card-title\"><strong>{name}</strong></h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default transitionImg;","import ProductViewImg from './transition-img';\r\n\r\nlet ProductImageViewBtn = (props: ProdImgViewItemProps) => {\r\n  return (\r\n    <ProductViewImg\r\n      to={\r\n        {\r\n          pathname: `${props.viewPath}${props.id}`,\r\n          state: {\r\n            name: props.name,\r\n            value: props.value,\r\n            id: props.id,\r\n            userRole: props.userRole\r\n          }\r\n        }\r\n      }\r\n      productImage={props.productImage}\r\n      id={props.id}\r\n      userRole={props.userRole}\r\n      loggedOut={props.loggedOut}\r\n      />\r\n  );\r\n};\r\n\r\nexport default ProductImageViewBtn;","import ProductImageViewBtn from \"components/buttons/product-image-view-btn\";\r\n\r\nlet ProductListItem = (props) => {\r\n  let name = props.name;\r\n  let value = props.value;\r\n  let id = props.id;\r\n  let regex = /['\"']+/g;\r\n  let productImage = props.productImage.replace(regex, \"\");\r\n  let userRole = props.role;\r\n  console.log(\"PRODUCTLISTITEM-USERRole:\", userRole);\r\n\r\n  const viewPath = \"/products/product/\";\r\n  let loggedOut = props.loggedOut;\r\n  console.log(\"User loggedOut:\", loggedOut, \" role:\", userRole);\r\n  return (\r\n    <>\r\n      <ProductImageViewBtn\r\n        productImage={productImage}\r\n        id={id}\r\n        userRole={userRole}\r\n        loggedOut={loggedOut}\r\n        value={value}\r\n        name={name}\r\n        viewPath={viewPath}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductListItem;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport './styles.css';\r\n\r\nlet UploadSpinner = () => {\r\n    /* jshint ignore:start */\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"fas fa-spin center\">\r\n                <FontAwesomeIcon \r\n                icon={faSpinner} size='5x' \r\n                color='#3B5998' \r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n    /* jshint ignore:end */\r\n};\r\n\r\nexport default UploadSpinner;\r\n","import React, { Component } from \"react\";\r\nimport { urlBtnUpdates } from \"utils/url-btn-updates\";\r\n// Import Components\r\nimport ProductsListItem from \"../components/products/list/index\";\r\nimport UploadSpinner from '../components/upload-spinner';\r\n// Import Server-Side Utilities:\r\nimport { api as API } from '../utils/API';\r\n//import utils\r\nimport * as auth from '../utils/authentication-store';\r\n\r\nclass ProductsListContainer extends Component<ProductsPropType>{\r\n\r\n    baseURL = '/api/products';\r\n    state: ProductListStateType;\r\n    constructor(props: ProductsPropType) {\r\n        super(props);\r\n\r\n        /******************************************\r\n                 STEP2a: SET Base URLs\r\n        ******************************************/\r\n        this.state = {\r\n            productsListData: [],\r\n            access_token: '',\r\n            authToken: '',\r\n            refresh_token: '',\r\n            expiration: '',\r\n            email: '',\r\n            hasAccessTokenExpired: false,\r\n            isUserAuthorized: true,\r\n            loading: false,\r\n            message: '',\r\n            role: this.props.role,\r\n            loggedOut: this.props.loggedOut,\r\n        };\r\n    } // constructor\r\n\r\n    resetStateVariables() {\r\n        this.setState({ authToken: '' });\r\n        this.setState({ access_token: '' });\r\n        this.setState({ refresh_token: '' });\r\n        this.setState({ email: '' });\r\n        this.setState({ hasAccessTokenExpired: false });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Execute getProducts\r\n        this.returnProducts(this.baseURL);\r\n        this.setState({ refreshed: false });\r\n        urlBtnUpdates();\r\n    } //componentdidmount\r\n\r\n\r\n    /**\r\n     * Returns products, or set status to loading\r\n     * @param baseURL \r\n     */\r\n    async returnProducts(baseURL: string) {\r\n        /**********************************/\r\n        // 05/24/2020 Start Loading Spinner\r\n        /**********************************/\r\n        this.setState({ loading: true });\r\n        /**********************************/\r\n        try {\r\n            let res = await API.getProducts(baseURL);\r\n            console.log(\"**RES: 1rst\", res);\r\n            if (res) {\r\n                this.productsListData = res.data.products;\r\n                this.setState({ loading: false });\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    get productsListData(): ProductDataType[] {\r\n        return this.state.productsListData;\r\n    }\r\n    /******************************\r\n     * 1/8/19: setUser HERE\r\n     ******************************/\r\n    set productsListData(data) {\r\n        auth.getLocalStorage().then((curCredentials: any) => { this.setState(curCredentials) });\r\n        console.log(\"----Data\", data);\r\n\r\n        this.setState({ productsListData: data });\r\n\r\n    } // setProductList\r\n\r\n    \r\n    /**\r\n     * Loop though each productItem \r\n     * list and save each to the  \r\n     * productList array\r\n     * @returns  productList\r\n     */\r\n    get products() {\r\n        return this.productsListData?.map((productData: ProductDataType) => {\r\n            console.log(\"ProductListContainer: Product:\", productData);\r\n            return (\r\n                <ProductsListItem\r\n                    role={this.state.role}\r\n                    key={productData._id}\r\n                    id={productData._id}\r\n                    name={productData.name}\r\n                    value={productData.value}\r\n                    productImage={productData.productImage}\r\n                    loggedOut={this.props.loggedOut}\r\n                />\r\n            )\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Renders products list container\r\n     * @returns  \r\n     */\r\n    render() {\r\n        /* In order to stop the component from\r\n            rendering before the user's role has been loaded\r\n            a loading state property was added.  When the loading state changes, the page will be rerendered with the correct usr role. */\r\n        if (this.state.loading === true) {\r\n            console.log('loading...');\r\n            return <UploadSpinner />\r\n        } \r\n            var userRole = this.state.role;\r\n            console.log(\"ProductListContainer: userRole =\", userRole, \"LoggedOut:\", this.state.loggedOut);\r\n            console.log(\"****Setting productListData in ProductsListContainer: Render-285:\");\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"container-fluid text-center\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <br></br>\r\n                                {this.productsListData ? this.products : ''}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n    }\r\n} // class\r\n\r\nexport default ProductsListContainer;","import { MDBContainer, MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\nimport Text from \"components/inputs/text\";\n\nlet ProductUpdateForm = (props: UpdateFormPropType) => {\n    const response = props.message;\n    const message = (response === 'Request failed with status code 401') ? 'Please login' : response;\n    return (\n        <main role=\"main\" className=\"form-align flex-shrink-0\">\n            <MDBContainer>\n                <MDBRow>\n                    <MDBCol size=\"12\" middle={true}>\n                        <form>\n                            <h1 className=\"mt-5\">Product Update Form</h1>\n                            <br />\n                            {/* name */}\n                            <div className=\"form-group\">\n                                {/* name */}\n                                <Text\n                                    htmlFor={\"formGroupEmail\"}\n                                    className={\"form-control product-name\"}\n                                    id={\"formGroupName\"}\n                                    testId={\"update-name\"}\n                                    placeholder={props.placeholderName}\n                                    label={\"Name\"}\n                                    name={\"productName\"}\n                                    value={props.productName}\n                                    changeHandler={props.changeHandler}\n                                />\n                                {/* price */}\n                                <Text\n                                    htmlFor={\"formGroupName\"}\n                                    className={\"form-control\"}\n                                    id={\"formGroupValue\"}\n                                    testId={\"update-value\"}\n                                    placeholder={props.placeholderValue}\n                                    name={\"productValue\"}\n                                    label={\"Price\"}\n                                    value={props.productValue}\n                                    changeHandler={props.changeHandler}\n                                />\n                                {/* button */}\n                                <br />\n                                <MDBRow>\n                                    <MDBCol>\n                                        <label htmlFor=\"formGroupName\" />\n                                        <MDBBtn\n                                            className={\"mx-0\"} color=\"blue-grey\"\n                                            onClick={props.updateClickHandler}\n                                        >\n                                            Submit\n                                        </MDBBtn>\n                                        <h3 className={\"mt-5\"}>{message}</h3>\n                                    </MDBCol>\n                                </MDBRow>\n                            </div>\n                        </form>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        </main >\n    )\n};\n\nexport default ProductUpdateForm;","import { ChangeEvent, Component } from \"react\";\nimport Can from \"components/can\";\n\n// Import module to get/set variables from/in the LocalStorage\nimport * as auth from '../utils/authentication-store';\n\n// Import Components\nimport UpdateForm from \"../forms/product/update\";\nimport { credentials as credentialStore } from '../utils/credential-store';\nimport { updateProduct, performDBAction } from '../utils/product-store';\nimport { Moment } from \"moment\";\nimport { urlBtnUpdates } from \"utils/url-btn-updates\";\nimport { getProductDetails } from '../utils/product-store';\n\nclass ProductUpdateContainer extends Component<ProductUpdatePropType> {\n    refreshURL: string;\n    baseURL: string;\n    state: ProductUpdateStateType;\n    constructor(props: ProductUpdatePropType) {\n        super(props);\n        let pushedProps = props.location.state;\n        const name = pushedProps?.name;\n        const value = pushedProps?.value;\n        this.refreshURL = '/user/login/refresh';\n        this.baseURL = '/api/products/product/update/';\n        this.state = {\n            productItemComponent: null,\n            productId: '',\n            productName: '',\n            productValue: '',\n            placeholderName: '',\n            placeholderValue: '',\n            authToken: '',\n            refresh_token: '',\n            email: '',\n            hasAccessTokenExpired: false,\n            isUserAuthorized: true,\n            message: '',\n        };\n        this.setState({ productName: name });\n        this.setState({ productValue: value });\n\n        this.changeHandler = this.changeHandler.bind(this);\n        this.updateClickHandler = this.updateClickHandler.bind(this);\n    } // constructor\n\n    /**\n     * Sets product item component\n     */\n    set productItemComponent(productItem: JSX.Element) {\n        this.setState({ productItemComponent: productItem });\n        // console.log('productItemComponent', this.state.productItem);\n    }\n\n    /**\n     * Gets product item component\n     */\n    get productItemComponent() {\n        return this.state.productItemComponent as JSX.Element;\n    }\n\n    async setStateVariables(access_token: string, refresh_token: string, expiration: Moment | null, email: string, message: string) {\n        /************************************************\n         * SET State VARIABLES FROM LocalStorage\n         ************************************************/\n        let authToken = \"Bearer \" + access_token;\n\n        console.log(\"Auth token\", authToken);\n        this.setState({ authToken });\n\n        console.log(\"Refresh token\", refresh_token);\n        this.setState({ refresh_token });\n\n        this.setState({ email });\n\n        let hasAccessTokenExpired = await auth.hasAccessTokenExpired();\n\n        console.log(\"Expired?\", hasAccessTokenExpired);\n        this.setState({ hasAccessTokenExpired });\n\n        this.setState({ isUserAuthorized: true });\n\n        this.setState({ message });\n        /************************************************/\n    }\n\n    resetStateVariables() {\n        this.setState({ authToken: '' });\n        this.setState({ access_token: '' });\n        this.setState({ refresh_token: '' });\n        this.setState({ email: '' });\n        this.setState({ hasAccessTokenExpired: false });\n    }\n\n    /**\n     * Parse url and perform data fetch\n     * Set state variables for React\n     * Managed component\n     */\n    async componentDidMount() {\n        // Update navbar for address bar changes\n        urlBtnUpdates();\n\n        let url = window.location.pathname;\n        let urlArray = url.split('/');\n        urlArray.splice(3, 1);\n        //replace space with app\n        urlArray.splice(0, 1, '/api');\n        // Get Product PlaceHolder text\n        // API Syntax: /api/products/product/:id\n        // urlArray.splice(2, 1);\n        const baseUrl = urlArray.join('/');\n        // console.log(\"UPDATEBASEURL:\", baseUrl);\n\n        //4/5/2021\n        /*****************************************\n        * STEP2: Evaluate localStorage credentials * and set STATE VARIABLES with evaluated \n        * credentials\n        *****************************************/\n        // Retrieve StateCredentials\n        const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\n\n        // Set state credentials\n        this.setState(evaluatedCredentials);\n\n        console.log(\"AUTHTOKEN Set to LocalStorage:\", this.state.authToken);\n        /*************************************/\n\n        console.log(\"hasAccessTokenExpired\", this.state.hasAccessTokenExpired);\n        /***************************************\n         * STEP3: If accessToken expired, use \n         * refreshToken to generate a new \n         * accessToken. If refreshToken expired, \n         * clear all tokens from localStorage\n         **************************************/\n        if (this.state.hasAccessTokenExpired) {\n            try {\n                /*********************************\n                 * Step4: Call credendentialStore \n                 * to get new AccessTokens from \n                 * the API, AND SET LOCAL STORAGE \n                 * WITH RESULTS, if refreshTokens \n                 * valid. Else set revoke credentials.\n                 *********************************/\n                let newUserCredentials = await credentialStore.setLocalCredWNewTokens(this.state.refresh_token, this.refreshURL, this.state.authToken, this.state.email, this.state.hasAccessTokenExpired);\n                /*********************************/\n\n                if (newUserCredentials) {\n                    console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED newUserCredentials:\", newUserCredentials);\n                    /*********************************************\n                     * STEP5: Evaluate localStorage credentials and set state variables with results \n                     ********************************************/   // Get state credentials\n                    const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\n\n                    // Set state credentials\n                    this.setState(evaluatedCredentials);\n\n                    console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\n                }\n                // AccessToken and RefreshToken expired\n                else {\n                    this.props.setRole(\"visitor\", true);\n                    auth.resetLocalStorage();\n                }\n            }\n            catch (err) {\n                // Clear all localStorage, due to invalid Refresh token\n                console.log(\"err: \", err);\n                if (err.response.status === 401) {\n                    console.log('401 status received in ProductInsert');\n                    /**********************\n                     * Reset Local Storage \n                     * Variables\n                     ***********************/\n                    await auth.resetLocalStorage();\n                }\n            }\n        } // if\n        /*************************************************/\n        console.log(\"ProductUpdateContainer AUTHORIZED?:\", this.state.isUserAuthorized);\n        if (this.state.isUserAuthorized) {\n            // make product request like deleteProduct request\n            this.productItemComponent = await getProductDetails(baseUrl, this.state.authToken, this.state.refresh_token);\n            // object destructuring\n            const { name, value, id } = this.productItemComponent.props;\n            /*******************************************************\n             Get data response from http request, after parsing URL\n            *******************************************************/\n            if (id && name && value) {\n\n                /*******************************************\n                 * Pass item info from click button\n                 ******************************************/\n                this.setState({\n                    productId: id,\n                    placeholderName: name,\n                    placeholderValue: `$${value}`,\n                });\n            }\n            /***********************************************************/\n        }\n        /******************************/\n        //4/5/2021\n    }\n\n    changeHandler(event: ChangeEvent) {\n        // First disable default behavior\n        event.preventDefault();\n\n        const {\n            name,\n            value\n        }: EventTargetType = event.target as HTMLInputElement;\n\n        if (name && typeof value === 'string') {\n            // changed from [name]: value\n            this.setState(\n                {\n                    // set name computed property to the name of the element clicked, \n                    // and set the corresponding state property to the element's value\n                    [name]: value,\n                }\n                // as unknown as Pick<UpdateStateType, keyof UpdateStateType>\n            );  // setState\n        }\n    } // changeHandler\n\n    /************************************\n    * stageDBActionis an integrator that passes an id and a callback function corresponding to the desired db action to be performed, and retrieves the new data and updates the state variables, to be displayed to screen. \n    ************************************/\n    async stageDBAction(\n        id: string,\n        email: string,\n        name: string,\n        value: string,\n        url: string,\n        image = null,\n        cb: Function) {\n        console.log(\"Start performDBAction\");\n        //EXECUTE CALLBACK FUNCTION AND RETURN RESULSTS\n        console.log(\"hasExpired0:\", this.state.hasAccessTokenExpired);\n        let dBActionResult: DbActionResultType | undefined = await performDBAction(\n            id,\n            email,\n            this.state.refresh_token,\n            this.state.authToken,\n            this.state.hasAccessTokenExpired,\n            name,\n            value,\n            null,\n            url,\n            cb);\n\n        console.log(\"hasExpired1:\", this.state.hasAccessTokenExpired);\n        /************************************\n         * Set placeholder text if data was updated\n         ****************************************/\n        if (dBActionResult?.message === \"Action Completed\") {\n            if (name) {\n                this.setState({ placeholderName: name });\n            }\n            if (value) {\n                this.setState({ placeholderValue: value });\n            }\n        }\n        console.log(\"Passed performDBAction\");\n\n        const {\n            message,\n            refresh_token,\n            isUserAuthorized,\n            hasAccessTokenExpired\n        }: DbActionResultType = dBActionResult!;\n\n        console.log(\"hasAccessTokenExpired2:\", hasAccessTokenExpired);\n\n        /***************************************************\n         * Set State with the results of calling the DB Action\n         *****************************************************/\n        this.setState({\n            message: message,\n            refresh_token,\n            isUserAuthorized,\n            hasAccessTokenExpired,\n        });\n    }\n\n    async updateClickHandler(event: ChangeEvent) {\n        try {\n            event.preventDefault();\n            let name = this.state.productName;\n            let value = this.state.productValue;\n            // let email = this.state.email;\n\n            /************************************************************************\n             * Reset state variables representing view input after submit\n             ************************************************************************/\n            // this.setState({ productName: '' });\n            // this.setState({ productValue: '' });\n            // this.setState({ placeholderName: '' });\n            // this.setState({ placeholderValue: '' });\n\n            /************************************\n             * STEP1: Get Data out of local Storage\n             ************************************/\n            let { access_token, refresh_token, expiration, email, message } = await auth.getLocalStorage();\n\n            /*************************************/\n\n            /******************************************\n             * STEP2: SET STATE VARIABLES With data returned from localStorage\n             *******************************/\n            await this.setStateVariables(access_token, refresh_token, expiration, email, message);\n\n\n            console.log(\"HasAccessTokenExpired\", this.state.hasAccessTokenExpired);\n            /******************************************\n             * STEP3: Determine if Token Refresh is needed\n             *******************************/\n            if (this.state.hasAccessTokenExpired) {\n                console.log(\"ProductUpdateContainer refresh-token: \", this.state.refresh_token);\n\n                /***************************************\n                 * STEP3: Use RefreshTokens To Obtain new credentials, if Access Token has expired\n                 * **************************************/\n                try {\n                    /*********************************\n                     * STEP4: Call credendentialStore to Refresh All credentials and set local storage with results, if Refresh Token is valid. Else set revoke credentials.\"\n                     *********************************/\n                    let newUserCredentials = await credentialStore.setLocalCredWNewTokens(this.state.refresh_token, this.refreshURL, this.state.authToken, this.state.email, this.state.hasAccessTokenExpired);\n                    /**************************/\n                    if (newUserCredentials) {\n                        console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED From Refresh; newUserCredentials:\", newUserCredentials);\n\n                        /*********************************************\n                         * STEP5: Evaluate localStorage credentials and set state variables with results \n                         ********************************************/\n                        // Get state credentials\n                        const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\n\n                        // Set state credentials\n                        this.setState(evaluatedCredentials);\n\n                        console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\n                        /********************************************/\n                    }\n                    // AccessToken and RefreshToken expired\n                    else {\n                        this.props.setRole(\"visitor\", true);\n                        auth.resetLocalStorage();\n                    }\n                }\n                catch (err) {\n                    // Clear all localStorage, due to invalid Refresh token\n                    console.log(\"ERRORED OUT IN UPDATE CATCH\");\n                    if (err.response.status === 401) {\n                        console.log('401 Unauthorized user');\n                        /***********************************************\n                         * Reset Local Storage Variables\n                         ************************************************/\n                        await auth.resetLocalStorage();\n\n                        /*********************************************\n                         * SET STATE VARIABLES FROM Local Storage\n                         *********************************************/\n                        await this.resetStateVariables();\n                        console.log('err', err.response);\n                        console.log('error status code', err.response.status);\n                        this.setState({ isUserAuthorized: false });\n                        console.log(\"isUserAuthorised = \", this.state.isUserAuthorized);\n                        // this.setState({ message: err.response.data.message });\n                        this.setState({ message: \"401 Unauthorized user\" });\n\n                    } // if\n                } // catch\n            }\n            console.log(\"AUTHORIZED?:\", this.state.isUserAuthorized);\n            if (this.state.isUserAuthorized) {\n                // Refresh_Token should be temporarily set to 'norefresh' in productionAction, as tokens should NOT be refreshed\n                // this.setState({ refresh_token: 'norefresh' });\n\n                console.log('ProductUpdateContainer:refresh_token = ', this.state.refresh_token);\n\n                /***********************************************\n                 * Step6: PERFORM A DB ACTION IF TOKENS R VALID \n                 **********************************************/\n                //id, name, value, url, file = null, imageSrc = null, cb\n\n                await this.stageDBAction(\n                    this.state.productId,\n                    email,\n                    name,\n                    value,\n                    this.baseURL,\n                    null,\n                    updateProduct);\n            } // if\n        } // try\n        catch (err) {\n            console.log(\"User is logged out\");\n            this.setState({ message: \"User is logged out\" });\n        }\n    }\n\n    render() {\n        const role = this.props.role;\n        // const updatePath = \"update/\";\n        let loggedOut = this.props.loggedOut;\n        console.log(\"User loggedOut:\", loggedOut, \" role:\", role);\n        return (\n            <>\n                {!loggedOut ? <Can\n                    role={role}\n                    perform=\"products:update\"\n                    yes={\n                        () => (<>\n                            <UpdateForm\n                                changeHandler={this.changeHandler}\n                                updateClickHandler={this.updateClickHandler}\n                                productName={this.state.productName}\n                                productValue={this.state.productValue}\n                                placeholderName={this.state.placeholderName}\n                                placeholderValue={this.state.placeholderValue}\n                                message={this.state.message}\n                            />\n                        </>\n                        )\n                    }\n                    no={() => <></>}\n                /> : ''}\n            </>\n        )\n    }\n} // class\n\nexport default ProductUpdateContainer;","import \"./style.css\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction transitionBtn(props: TransitionBtnPropType) {\r\n  return (\r\n    <Link \r\n      to= {props.to}>\r\n      <button \r\n        type=\"button\" \r\n        className=\"btn custom-btn\" \r\n        tabIndex={0}>\r\n         {props.buttonName}\r\n      </button>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default transitionBtn;","// import './styles.css';\r\nimport ProductUpdateBtn from './transition-btn';\r\n\r\nlet UpdateBtn = (props: ProdUpdateItemProps) => {\r\n    return (\r\n        <ProductUpdateBtn \r\n          to={\r\n            {\r\n              pathname: `${props.path}${props.id}`          \r\n            }\r\n          }\r\n          buttonName={props.btnName}/>\r\n        );\r\n};\r\n\r\nexport default UpdateBtn;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// The ...props means, spread all of the passed props onto this element\r\n// That way we don't have to define them all individually\r\nfunction ActionBtn(props: ActionBtnPropType) {\r\n  const key = props.id;\r\n  const id = props.id;\r\n  const btnClickHandler = props.btnClickHandler;\r\n  return (\r\n    <button \r\n      type=\"button\" \r\n      className=\"btn custom-btn\" \r\n      tabIndex={0}\r\n      onClick={(event) => {btnClickHandler(event)}} \r\n      id={id} \r\n      key={key}\r\n    >\r\n      {props.buttonName}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ActionBtn;","import React from 'react';\r\n// import './styles.css';\r\nimport ActionBtn from './action-btn';\r\n\r\nlet DeleteBtn = (props: ProdDeleteItemProps) => {\r\n    return (\r\n        <ActionBtn \r\n          buttonName={props.btnName}\r\n          id={props.id}\r\n          btnClickHandler={props.btnClickHandler}\r\n          />\r\n        );\r\n};\r\n\r\nexport default DeleteBtn;","import React, { useState, useEffect } from \"react\";\r\nimport { AxiosError } from 'axios';\r\nimport { urlBtnUpdates } from \"utils/url-btn-updates\";\r\nimport Can from \"components/can\";\r\n\r\n// import \"../style.css\";\r\nimport UpdateBtn from \"components/buttons/update-btn\";\r\nimport DeleteBtn from \"components/buttons/delete-btn\";\r\nimport * as auth from '../../utils/authentication-store';\r\n\r\nimport { deleteProduct, getProductDetails, stageDBAction } from '../../utils/product-store';\r\nimport { credentials as credentialStore } from \"../../utils/credential-store\";\r\n\r\nconst ProductViewContainer = (props: ProductViewPropType) => {\r\n    const deleteURL = '/api/products/product/delete/';\r\n    const refreshURL = '/user/login/refresh';\r\n    const updatePath = \"update/\";\r\n    \r\n    const initState: ProductViewStateType = {\r\n        productItemComponent: null,\r\n        baseUrl: '',\r\n        access_token: '',\r\n        authToken: '',\r\n        refresh_token: '',\r\n        expiration: '',\r\n        email: '',\r\n        hasAccessTokenExpired: false,\r\n        isUserAuthorized: true,\r\n        loading: false,\r\n        message: '',\r\n    };\r\n\r\n    //Set State to initial value\r\n    const [state, setState] = useState(initState);\r\n\r\n    // Retrieve products\r\n    useEffect(() => {\r\n        /*************************************\r\n         * Step1: Update navbar highlighting \r\n         * for address bar changes on first \r\n         * render or re-render.  Normaly placed \r\n         * in componentDidMount\r\n         * ************************************/\r\n        urlBtnUpdates();\r\n\r\n        /*****************************************\r\n        * Step2: Parse URL to Create Query API URI\r\n        *****************************************/\r\n        let url = window.location.pathname;\r\n        console.log(`URL: ${url}`);\r\n        let urlArray = url.split('/');\r\n        console.log(\"@@@URLARRAY:\", urlArray);\r\n        //replace space with app\r\n        urlArray.splice(0, 1, '/api');\r\n        // construct api URL Syntax: /api/products/product/:id\r\n        // urlArray.splice(2, 1);\r\n        const baseUrl = urlArray.join('/');\r\n        console.log(\"baseUrl:\", baseUrl);\r\n\r\n        /******************************************\r\n           * STEP3: Evaluate localStorage credentials \r\n           * and set STATE VARIABLES with evaluated \r\n           * credentials, before sending api request\r\n           *****************************************/\r\n        const fetchCredentials = async () => {\r\n            // Retrieve StateCredentials\r\n            const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n            console.log(\"FetchCredentials:\", evaluatedCredentials);\r\n            // Set state credentials\r\n            setState((prevState) => ({\r\n                ...prevState,\r\n                ...evaluatedCredentials\r\n            }));\r\n            console.log(`FetchCredentials: STATE: ${JSON.stringify(state)}`);\r\n\r\n            console.log(\"ProductViewContainer-AUTHTOKEN Set to LocalStorage:\", state.authToken);\r\n            /*************************************/\r\n        };\r\n\r\n        //call fetchCredentials\r\n        fetchCredentials();\r\n\r\n        /**********************************************\r\n         * STEP4: If accessToken expired, use \r\n         * refreshToken to generate a new accessToken. \r\n         * If refreshToken expired, clear all tokens \r\n         * from localStorage\r\n         *********************************************/\r\n        const fetchAccessTokens = async () => {\r\n            // Retrieve StateCredentialsif (state.hasAccessTokenExpired) {\r\n            if (state.hasAccessTokenExpired) {\r\n                    try {\r\n                        /***********************************\r\n                         * STEP5: Call credendentialStore to Refresh All credentials and set local storage with results, if Refresh Token is valid. Else set revoke credentials.\r\n                         ***********************************/\r\n                        let userCredentials = await credentialStore.setLocalCredWNewTokens(state.refresh_token, refreshURL, state.authToken, state.email, state.hasAccessTokenExpired);\r\n\r\n                        console.log(`FetchAccessTokens: userCredentials: ${JSON.stringify(userCredentials)}`);\r\n                        /***********************************/\r\n                        console.log(`FetchAccessTokens: userCredentialsTEST`);\r\n\r\n                        if (userCredentials) {\r\n                            console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED userCredentials:\", userCredentials);\r\n                            /**********************************\r\n                             * STEP6: Evaluate localStorage \r\n                             * credentials and set state \r\n                             * variables with results \r\n                             *********************************/   // Get state credentials\r\n                            const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n                            console.log(\"FetchAccessTokens: EVALUATEDCREDENTIALS:\", evaluatedCredentials)\r\n                            // Set state credentials\r\n                            setState((prevState) => ({\r\n                                ...prevState,\r\n                                ...evaluatedCredentials\r\n                            }));\r\n\r\n                            console.log(`New AUTHTOKEN0 after Refresh: ${JSON.stringify(state)}`);\r\n                        }\r\n                        // AccessToken and RefreshToken expired\r\n                        else {\r\n                            props.setRole(\"visitor\", true);\r\n                            auth.resetLocalStorage();\r\n                        }\r\n                    }\r\n                    catch (err) {\r\n                        // Clear all localStorage, due to invalid Refresh token\r\n                        console.log(\"err: \", err);\r\n                        if ((err as AxiosError).response?.status === 401) {\r\n                            console.log('401 status received in ProductInsert');\r\n                            /**********************\r\n                             * Reset Local Storage \r\n                             * Variables\r\n                             ***********************/\r\n                            await auth.resetLocalStorage();\r\n                        }\r\n                    }\r\n                }//if   \r\n        } // fetch accessTokens\r\n\r\n            // Call fetchAccessTokens\r\n            fetchAccessTokens();\r\n            /*********************************************/\r\n            /*******************************\r\n             * STEP 6: PERFORM A DB ACTION IF \r\n             * TOKENS R VALID\r\n             ********************************/\r\n            //Fetch Products:\r\n            const fetchProducts = async () => {\r\n                if (state.isUserAuthorized) {\r\n                    console.log(\"EMAIL IN STAGEDBACTION:\", state.email);\r\n                    // make product request and set productItemComponent\r\n                    let productItemComponent = await getProductDetails(baseUrl, state.authToken, state.refresh_token);\r\n                    console.log(\"FetchProducts: ITEMS:\", JSON.stringify(productItemComponent));\r\n                    // setProductItemComponent(items);\r\n                    setState((prevState) => ({\r\n                        ...prevState,\r\n                        productItemComponent\r\n                    }));\r\n                }//if\r\n                else {\r\n                    console.log(`USER NOTE AUTHORIZED: ${state.isUserAuthorized}`);\r\n                }\r\n                /*****************************************/\r\n                console.log(\"ViewContainer Props2:\", props.role);\r\n\r\n                // check if user Credentials Active:\r\n                props.areCredentialsValid();\r\n                console.log(\"USER ACTIVE:\", props.credentialsActive);\r\n            }\r\n            // Call FetchProducts\r\n            fetchProducts();\r\n            // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        }, [state.authToken, state.email, state.hasAccessTokenExpired, state.access_token, state.refresh_token, state.productItemComponent?.props.image]);\r\n\r\n        const deleteClickHandler = async (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            try {\r\n                event.preventDefault();\r\n                /************************************\r\n                 * STEP1: GET Product ID to be deleted\r\n                 ************************************/\r\n                let productId = (event.target as HTMLButtonElement).id;\r\n\r\n                /******************************************\r\n                 * STEP2: Evaluate localStorage credentials and set STATE VARIABLES with evaluated credentials\r\n                 *******************************/\r\n                // Retrieve StateCredentials\r\n                const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n                // Set state credentials\r\n                setState((prevState) => ({\r\n                    ...prevState,\r\n                    ...evaluatedCredentials\r\n                }));\r\n\r\n                console.log(\"AUTHTOKEN Set to LocalStorage:\", state.authToken);\r\n                /*************************************/\r\n\r\n                console.log(\"hasAccessTokenExpired\", state.hasAccessTokenExpired);\r\n                /*************************************\r\n                 * STEP3: If accessToken expired, use \r\n                 * refreshToken to generate a new \r\n                 * accessToken. If refreshToken \r\n                 * expired, clear all tokens from \r\n                 * localStorage\r\n                 ************************************/\r\n                if (state.hasAccessTokenExpired) {\r\n                    try {\r\n                        /*****************************\r\n                         * Step4: Call \r\n                         * credendentialStore to get \r\n                         * new AccessTokens from the \r\n                         * API, AND SET LOCAL STORAGE \r\n                         * WITH RESULTS, if \r\n                         * refreshTokens valid\r\n                         **************************/\r\n                        let newUserCredentials = await credentialStore.setLocalCredWNewTokens(state.refresh_token, refreshURL, state.authToken, state.email, state.hasAccessTokenExpired);\r\n                        /***********************************/\r\n\r\n                        if (newUserCredentials) {\r\n                            console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED From Refresh;  newUserCredentials:\", newUserCredentials);\r\n                            /***********************\r\n                             * STEP5: Evaluate \r\n                             * localStorage \r\n                             * credentials and set \r\n                             * state variables with \r\n                             * results \r\n                             ***********************/\r\n                            // Get state credentials\r\n                            const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n                            // Set state credentials\r\n                            setState((prevState) => ({\r\n                                ...prevState,\r\n                                ...evaluatedCredentials\r\n                            }));\r\n\r\n                            console.log(\"New AUTHTOKEN after Refresh:\", state.authToken);\r\n                        }\r\n                        // AccessToken and RefreshToken expired\r\n                        else {\r\n                            props.setRole(\"visitor\", true);\r\n                            auth.resetLocalStorage();\r\n                        }\r\n                    }\r\n                    catch (err: unknown) {\r\n                        // Clear all localStorage, due to invalid Refresh token\r\n                        console.log(\"err: \", err);\r\n                        if ((err as AxiosError).response?.status === 401) {\r\n                            console.log('401 status received in ProductInsert');\r\n                            /**********************\r\n                             * Reset Local Storage \r\n                             * Variables\r\n                             ***********************/\r\n                            await auth.resetLocalStorage();\r\n                        }\r\n                    }\r\n                } // if\r\n                /*************************************************/\r\n                console.log(\"AUTHORIZED?:\", state.isUserAuthorized);\r\n                if (state.isUserAuthorized) {\r\n                    /*******************************\r\n                     *STEP 6: PERFORM A DB ACTION IF TOKENS R VALID\r\n                    ********************************/\r\n                    console.log(\"EMAIL IN STAGEDBACTION:\", state.email);\r\n\r\n                    // Stage DB Action, by passing it the \r\n                    // action to be performed as last argument\r\n                    // and setting state with the results\r\n                    let dbActionResults = await stageDBAction(\r\n                        productId,\r\n                        state.email,\r\n                        null,\r\n                        null,\r\n                        null,\r\n                        deleteURL,\r\n                        state.refresh_token,\r\n                        state.authToken,\r\n                        state.hasAccessTokenExpired,\r\n                        deleteProduct);\r\n\r\n                    // Set state variables\r\n                    setState((prevState) => ({\r\n                        ...prevState,\r\n                        ...dbActionResults\r\n                    }));\r\n                }\r\n            }\r\n            catch (err) {\r\n                console.log(\"ERROR:\", err);\r\n                console.log(\"User is logged out\");\r\n                setState((prevState: any) => ({\r\n                    ...prevState,\r\n                    message: \"User is logged out\"\r\n                }));\r\n\r\n            }\r\n\r\n            // reroute to products page \r\n            props.history.push('/products');\r\n        }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {!props.loggedOut ? <Can\r\n                role={props.role}\r\n                perform=\"products:view\"\r\n                yes={\r\n                    () => (\r\n                        <>{state.productItemComponent}</>\r\n                    )}\r\n                no={() => <></>}\r\n            /> : ''}\r\n            <div className=\"text-center\">\r\n                {!props.loggedOut ? <Can\r\n                    role={props.role}\r\n                    perform=\"products:update\"\r\n                    yes={\r\n                        () => (\r\n                            <>\r\n                                <UpdateBtn\r\n                                    id={state.productItemComponent?.props?.id}\r\n                                    name={\"Update\"}\r\n                                    value={state.productItemComponent?.props?.value}\r\n                                    path={updatePath}\r\n                                    btnName={\"Update\"}\r\n                                />\r\n                            </>\r\n                        )}\r\n                    no={() => <></>}\r\n                /> : ''}\r\n                {!props.loggedOut ? <Can\r\n                    role={props.role}\r\n                    perform=\"products:delete\"\r\n                    yes={() => (\r\n                        <>\r\n                            <DeleteBtn\r\n                                btnName={\"Delete\"}\r\n                                btnClickHandler={(event) => deleteClickHandler(event)}\r\n                                id={state.productItemComponent?.props?.id}\r\n                            />\r\n                        </>\r\n                    )}\r\n                    no={() => <></>}\r\n                /> : ''}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default ProductViewContainer;","import { MDBBtn, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport Text from \"components/inputs/text\";\r\n\r\nlet RegistrationForm = (props) => {\r\n  return (\r\n    <main role=\"main\" className=\"form-align flex-shrink-0\">\r\n      <MDBContainer>\r\n        <MDBRow>\r\n          <MDBCol size=\"12\" middle={true}>\r\n            <form>\r\n              <h1 className=\"mt-5\">Registration Form</h1>\r\n              <br />\r\n              {/* email */}\r\n              <div className=\"form-group\">\r\n                {/* email */}\r\n                <Text\r\n                  htmlFor={\"regFormGroupEmail\"}\r\n                  className={\"form-control\"}\r\n                  id={\"regFormGroupEmail\"}\r\n                  // placeholder={\"email\"}\r\n                  name={\"email\"}\r\n                  label={\"Email\"}\r\n                  value={props.email}\r\n                  changeHandler={props.changeHandler}\r\n                />\r\n                {/* password */}\r\n                <Text\r\n                  htmlFor={\"regFormGroupPassword\"}\r\n                  className={\"form-control\"}\r\n                  id={\"regFormGroupPassword\"}\r\n                  // placeholder={\"password\"}\r\n                  name={\"password\"}\r\n                  label={\"Password\"}\r\n                  value={props.password}\r\n                  changeHandler={props.changeHandler}\r\n                />\r\n                <br />\r\n                <MDBRow>\r\n                  <MDBCol>\r\n                    <label htmlFor=\"formGroupPassword\" />\r\n                      <MDBBtn\r\n                        className={\"mx-0\"}\r\n                        color=\"blue-grey\"\r\n                        onClick={props.clickHandler}\r\n                      >\r\n                        Submit\r\n                      </MDBBtn>\r\n                    <h3 className=\"mt-5\">\r\n                      {props.message ? props.message : \"\"}\r\n                    </h3>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n              </div>\r\n            </form>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React, { Component } from \"react\";\r\nimport { ChangeEvent } from \"react\";\r\n\r\nimport {correctInput, displayInputErrors, removeInputErrors} from \"utils/input-validation\";\r\n\r\nimport { urlBtnUpdates } from \"utils/url-btn-updates\";\r\n\r\n// import { MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBMask, MDBView } from \"mdbreact\";\r\n\r\n// Import Server-Side Utilities:\r\nimport { api as API } from '../utils/API';\r\n\r\n// Import Components\r\nimport RegistrationForm from \"../forms/registration\";\r\n\r\nclass RegistrationContainer extends Component<RegContainerPropType> {\r\n    state: RegContainerStateType;\r\n\r\n    constructor(props: RegContainerPropType) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            message: '',\r\n            existingUserError: \"Request failed with status code 409\",\r\n            existingUserMsg: \"User exists\"\r\n        };\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n    } // constructor\r\n\r\n    async componentDidMount() {\r\n        // Update navbar for address bar changes\r\n        urlBtnUpdates();\r\n    }\r\n\r\n    /**\r\n     * Changes handler - Sets state on all input values, when textfield changes\r\n     * @param event \r\n     */\r\n    changeHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        // First disable default behavior\r\n        event.preventDefault();\r\n\r\n        const target = event.target;\r\n        const targetId = target.id;\r\n\r\n        // Set a listener on the textField to correct invalid ids\r\n        if (targetId === \"regFormGroupEmail\") {\r\n            correctInput(\"regFormGroupEmail\");\r\n        }\r\n        if (target.style.borderColor === \"red\" && target.value){\r\n            removeInputErrors(target);\r\n        }\r\n        const {\r\n            name,\r\n            value\r\n        } = event.target;\r\n\r\n        if (name && typeof value === 'string') {\r\n            this.setState(\r\n                {\r\n                    // set name computed property to the name of the element clicked, \r\n                    // and set the corresponding state property to the element's value\r\n                    [name]: value,\r\n                }\r\n            );  // setState\r\n        }\r\n\r\n    } // changeHandler\r\n\r\n    clickHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        event.preventDefault();\r\n\r\n        console.log(`User Name: ${this.state.email}, Password: ${this.state.password}`);\r\n\r\n        // Correct email format prior to submission\r\n        if (!this.state.email || !this.state.password) {\r\n            displayInputErrors(\"regFormGroupEmail\", \"regFormGroupPassword\");\r\n        } else {\r\n            // Package Data to be sent in the Post Request Body\r\n        let regData = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n\r\n            // Define Call to Server Side utils to post body to the backend server and set states, using register method:\r\n            let register = (regData: RegDataType) => {\r\n                console.log('IN REGISTER CALL');\r\n                API.register(regData)\r\n                    .then(regResponse => {\r\n                        console.log(\"regResponse:\", regResponse);\r\n                        this.setState({ message: regResponse.data.message });\r\n                        //redirect to login after new registration created\r\n                        this.props.redirectLogin();\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(\"ERROR:\", err, \"Message:\", err.message);\r\n                        if (err.message === this.state.existingUserError) {\r\n                            this.setState({ message: this.state.existingUserMsg });\r\n                        }\r\n                        else {\r\n                            this.setState({ message: err.message });\r\n                        }\r\n                    });\r\n            };\r\n\r\n            // Execute register\r\n            register(regData);\r\n\r\n            // Reset state variables after submit\r\n            this.setState({\r\n                email: '',\r\n                password: ''\r\n            });\r\n        } //else\r\n    } // clickHandler\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <RegistrationForm\r\n                    changeHandler={this.changeHandler}\r\n                    clickHandler={this.clickHandler}\r\n                    email={this.state.email}\r\n                    password={this.state.password}\r\n                    message={this.state.message}\r\n                />\r\n            </React.Fragment >\r\n        )\r\n    }\r\n} // class\r\n\r\nexport default RegistrationContainer;","import React, { Component } from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Footer from \"./components/footer\";\r\n// Import Components\r\nimport Navbar from \"./components/navbar/index\";\r\nimport history from \"./history\";\r\n// Import Pages\r\nimport HomeContainer from \"./pages/HomeContainer\";\r\nimport LoginContainer from \"./pages/LoginContainer\";\r\nimport ProductInsertContainer from \"./pages/ProductInsertContainer\";\r\nimport ProductsListContainer from \"./pages/ProductsListContainer\";\r\nimport ProductUpdateContainer from \"./pages/ProductUpdateContainer\";\r\nimport ProductViewContainer from \"./pages/ProductViewContainer\";\r\nimport RegistrationContainer from \"./pages/RegistrationContainer\";\r\nimport * as auth from \"./utils/authentication-store\";\r\nimport UploadSpinner from \"./components/upload-spinner\";\r\nimport * as authenticationStore from \"./utils/authentication-store\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      currentPage: \"\",\r\n      name: \"\",\r\n      role: \"\",\r\n      loading: false,\r\n      redirect: false,\r\n      loggedOut: false,\r\n      credentialsValid: false,\r\n      refresh_token: \"\",\r\n      authToken: \"\",\r\n    };\r\n\r\n    this.handlePageClick = this.handlePageClick.bind(this);\r\n    this.redirectHome = this.redirectHome.bind(this);\r\n    this.redirectLogin = this.redirectLogin.bind(this);\r\n    this.getRole = this.getRole.bind(this);\r\n    this.setRole = this.setRole.bind(this);\r\n    this.areCredentialsValid = this.areCredentialsValid.bind(this);\r\n  } //constructor\r\n\r\n  componentDidMount() {\r\n    this.getRole();\r\n    this.areCredentialsValid();\r\n  }\r\n\r\n  setRole(role, loggedOut) {\r\n    this.setState({\r\n      role: role,\r\n      loggedOut: loggedOut,\r\n    });\r\n  }\r\n\r\n  async areCredentialsValid() {\r\n    const hasAccessTokenExpired = await authenticationStore.hasAccessTokenExpired();\r\n    const credentialsValid = !hasAccessTokenExpired;\r\n    this.setState({ credentialsValid: credentialsValid });\r\n    return credentialsValid;\r\n  }\r\n\r\n  // Taken from productionListContainer\r\n  async getRole() {\r\n    const localStateObj = await auth.getLocalStorage();\r\n    console.log(\"APPJS. LOCALSTATEOBJ:\", localStateObj);\r\n\r\n    let authToken = \"Bearer \" + localStateObj.access_token;\r\n    console.log(`APP.js authToken: ${authToken}`);\r\n    let refresh_token = localStateObj.refresh_token;\r\n    console.log(`APP.js refresh_Token: ${refresh_token}`);\r\n\r\n    // this.setState(localStateObj);\r\n    console.log(\"EMAIL:\", localStateObj.email);\r\n    const email = localStateObj.email;\r\n    console.log(\"Navbar Mount3 Email:\", email);\r\n\r\n    /* Set user role on state, by using call back\r\n    function instead of async await */\r\n    this.setState({ \r\n      refresh_token,\r\n      authToken,\r\n      loading: true,\r\n    });\r\n\r\n    const role = await auth\r\n      .setUserRole(email, this.state.authToken, this.state.refresh_token)\r\n      .then((data) => {\r\n        console.log(\"setUserRole:\", data.role);\r\n        this.setState({ role: data.role });\r\n        this.setState({ loading: false });\r\n        console.log(\"AFTER WILLMOUNT LOAD user:\", this.state.role);\r\n        /**************************/\r\n        console.log(\"APPJS ROLE B4 Set:\", this.state.role);\r\n        this.setState({ role: data.role });\r\n        console.log(\"APPJS STATE ROLE After Set:\", this.state.role);\r\n        return data.role;\r\n      });\r\n    console.log(\"APP.JS ROLE:\", role);\r\n    this.setState({\r\n      role: role,\r\n      loggedOut: false,\r\n    });\r\n    return role;\r\n    /***************************/\r\n  }\r\n\r\n  redirectHome() {\r\n    //IMPORTANT: Redirect to the selected organization's page.\r\n    console.log(\"Called REDIRECT HOME redirect b4\", this.state.redirect);\r\n    this.setState({\r\n      redirect: true,\r\n      role: \"visitor\",\r\n      loggedOut: true,\r\n    });\r\n    console.log(\"Called REDIRECT HOME redirect after\", this.state.redirect);\r\n    history.push({\r\n      pathname: \"/\",\r\n    });\r\n  }\r\n  redirectLogin() {\r\n    history.push({\r\n      pathname: \"/user/login\",\r\n    });\r\n  }\r\n\r\n  async handlePageClick(event) {\r\n    // IMPORTANT: No preventDefault Here:  It will not allow page to transition to insert form, with a dropdownitem\r\n    // event.preventDefault();\r\n    // event.persist();\r\n\r\n    // Sets the name and currentlyActivePage\r\n    this.setState({\r\n      currentPage: event.target.name,\r\n      name: event.target.name,\r\n    });\r\n\r\n    //01/04/2020:\r\n    if (event.target.name === \"Logout\") {\r\n      this.redirectHome();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"APPJS JUST UPDATED!\");\r\n  }\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      // console.log('loading...');\r\n      return <UploadSpinner />;\r\n    }\r\n    return (\r\n      <Router history={history}>\r\n        {/* <Router> */}\r\n        {/* Refresh={toggle} */}\r\n        <Navbar\r\n          handlePageClick={this.handlePageClick}\r\n          navItems={this.state.navItems}\r\n          currentPage={this.state.currentPage}\r\n          name={this.state.name}\r\n          role={this.state.role}\r\n          redirectHome={this.redirectHome}\r\n          setRole={this.setRole}\r\n          loggedOut={this.state.loggedOut}\r\n          redirect={this.state.redirect}\r\n        />\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={(props) => <HomeContainer {...props} />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/user/registration\"\r\n            // component={RegistrationContainer}\r\n            render={(props) => <RegistrationContainer \r\n              {...props}\r\n              redirectLogin={this.redirectLogin} />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/user/login\"\r\n            render={(props) => (\r\n              <LoginContainer\r\n                {...props}\r\n                getRole={this.getRole}\r\n                role={this.state.role}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/products/product/update/:product_id\"\r\n            render={(props) => (\r\n              <ProductUpdateContainer\r\n                {...props}\r\n                role={this.state.role}\r\n                loggedOut={this.state.loggedOut}\r\n                setRole={this.setRole}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/product/insert\"\r\n            render={(props) => (\r\n              <ProductInsertContainer\r\n                {...props}\r\n                role={this.state.role}\r\n                loggedOut={this.state.loggedOut}\r\n                setRole={this.setRole}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/products/product/:product_id\"\r\n            render={(props) => (\r\n              <ProductViewContainer\r\n                {...props}\r\n                role={this.state.role}\r\n                loggedOut={this.state.loggedOut}\r\n                areCredentialsValid={this.areCredentialsValid}\r\n                credentialsActive={this.state.credentialsActive}\r\n                setRole={this.setRole}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/products/\"\r\n            render={(props) => (\r\n              <ProductsListContainer\r\n                {...props}\r\n                role={this.state.role}\r\n                loggedOut={this.state.loggedOut}\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n        <Footer />\r\n      </Router>\r\n    );\r\n  } // render\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// MDBBOOTSTRAP\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}