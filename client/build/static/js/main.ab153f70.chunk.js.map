{"version":3,"sources":["components/footer/index.tsx","utils/API.js","utils/authenticationStore.tsx","utils/rbac-rule.tsx","components/can.tsx","utils/urlParser.tsx","components/navbar/buttons/user-btn.tsx","components/navbar/buttons/admin-btn.tsx","components/navbar/buttons/login-btn.tsx","components/navbar/index.tsx","components/navbar/btn-data/index.tsx","history.js","components/home/index.tsx","utils/urlBtnUpdates.tsx","pages/HomeContainer.tsx","components/inputs/text.tsx","forms/login/index.tsx","pages/LoginContainer.tsx","components/image-selector/index.tsx","components/image-uploader/index.tsx","forms/product/insert/index.tsx","utils/tokenStore.tsx","utils/credentialStore.tsx","components/products/list/item/index.tsx","utils/productStore.tsx","pages/ProductInsertContainer/utils/helpers.tsx","pages/ProductInsertContainer/index.tsx","components/buttons/transition-img/index.tsx","components/buttons/product-image-view-btn.tsx","components/products/list/index.js","components/upload-spinner/index.js","pages/ProductsListContainer.tsx","forms/product/update/index.tsx","pages/ProductUpdateContainer.tsx","components/buttons/transition-btn/index.tsx","components/buttons/update-btn.tsx","components/buttons/action-btn/index.tsx","components/buttons/delete-btn.tsx","pages/ProductViewContainer.tsx","forms/registration/index.js","pages/RegistrationContainer.tsx","App.js","serviceWorker.js","index.js"],"names":["Footer","color","className","fluid","Date","getFullYear","href","register","data","a","console","log","axios","method","url","post","login","getProducts","baseURL","get","headers","Accept","getProduct","authToken","refreshToken","Authorization","refreshtoken","getUserInfo","email","response","JSON","stringify","refreshTokens","accessToken","expired","deleteProduct","delete","remove","updateProduct","name","value","image","propName","patch","insertCloudinary","imageObj","formData","FormData","append","config","insertProduct","id","cloudImageUrl","cloudPublicId","cloudImagePublicId","insert","authenticationStore_value","localStorage","getItem","hasAccessTokenExpired","returnValue","currentTime","moment","utc","local","format","userCredentials","parse","sessionExpirationTime","expiration","isAfter","timeDiff","diff","setLocalStorage","access_token","refresh_token","message","setItem","getLocalStorage","curCredentials","curCredObj","curCredResponse","resetLocalStorage","clear","setUserRole","API","then","userRecord","userRole","role","catch","err","userRoleObj","rules","visitor","static","user","admin","writer","dynamic","userId","postOwnerId","Can","props","action","permissions","staticPermissions","includes","dynamicPermissions","permissionCondition","check","perform","yes","no","defaultProps","urlParser","urlArray","window","location","pathname","split","length","UserBtn","curBtnSelected","activeIndex","buttonIndex","activeName","authorization","onClick","captureEvent","activeClassName","active","to","route","label","AdminBtn","LoginBtn","NavbarPage","state","loggedOut","toggleCollapse","setState","isOpen","navItems","userItems","key","adminItem","loginItem","redirect","refreshPage","myNav","currentPage","homeLink","handleChangeActive","bind","event","button","this","handlePageClick","curBtnName","target","hmOrProdBtnSelected","setRole","auth","redirectHome","expand","navbar","left","map","btn","btnIdx","e","nav","caret","right","fab","icon","Component","createBrowserHistory","Home","data-jarallax","data-wow-delay","urlBtnUpdates","btnElement","pageName","document","querySelector","setAttribute","HomeContainer","collapse","Fragment","Text","htmlFor","size","type","placeholder","onChange","changeHandler","LoginForm","middle","password","clickHandler","token","LoginContainer","isUserAuthorized","preventDefault","Object","keys","res","authenticationStore","getRole","history","push","ImageSelector","imageType","imageClassName","submitBtnId","ref","imageSelectRef","aria-describedby","imageName","accept","fileTypes","selectImage","previewCanvasRef","ImageUploader","uploaderBorder","React","createRef","aria","ProductInsertForm","onSubmit","insertClickHandler","placeholderName","productName","placeholderValue","productValue","maxMB","imageMin","imageMax","submitImageHandler","productImage","setImageProp","refresh","newCredentialResponse","setLocalCredWNewTokens","refreshURL","tokenStore","status","getEvaluatedCredentials","refreshed","ProductItem","nameText","valueText","src","alt","getProductDetails","baseUrl","allProducts","productDetails","productItemComponent","_id","retrieveUpdatedProductList","products","productId","deleteProductResponse","updateResponse","cloudinaryResponse","insertResponse","performDBAction","cb","uniqueProductError","uniqueProductMsg","callBackResponse","productsList","stageDBAction","dBActionResults","namePlaceHolder","valuePlaceHolder","dbObj","setImageParagraphTag","para","imageSize","imageWidth","imageHeight","previewCanvas","createTextNode","listItem","createElement","appendChild","orderedList","style","removeItem","element","item","getElementsByTagName","isItemCreated","removeChild","removeCanvas","setFileMessage","tag","errorTag","getElementById","innerHTML","getFormattedFileSize","files","returnFileSize","number","toFixed","appendImage","img","canvas","onload","width","height","getContext","drawImage","prepend","setFileSize","areDimensionsValid","acceptedMsg","unacceptedMsg","disabled","isFileSelected","input","imgOnError","invalidMsg","displayImage","canvasElement","loadImage","blob","Promise","resolve","reject","URL","createObjectURL","imageProps","imageSrc","onerror","convertImageFromUrlToBase64String","Image","crossOrigin","context","dataUrl","toDataURL","isFileTypeValid","file","i","ProductInsertContainer","cloudinaryURL","base64Str","fileMsgElement","previewCanvasElement","submitImageElement","productImageClickHandler","persist","current","inputElement","imgHelper","loadedImgResult","toString","isInputValid","unit","slice","toLowerCase","fileSizeNumber","replace","imageUrl","base64StringImage","cloudinaryResult","public_id","setElementRef","setStateVariables","credentialStore","newCredentials","resetStateVariables","dbActionResults","labelElement","labelValue","imgInputInfo","imageSelectorLabel","labels","textContent","fileName","baseURI","productImageName","transitionImg","imgWithLink","imgWithoutLink","ProductImageViewBtn","viewPath","ProductListItem","UploadSpinner","faSpinner","ProductsListContainer","_productsListData","productListData","loading","returnProducts","productsListData","product","ProductUpdateForm","updateClickHandler","ProductUpdateContainer","_productItemComponent","pushedProps","productItem","splice","join","evaluatedCredentials","dBActionResult","newUserCredentials","transitionBtn","tabIndex","buttonName","UpdateBtn","path","btnName","ActionBtn","btnClickHandler","DeleteBtn","ProductViewContainer","deleteURL","areCredentialsValid","credentialsActive","deleteClickHandler","RegistrationForm","RegistrationContainer","existingUserError","existingUserMsg","regData","regResponse","App","credentialsValid","localStateObj","exact","render","component","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab153f70.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\nimport { MDBContainer, MDBFooter } from \"mdbreact\";\r\n\r\nlet Footer = () => {\r\n    return (\r\n        <MDBFooter color=\"blue\" className=\"font-small pt-4 fixed-bottom\">\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid>\r\n          &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.MDBootstrap.com\"> MDBootstrap.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n    );\r\n};\r\n\r\nexport default Footer;","import axios from \"axios\";\r\n/****************************************************\r\n * API.js SHOULD NEVER CATCH ERROR, THAT SHOULD BE\r\n * HANDLED BY THE CONTAINER ON THE FRONTEND.  The\r\n * API IS JUST FORWARDING THE HTTP REQUEST To Backend\r\n *****************************************************/\r\n// Create Export Hash\r\nexport default {\r\n  register: async (data) => {\r\n    /*************************************************************\r\n     *  package and send the body to the endpoint\r\n     ************************************************************/\r\n    console.log(\"Sending data to:\", \"/api/user/register\");\r\n    const post = await axios({\r\n      method: \"post\",\r\n      url: \"/api/user/register\",\r\n      data: data,\r\n    }); // post\r\n    /*************************************************************\r\n     * Send the results back to the calling program\r\n     ************************************************************/\r\n    return post;\r\n  },\r\n  login: async (data) => {\r\n    console.log(\"in login- Data:\", data);\r\n    /*************************************************************\r\n     *  package and send the body to the endpoint\r\n     ************************************************************/\r\n    let post = await axios({\r\n      method: \"post\",\r\n      url: \"/api/user/login\",\r\n      data: data,\r\n    });\r\n    /*************************************************************\r\n     * Send the results back to the calling program\r\n     ************************************************************/\r\n    return post;\r\n  },\r\n  // products list GET\r\n  getProducts: async (baseURL) => {\r\n    if (baseURL) {\r\n      console.log(\"In API.getProducts\", baseURL);\r\n      let get = await axios.get(baseURL, {\r\n        headers: {\r\n          Accept: \"application/json,application/xml;q=0.9,*/*;q=0.8\",\r\n        },\r\n      });\r\n      // let get = await axios.get(baseURL);\r\n      return get;\r\n    }\r\n  },\r\n  // individual product, make it resemble deleteProduct below\r\n  getProduct: async (baseURL, authToken, refreshToken) => {\r\n    if (baseURL) {\r\n      try {\r\n        // const data = {\r\n        //   expired: expired,\r\n        //   email: email,\r\n        // };\r\n\r\n        console.log(\"in API.getProduct\", baseURL);\r\n        const get = await axios.get(baseURL, {\r\n          headers: {\r\n            Authorization: authToken,\r\n            \"Content-Type\": \"application/json\",\r\n            refreshtoken: refreshToken,\r\n          }\r\n        });\r\n        /********************************************\r\n         * Send the results back to calling program\r\n         ********************************************/\r\n         console.log(\"GET=\", get);\r\n         return get;\r\n      } catch (err) {\r\n        console.log(\"User Unauthorized Error:\", err);\r\n        return err;\r\n      }\r\n    }\r\n  },\r\n  // 01/03/2020:\r\n  getUserInfo: async (baseURL, email) => {\r\n    if (email && baseURL) {\r\n      let response = await axios.get(baseURL, email);\r\n      console.log(\"APIGETUSERINFO: \" + JSON.stringify(response));\r\n      return response;\r\n    } else {\r\n      console.log(\"API.email:\", email);\r\n      console.log(\"API.baseURL:\", baseURL);\r\n    }\r\n  },\r\n\r\n  refreshTokens: async (url, accessToken, refreshToken, email, expired) => {\r\n    console.log(\"API In RefreshToken: \", refreshToken);\r\n    if (url) {\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const post = await axios({\r\n        method: \"post\",\r\n        url,\r\n        data: {\r\n          email,\r\n          expired,\r\n        },\r\n        headers: {\r\n          Authorization: accessToken,\r\n          \"Content-Type\": \"application/json\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n      }); // post\r\n      // console.log(post.data, post.status);\r\n      /*************************************************************\r\n       * Send the results back to the calling program\r\n       ************************************************************/\r\n      return post;\r\n    }\r\n  }, // catch\r\n\r\n  // /:productId\r\n  deleteProduct: async (baseURL, authToken, refreshToken, expired, email) => {\r\n    if (baseURL) {\r\n      const data = {\r\n        expired: expired,\r\n        email: email,\r\n      };\r\n      console.log(\"DATA:\", JSON.stringify(data));\r\n      console.log(`API: GOING TO DELETE ROUTE: ${baseURL}`);\r\n      console.log(\r\n        `authtoken: ${authToken}, refreshtoken: ${refreshToken}, expired: ${expired}, email: ${email}, URL: ${baseURL}`\r\n      );\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const remove = await axios.delete(baseURL, {\r\n        headers: {\r\n          Authorization: authToken,\r\n          \"Content-Type\": \"application/json\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n        data: data,\r\n      });\r\n      /*************************************************************\r\n       * Send the results back to the calling program\r\n       ************************************************************/\r\n      // console.log(\"REMOVE=\", remove);\r\n      return remove;\r\n    }\r\n  },\r\n\r\n  // /:productId\r\n  updateProduct: async (\r\n    baseURL,\r\n    authToken,\r\n    refreshToken,\r\n    name,\r\n    value,\r\n    image,\r\n    expired,\r\n    email\r\n  ) => {\r\n    if (baseURL) {\r\n      console.log(\"in API.updateProduct, baseURL:\", baseURL);\r\n      console.log(\"authToken:\", authToken);\r\n      console.log(\"refreshToken\", refreshToken);\r\n      console.log(\r\n        \"API-updateProduct: name:\",\r\n        name,\r\n        \"value:\",\r\n        value,\r\n        \"expired:\",\r\n        expired\r\n      );\r\n\r\n      const data = [\r\n        // first set\r\n        {\r\n          propName: \"name\",\r\n          value: name,\r\n        },\r\n        // second set\r\n        {\r\n          propName: \"value\",\r\n          value: value,\r\n        },\r\n        // third set\r\n        {\r\n          propName: \"expired\",\r\n          value: expired,\r\n        },\r\n        // fourth set\r\n        {\r\n          propName: \"email\",\r\n          value: email,\r\n        },\r\n      ];\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const patch = await axios.patch(baseURL, data, {\r\n        headers: {\r\n          Authorization: authToken,\r\n          \"Content-Type\": \"application/json\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n      });\r\n      /*************************************************************\r\n       * Send the results back to the calling program\r\n       ************************************************************/\r\n      return patch;\r\n    }\r\n  },\r\n  // insertCloudinary\r\n  insertCloudinary: async (baseURL, imageObj) => {\r\n    if (imageObj) {\r\n      console.log(\"In insertCloudinary\", baseURL);\r\n      // console.log (\"#ImageObj:\", imageObj);\r\n\r\n      //create formData from BASE64 file\r\n      const formData = new FormData();\r\n      formData.append(\"file\", imageObj);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      };\r\n\r\n      // NEW POST WITH FORMDATA\r\n      const post = await axios.post(baseURL, formData, config);\r\n      return post;\r\n    }\r\n  },\r\n  // /:productId\r\n  insertProduct: async (\r\n    baseURL,\r\n    id,\r\n    email,\r\n    authToken,\r\n    refreshToken,\r\n    name,\r\n    value,\r\n    image,\r\n    expired\r\n  ) => {\r\n    var cloudImageUrl = image.cloudImageUrl;\r\n    var cloudPublicId = image.cloudImagePublicId;\r\n    if (baseURL) {\r\n      console.log(\"authToken:\", authToken);\r\n      console.log(\"refreshToken\", refreshToken);\r\n      // console.log(\"API: INSERT TOKEN:\", 'name:', name, ',value:', value,'base64', image.base64Str);\r\n\r\n      const data = [\r\n        {\r\n          propName: \"name\",\r\n          value: name,\r\n        },\r\n        {\r\n          propName: \"value\",\r\n          value: value,\r\n        },\r\n        // {\r\n        //     'propName': 'productImage',\r\n        //     'value': base64Image\r\n        // },\r\n        {\r\n          propName: \"productImage\",\r\n          value: cloudImageUrl,\r\n        },\r\n        {\r\n          propName: \"cloudId\",\r\n          value: cloudPublicId,\r\n        },\r\n        {\r\n          propName: \"productId\",\r\n          value: id,\r\n        },\r\n        {\r\n          propName: \"authToken\",\r\n          value: authToken,\r\n        },\r\n        {\r\n          propName: \"refreshToken\",\r\n          value: refreshToken,\r\n        },\r\n        {\r\n          propName: \"email\",\r\n          value: email,\r\n        },\r\n        {\r\n          propName: \"expired\",\r\n          value: expired,\r\n        },\r\n      ];\r\n      /*************************************************************\r\n       *  package and send the body to the endpoint\r\n       ************************************************************/\r\n      const insert = await axios.post(baseURL, data, {\r\n        headers: {\r\n          Authorization: authToken,\r\n          \"Content-Type\": \"application/json\",\r\n          refreshtoken: refreshToken,\r\n        },\r\n      });\r\n      /*************************************************************\r\n       * Send the results back to the calling program\r\n       ************************************************************/\r\n      return insert;\r\n    }\r\n  },\r\n};\r\n","import { api as API } from '../utils/API';\r\nimport moment, { Moment } from 'moment';\r\n// Import Server-Side Utilities:\r\n\r\n\r\n/**********************\r\n * Contains methods for storing credentials in localStorage and packaging for setting as state variables\r\n */\r\nlet set = (name: string, value: string) => {\r\n    localStorage.setItem(name, value);\r\n};\r\n\r\nlet get = (name: string) => {\r\n    let authenticationStore_value = localStorage.getItem(name);\r\n    console.log(name, ':', authenticationStore_value);\r\n    let returnValue = authenticationStore_value ? authenticationStore_value : '';\r\n    return returnValue;\r\n};\r\n\r\nlet hasAccessTokenExpired = (() => {\r\n    let data = localStorage.getItem('data');\r\n    // set hasAccessTokenExpired to true to get the refreshToken method to execute.  Request will fail with no tokens and return.  Otherwise\r\n    let returnValue = false;\r\n\r\n    if (data !== null && typeof data !== 'undefined') {\r\n        let currentTime = moment.utc(moment()).local().format(\"L LT\");\r\n        const userCredentials = JSON.parse(get('data'));\r\n        //5/17/2020\r\n        /***********************************/\r\n        // let { expiration } = data;\r\n        // let sessionExpirationTime = moment.utc(moment(expiration)).local().format(\"MM/DD/YYYY LT\");\r\n        let sessionExpirationTime = moment.utc(userCredentials.expiration).local().format(\"MM/DD/YYYY LT\");\r\n\r\n\r\n\r\n        /************************************/\r\n        console.log(\"currentTime.isAfter(sessionExpirationTime):\", moment(currentTime).isAfter(sessionExpirationTime));\r\n\r\n        console.log(\"sessionExpirationTime.isAfter(currentTime):\", moment(sessionExpirationTime).isAfter(moment(currentTime)));\r\n\r\n\r\n        console.log('currentTime:', currentTime, 'sessionExpiration:', sessionExpirationTime);\r\n\r\n        // Get TIme difference in minutes\r\n        let timeDiff = moment(sessionExpirationTime).diff(moment(currentTime), 'minutes');\r\n\r\n        console.log('TIMEDIFF:', timeDiff);\r\n\r\n        returnValue = timeDiff <= 10 ? true : false;\r\n        // return returnValue;\r\n        // return false;\r\n    } // if\r\n    return returnValue;\r\n});\r\n\r\nlet setLocalStorage = ((\r\n    access_token: string, refresh_token: string, expiration: Moment | null,\r\n    email: string,\r\n    message?: string) => {\r\n\r\n    let data = {\r\n        access_token,\r\n        refresh_token,\r\n        expiration,\r\n        email,\r\n        message\r\n    };\r\n    console.log(\"created data\", data.message);\r\n    set('data', JSON.stringify(data));\r\n    console.log(\"set LocalStorage data\", data.message);\r\n    return data;\r\n});\r\n\r\nlet getLocalStorage = (async () => {\r\n    console.log(\"In getLocalStorage\");\r\n    \r\n    let curCredResponse;\r\n\r\n    let curCredentials = await localStorage.getItem('data');\r\n    console.log(\"curCredentials:\", curCredentials);\r\n    if (curCredentials !== null && typeof curCredentials !== 'undefined') {\r\n        // get data from local storage\r\n        const curCredObj = JSON.parse(get('data'));\r\n        console.log(\"CurCredObj\", curCredObj);\r\n        curCredResponse = curCredObj;\r\n    }\r\n    else {\r\n        curCredResponse = {\r\n            access_token: '',\r\n            refresh_token: '',\r\n            expiration: '',\r\n            email: '',\r\n            message: ''\r\n        };\r\n    }\r\n    console.log(\"AuthenticationStore return curCredentials:\", curCredResponse);\r\n    return curCredResponse;\r\n});\r\n\r\nlet resetLocalStorage = () => {\r\n    console.log(\"LOCAL STORAGE CLEARED\");\r\n    localStorage.clear();\r\n};\r\n\r\nlet setUserState = async (email: string) => {\r\n    // set state variables:\r\n    // let stateVariables = await getLocalStorage();\r\n\r\n    // this.setState(stateVariables);\r\n    // let user;\r\n    let baseURL = `/api/user/information/${email}`;\r\n    console.log(\"authenticationStore.setUserState: Email=*\" + email + \"*\");\r\n\r\n    // 01/03/2020: Get User role\r\n    let userRoleObj = await API.getUserInfo(baseURL, email)\r\n        .then(userRecord => {\r\n            console.log(\"BASE URL=\", baseURL);\r\n            console.log(\"USER userRecord=\", userRecord);\r\n            // set user\r\n\r\n            let userObject = {\r\n                role: userRecord?.data.role,\r\n                // data: products\r\n            };\r\n            console.log(\"PLC2USEROBJECT:\", userObject);\r\n            return userObject\r\n\r\n        })\r\n        .catch(err => {\r\n            console.log(\"ERROR: Setting ROLE to VISITOR:\", err);\r\n            var userObject = {\r\n                role: \"visitor\",\r\n                // data: products\r\n            };\r\n            return userObject;\r\n            // this.setState({ user: userObject });\r\n        });\r\n    return userRoleObj;\r\n};\r\n\r\n// get user role from backend\r\nvar setUserRole = async (email: string) => {\r\n    // set state variables:\r\n    // let stateVariables = await getLocalStorage();\r\n\r\n    // this.setState(stateVariables);\r\n    // let user;\r\n    let baseURL = `/api/user/information/${email}`;\r\n    // console.log(\"authenticationStore.setUserRole: Email=*\" + email + \"*\");\r\n\r\n    // 01/03/2020: Get User role\r\n    let userRoleObj = await API.getUserInfo(baseURL, email)\r\n        .then(userRecord => {\r\n \r\n            // set user\r\n            const userRole = {\r\n                role: userRecord?.data.role,\r\n            };\r\n\r\n            if (!userRole.role) {\r\n                userRole.role = \"visitor\";\r\n            }\r\n            return userRole;\r\n        })\r\n        .catch(err => {\r\n            console.log(\"ERROR: Setting ROLE to VISITOR:\", err);\r\n            let userRole = {\r\n                role: \"visitor\",\r\n            };\r\n            return userRole;\r\n        });\r\n    return userRoleObj;\r\n}\r\n\r\n// import * as auth from './authenticationStore';\r\n\r\nexport { set, get, hasAccessTokenExpired, setLocalStorage, getLocalStorage, resetLocalStorage, setUserState, setUserRole };","const rules = {\r\n    visitor: {\r\n      static: [\r\n        \"products:hide\",\r\n        // \"products:view\",\r\n        \"home-page:visit\"\r\n        ]\r\n    },\r\n    user : {\r\n      static: [ \r\n        \"products:view\", \r\n        \"products:details\",\r\n          \"products:hide\",\r\n          \"home-page:visit\"\r\n      ]\r\n    },\r\n    admin: {\r\n      static: [\r\n        \"products:view\",\r\n        \"products:hide\",\r\n        \"products:update\",\r\n        \"products:insert\",\r\n        \"products:delete\",\r\n        \"products:details\",\r\n        \"users:get\",\r\n        \"users:getSelf\",\r\n        \"home-page:visit\",\r\n        \"dashboard-page:visit\"\r\n      ]\r\n    },\r\n    writer: {\r\n      static: [\r\n        \"posts:list\",\r\n        \"posts:create\",\r\n        \"users:getSelf\",\r\n        \"home-page:visit\",\r\n        \"dashboard-page:visit\"\r\n      ],  //static\r\n      // dynamic not currently used\r\n      dynamic: {\r\n        \"posts:edit\": (userId:string , postOwnerId: string) => {\r\n          if (!userId || !postOwnerId) return false;\r\n          return userId === postOwnerId;\r\n        }\r\n      } // dyanmic\r\n    }\r\n  };\r\n\r\n  export default rules;","import rules from \"../utils/rbac-rule\";\r\n\r\n\r\n/**\r\n * Check if user has access to view \r\n * the element to displayed in the yes \r\n * prop\r\n * @param rules \r\n * @param role \r\n * @param action \r\n * @param [data] \r\n * @returns  \r\n */\r\nconst check = (rules: RulesType, role: string, action: string, data?: any) => {\r\n  console.log(\"CAN ROLE:\",  \"*\"\r\n  +role+\"*\");\r\n  const permissions = rules[role];\r\n  if (!permissions) {\r\n    // role is not present in the rules\r\n    console.log(\"NO PERMISSIONS\");\r\n    return false;\r\n  }\r\n\r\n  const staticPermissions = permissions.static;\r\n\r\n  if (staticPermissions && staticPermissions.includes(action)) {\r\n    // static rule not provided for action\r\n    console.log(\"Data is static\");\r\n    return true;\r\n  }\r\n\r\n  // dynmic not currently used\r\n  const dynamicPermissions = permissions.dynamic;\r\n\r\n  if (dynamicPermissions) {\r\n    console.log(\"Data is Dynamic\");\r\n    const permissionCondition = dynamicPermissions[action];\r\n    if (!permissionCondition) {\r\n      // dynamic rule not provided for action\r\n      return false;\r\n    }\r\n    return permissionCondition(data);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst Can = (props: CanPropType) =>  \r\n  check(rules, props.role, props.perform, props.data)\r\n    ? props.yes()\r\n    : props.no();\r\n\r\nCan.defaultProps = {\r\n  yes: () => null,\r\n  no: () => null\r\n};\r\n\r\nexport default Can;","export let urlParser = () => {\r\n        let url = window.location.pathname;\r\n        let urlArray = url.split('/');\r\n        console.log(\"@@@URLARRAY:\", urlArray);\r\n        return urlArray[urlArray.length-1];\r\n        // const id = urlArray[urlArray.length - 1];\r\n        // console.log(\"ID:\", id);\r\n        //replace space with app\r\n        // urlArray.splice(0, 1, '/api');\r\n        // remove product from url\r\n        // URL Syntax: /api/products/:id\r\n        // urlArray.splice(2, 1);\r\n        // console.log(\"newURLElements:\", urlArray);\r\n        // const baseUrl = urlArray.join('/');\r\n        // console.log(\"baseUrl:\", baseUrl);\r\n};","import {\r\n  MDBNavItem, MDBDropdown,\r\n  MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBNavLink\r\n} from \"mdbreact\"; \r\nimport Can from \"../../can\";\r\nimport \"./styles.css\";\r\n\r\nfunction UserBtn(props: UserBtnPropType) {\r\n  console.log(\"USERBUTTON PROPS:\", props);\r\n  const curBtnSelected = props.activeIndex===props.buttonIndex && props.activeName===props.name;\r\n  return (<Can\r\n    role={props.userRole}\r\n    perform={props.authorization}\r\n    yes={() => (\r\n      <>\r\n        <MDBNavItem\r\n          onClick={props.captureEvent}\r\n        >\r\n          <MDBNavLink\r\n            activeClassName={curBtnSelected? \"activate\": \"de-activate\"}\r\n            active={false}\r\n            name={props.name}\r\n            to={props.route}\r\n          >\r\n            {props.label}\r\n          </MDBNavLink>\r\n        </MDBNavItem>\r\n      </>\r\n      // </span>\r\n    )}\r\n    no={() => <></>}\r\n  />)\r\n};\r\n\r\nexport default UserBtn;","import {\r\n    MDBDropdownItem, MDBNavLink\r\n    } from \"mdbreact\";\r\n\r\nlet AdminBtn = (props: AdminBtnPropType) => {\r\n  return(\r\n      <MDBNavLink\r\n        to={props.route}\r\n      >\r\n        <MDBDropdownItem\r\n          name={props.name}\r\n          onClick={props.captureEvent}\r\n        >{props.name}</MDBDropdownItem>\r\n      </MDBNavLink>\r\n  )\r\n};\r\n\r\nexport default AdminBtn;","import {\r\n  MDBDropdownItem, MDBNavLink\r\n} from \"mdbreact\"; \r\n\r\nlet LoginBtn = (props: LoginBtnPropType) => {\r\n  return (\r\n    <MDBNavLink to={props.route}>\r\n      <MDBDropdownItem\r\n        name={props.name}\r\n        onClick={props.captureEvent}\r\n      >\r\n        {props.name}\r\n      </MDBDropdownItem>\r\n    </MDBNavLink>\r\n  )\r\n};\r\n\r\nexport default LoginBtn;","import React, { ChangeEvent, Component, useRef } from \"react\";\r\nimport {\r\n  MDBNavbar,\r\n  MDBNavbarNav,\r\n  MDBNavItem,\r\n  MDBNavLink,\r\n  MDBNavbarToggler,\r\n  MDBCollapse,\r\n  MDBDropdown,\r\n  MDBDropdownToggle,\r\n  MDBDropdownMenu,\r\n  MDBIcon,\r\n} from \"mdbreact\";\r\nimport * as auth from \"../../utils/authenticationStore\";\r\nimport Can from \"../can\";\r\nimport { navbarOptions } from \"./btn-data/index\";\r\nimport \"./btn-data/style.css\";\r\nimport { urlParser } from \"../../utils/urlParser\";\r\nimport { string } from \"prop-types\";\r\nimport { RefObject } from \"react\";\r\nimport { createRef } from \"react\";\r\nimport { isTemplateExpression } from \"typescript\";\r\nimport UserBtn from './buttons/user-btn';\r\nimport AdminBtn from \"./buttons/admin-btn\";\r\nimport LoginBtn from \"./buttons/login-btn\";\r\nclass NavbarPage extends Component<NavbarPagePropType> {\r\n  state: NavbarPageStateType;\r\n  loggedOut!: boolean;\r\n\r\n  constructor(props: NavbarPagePropType) {\r\n    super(props);\r\n    const navItems: NavbarType = navbarOptions(this.props);\r\n    this.state = {\r\n      activeIndex: 0,\r\n      activeName: '',\r\n      isOpen: false,\r\n      role: this.props.role,\r\n      redirect: this.props.redirect,\r\n      loggedOut: this.props.loggedOut,\r\n      refreshPage: this.props.refreshPage,\r\n      myNav: navItems,\r\n      currentPage: '',\r\n      homeLink: '',\r\n    }; //state\r\n    console.log(\"First STate ROLE:\", this.props.role)\r\n    console.log(\"myNavAll:\", this.state.myNav);\r\n    console.log(\"myNav userItems:\", this.state.myNav.userItems);\r\n    this.handleChangeActive = this.handleChangeActive.bind(this);\r\n  } // constructor\r\n\r\n  componentDidMount() {\r\n  } //\r\n\r\n  handleChangeActive(event: ChangeEvent<HTMLInputElement>, button: UserItemsType | AdminItemType | LoginItemType, activeIndex: number) {\r\n    this.props.handlePageClick(event);\r\n    // this.setState({ activeIndex: newActiveIndex });\r\n    const curBtnName = event.target.name;\r\n    const hmOrProdBtnSelected = curBtnName === 'home' || curBtnName === 'products';\r\n    console.log(\"BUTTONEVENT:\", event.target.name);\r\n    console.log(\"ActiveIndex:\", activeIndex);\r\n    console.log(\"BUTTON:\", button);\r\n    console.log(\"BUTTONNAME\", button.name);\r\n    // const activeName = button.name;\r\n    //urlParser is launching before page settled\r\n    console.log(\"PageName:\", urlParser());\r\n\r\n    // SetState is asyc, so use a callback method\r\n    // Set the active index to the current page\r\n    if (hmOrProdBtnSelected) {\r\n      this.setState({\r\n        activeIndex,\r\n        activeName: button.name\r\n      }, () => {\r\n        console.log(\"State BUTTONNAME:\", this.state.activeName);\r\n        console.log(\"State BUTTONIndex:\", this.state.activeIndex);\r\n      });\r\n    }\r\n\r\n    // Set LoggedOut to true when logout is clicked\r\n    if (event.target.name === \"logout\") {\r\n      this.props.setRole(\"visitor\", true);\r\n      auth.resetLocalStorage();\r\n    }\r\n  }\r\n\r\n  toggleCollapse = () => {\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n\r\n    /***********************\r\n   * 05/25/2020\r\n   * 1) Trigger refresh on login and logout\r\n    /************************************** */\r\n    console.log(\"Navbar/index.js just update\");\r\n    // console.log(\"CurrentPage:\", this.props.currentPage);\r\n    if (this.props.currentPage === \"Logout\") {\r\n      // When credentials are cleared force password reset, since no new page is displayed\r\n      // console.log(\"Navbar In LOGOUT1, currentPage:\", this.props.currentPage)\r\n      // console.log(\"NAVBAR: DIDMOUNT componentDidMount\");\r\n      // console.log(\"NAVBAR: DIDMOUNT state.Role:\", this.state.role);\r\n      // console.log(\"NAVBAR: DIDMOUNT props.Role:\", this.props.role);\r\n      // console.log(\"NAVBAR: DIDMOUNT state.loggedOut:\", this.state.loggedOut);\r\n      // console.log(\"Navbar: DIDMOUNT ComponentDIDMOUNT\");\r\n\r\n      /******************************************\r\n       Authorization-Part1:\r\n       ********************* \r\n       Clear Credentails on \r\n       Logout making state.role out of sync with \r\n       prop.role\r\n       ******************************************/\r\n      auth.resetLocalStorage();\r\n      if (\r\n        this.state.role !== \"visitor\" &&\r\n        !this.loggedOut &&\r\n        this.state.role === this.props.role\r\n      ) {\r\n        console.log(\"LOG USER OUT IN NAV\");\r\n        console.log(\r\n          \"Navbar1: userRole =\",\r\n          this.state.role,\r\n          \"LoggedOut:\",\r\n          this.state.loggedOut\r\n        );\r\n        this.props.setRole(\"visitor\", true);\r\n      } else if (\r\n        /******************************************\r\n       Authorization-Part2: \r\n       *******************\r\n       Catch the out-of-sync props.role and \r\n       state.role, indicating a logout state\r\n       ******************************************/\r\n        this.state.role !== this.props.role &&\r\n        this.state.role !== \"visitor\"\r\n      ) {\r\n        this.setState({ role: \"visitor\" });\r\n        console.log(\r\n          \"Navbar2: userRole =\",\r\n          this.state.role,\r\n          \"LoggedOut:\",\r\n          this.state.loggedOut\r\n        );\r\n        this.props.redirectHome();\r\n      }\r\n    }\r\n  } //componentDidUpdate\r\n\r\n  render() {\r\n    var userRole = this.state.role;\r\n    console.log(\"NAVBAR CONTAINER: userRole =\", userRole);\r\n    const { activeIndex } = this.state;\r\n\r\n    console.log(\"PropsCurrentPage: \", this.props.currentPage);\r\n    console.log(\"PropsName: \", this.props.name);\r\n\r\n    let loggedOut = this.props.loggedOut;\r\n    let role = this.props.role;\r\n    return (\r\n      <MDBNavbar\r\n        color=\"default-color\"\r\n        expand=\"md\"\r\n        className=\"sticky-top z-depth-6\"\r\n        id=\"main-header\"\r\n      >\r\n        {/* id=\"main-header\" */}\r\n        {/* <!-- Navbar brand --> */}\r\n        <a\r\n          className=\"navbar-brand\"\r\n          href=\"#\"\r\n        >\r\n          {\"Brand\"}\r\n        </a>\r\n        <MDBNavbarToggler\r\n          onClick={this.toggleCollapse}\r\n        >\r\n          <i className=\"fas fa-bars\"></i>\r\n        </MDBNavbarToggler>\r\n        <MDBCollapse\r\n          id=\"navbarCollapse3\"\r\n          isOpen={this.state.isOpen}\r\n          navbar\r\n        >\r\n          <MDBNavbarNav left>\r\n            {this.state.myNav.userItems?.map((btn: UserItemsType, btnIdx: number) => {\r\n              console.log(\"UserItems:\", btn);\r\n              return (<UserBtn\r\n                activeIndex={activeIndex}\r\n                activeName={btn.name}\r\n                buttonIndex={btnIdx}\r\n                userRole={userRole}\r\n                authorization={btn.authorization}\r\n                captureEvent={(e) => { this.handleChangeActive(e, btn, btnIdx) }}\r\n                name={btn.name}\r\n                route={btn.route}\r\n                label={btn.label}\r\n                key={btn.key}\r\n              />)\r\n            })}\r\n            <Can\r\n              role={userRole}\r\n              perform=\"products:insert\"\r\n              yes={() => (\r\n                <>\r\n                  {!loggedOut ?<MDBNavItem>\r\n                    <MDBDropdown>\r\n                      <MDBDropdownToggle nav caret>\r\n                        <span className=\"mr-2\">Admin</span>\r\n                      </MDBDropdownToggle>\r\n                      <MDBDropdownMenu className=\"dropdown-default\">\r\n                        {\r\n                          this.state.myNav.adminItem?.map((btn: AdminItemType, btnIdx: number) => {\r\n                            console.log(\"AdminItems:\", btn);\r\n                            return (<AdminBtn\r\n                              name={btn.name}\r\n                              route={btn.route}\r\n                              key={btn.key}\r\n                              captureEvent={(event) => { this.handleChangeActive(event, btn, btnIdx) }}\r\n                            />)\r\n                          })\r\n                        }\r\n                      </MDBDropdownMenu>\r\n                    </MDBDropdown>\r\n                  </MDBNavItem>: ''}\r\n                </>\r\n              )}\r\n              no={() => <></>}\r\n            />\r\n          </MDBNavbarNav>\r\n          <MDBNavbarNav right>\r\n            <MDBNavItem>\r\n              <MDBNavLink\r\n                activeClassName={\"not-active\"}\r\n                className=\"waves-effect waves-light\"\r\n                to=\"#!\"\r\n              >\r\n                <MDBIcon fab icon=\"twitter\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n            <MDBNavItem>\r\n              <MDBNavLink\r\n                activeClassName={\"not-active\"}\r\n                className=\"waves-effect waves-light\"\r\n                to=\"#!\"\r\n              >\r\n                <MDBIcon\r\n                  fab icon=\"google-plus-g\" />\r\n              </MDBNavLink>\r\n            </MDBNavItem>\r\n\r\n            <MDBNavItem>\r\n              <MDBDropdown>\r\n                <MDBDropdownToggle nav caret>\r\n                  <MDBIcon icon=\"user\" />\r\n                </MDBDropdownToggle>\r\n                <MDBDropdownMenu className=\"dropdown-default\" right>\r\n                  {\r\n                    this.state.myNav.loginItem?.map((btn: LoginItemType, btnIdx: number) => {\r\n                      console.log(\"LoginItems:\", btn);\r\n                      return (<LoginBtn\r\n                        name={btn.name}\r\n                        route={btn.route}\r\n                        key={btn.key}\r\n                        captureEvent={(event) => { this.handleChangeActive(event, btn, btnIdx) }}\r\n                        setRole={this.props.setRole}\r\n                        role={this.props.role}\r\n                      />)\r\n                    })\r\n                  }\r\n                </MDBDropdownMenu>\r\n              </MDBDropdown>\r\n            </MDBNavItem>\r\n          </MDBNavbarNav>\r\n        </MDBCollapse>\r\n      </MDBNavbar>\r\n    );\r\n  } //render\r\n}\r\n\r\nexport default NavbarPage;","export function navbarOptions(props: NavbarOptionsPropType): NavbarType {\r\n\r\n  let userItems: UserItemsType[] = [\r\n    {\r\n      name: 'home',\r\n      label: 'Home',\r\n      route: '/',\r\n      authorization: 'home-page:visit',\r\n      key: 0\r\n    },\r\n    {\r\n      name: 'products',\r\n      label: 'Products',\r\n      route: '/products',\r\n      // authorization: 'products:view',\r\n      authorization: 'home-page:visit',\r\n      key: 1\r\n    }\r\n  ];\r\n\r\n  let adminItem: AdminItemType[] = [\r\n    {\r\n      name: 'insert',\r\n      route: '/product/insert',\r\n      key: 10\r\n    }\r\n  ];\r\n\r\n  let loginItem: LoginItemType[] = [\r\n    {\r\n      name: 'registration',\r\n      route: '/user/registration',\r\n      key: 20\r\n    },\r\n    {\r\n      name: 'login',\r\n      route: '/user/login',\r\n      key: 21\r\n    },\r\n    {\r\n      name: 'logout',\r\n      route: '#',\r\n      key: 22\r\n    }\r\n  ];\r\n\r\n  let items = { \r\n    userItems: userItems,\r\n    adminItem: adminItem,\r\n    loginItem: loginItem\r\n  };\r\n  return items as NavbarType;\r\n}\r\n","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();\n","  \r\nimport React from \"react\";\r\n\r\n// IMPORTANT: Contains MDBBootstrap Styles\r\nimport './styles.css';\r\n\r\n// import { MDBCarousel, MDBCarouselCaption, MDBCarouselInner, MDBCarouselItem, MDBView, MDBMask, MDBContainer } from \"mdbreact\";\r\n\r\nlet Home = function() {\r\n    return (\r\n        <header>\r\n          <div \r\n          className=\"view jarallax\" data-jarallax='{\"speed\": 0.2}'>\r\n            <div className=\"container h-100 d-flex justify-content-center align-items-center\">\r\n              <div className=\"row pt-5 mt-3\">\r\n                <div className=\"col-md-12 mb-3\">\r\n                  <div className=\"intro-info-content text-center\">\r\n                    <h1 className=\"display-3 mb-5 wow fadeInDown\" data-wow-delay=\"0.3s\">NEW\r\n                      <a className=\"indigo-text font-weight-bold\">COLLECTION</a>\r\n                    </h1>\r\n                    <h5 className=\"text-uppercase mb-5 mt-1 font-weight-bold wow fadeInDown\" data-wow-delay=\"0.3s\">Free\r\n                      delivery & special prices</h5>\r\n                    <a className=\"btn btn-outline-indigo btn-lg wow fadeInDown\" data-wow-delay=\"0.3s\">Shop</a>\r\n                    <a className=\"btn btn-indigo btn-lg wow fadeInDown\" data-wow-delay=\"0.3s\">Lookbook</a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        </div></header>);\r\n};\r\n\r\nexport default Home;","import { urlParser } from \"./urlParser\";\r\n\r\nexport let urlBtnUpdates = () => {\r\n        const pageName = urlParser();\r\n        console.log(\"PageName:\", pageName);\r\n        // Add a de-activate or activate class to the button with the corresponding name\r\n        let btnElement;\r\n        let className;\r\n        let element;\r\n        if (pageName === '' || pageName === 'home') {\r\n                btnElement = 'home';\r\n                className = 'activate';\r\n\r\n                //set other btn to de-activate\r\n                element = document.querySelector(`[name=products]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent');\r\n        }\r\n        else if (pageName === 'products') {\r\n                btnElement = 'products';\r\n                className = 'activate';\r\n\r\n                //set other btn to de-activate\r\n                element = document.querySelector(`[name=home]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent');\r\n        }\r\n        else {\r\n                // reset both buttons\r\n\r\n                element = document.querySelector(`[name=home]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent'); \r\n\r\n                element = document.querySelector(`[name=products]`);\r\n\r\n                element?.setAttribute('class', ' de-activate nav-link Ripple-parent');\r\n        }\r\n\r\n        // set page's current button to activate\r\n        // console.log(\"CLASSNAME:\", className);\r\n        element = document.querySelector(`[name=${btnElement}]`);\r\n        element?.setAttribute('class', className + ' nav-link Ripple-parent');\r\n};","import React, { Component } from \"react\";\r\nimport { urlParser } from \"../utils/urlParser\";\r\n\r\n// Import Components\r\nimport Home from \"../components/home\";\r\nimport { urlBtnUpdates } from \"utils/urlBtnUpdates\";\r\n\r\n\r\nclass HomeContainer extends Component<HomePropType, HomeStateType> {\r\n    state: HomeStateType;\r\n    constructor(props: HomePropType) {\r\n        super(props);\r\n        this.state = {};\r\n    } // constructor\r\n\r\n    componentDidMount() {\r\n        urlBtnUpdates();\r\n    }\r\n    \r\n    onClick() {\r\n        this.setState(\r\n            {\r\n                collapse: !this.state.collapse,\r\n            }\r\n        );\r\n    } // onClick\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Home />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n} // class\r\n\r\nexport default HomeContainer;","import { MDBRow, MDBCol } from 'mdbreact';\r\nimport React from 'react';\r\n\r\nlet Text = (props: TextPropType) => {\r\n  return (\r\n    <React.Fragment>\r\n      <label htmlFor={props.label} />\r\n      <MDBRow>\r\n        <MDBCol\r\n          size=\"auto\"\r\n        >\r\n          {props.label}\r\n      </MDBCol>\r\n        <MDBCol>\r\n          <input\r\n            type=\"text\"\r\n            className={props.className}\r\n            id={props.id}\r\n            placeholder={props.placeholder}\r\n            name={props.name}\r\n            value={props.value}\r\n            onChange={props.changeHandler}\r\n          />\r\n        </MDBCol>\r\n      </MDBRow>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Text;","import React from 'react';\r\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\r\nimport Text from \"components/inputs/text\";\r\n\r\nlet LoginForm = (props: LoginFormPropType) => {\r\n    return (\r\n        <main role=\"main\" className=\"form-align flex-shrink-0\">\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol size=\"12\" middle={true}>\r\n                        <form>\r\n                            {/* <div className=\"container\"> */}\r\n                            <h1 className=\"mt-5\">Login Form</h1>\r\n                            <br />\r\n                            {/* email */}\r\n                            <div className=\"form-group\">\r\n                                {/* email */}\r\n                                <Text\r\n                                    htmlFor={\"formGroupEmail\"}\r\n                                    className={\"form-control\"}\r\n                                    id={\"formGroupEmail\"}\r\n                                    // placeholder={\"email\"}\r\n                                    label={\"Email\"}\r\n                                    name={\"email\"}\r\n                                    value={props.email}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                {/* password */}\r\n                                <Text\r\n                                    htmlFor={\"formGroupPassword\"}\r\n                                    className={\"form-control\"}\r\n                                    id={\"formGroupPassword\"}\r\n                                    // placeholder=\"password\"\r\n                                    name={\"password\"}\r\n                                    label={\"Password\"}\r\n                                    value={props.password}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                {/* button */}\r\n                                <br />\r\n                                <MDBRow>\r\n                                    <MDBCol>\r\n                                        <label htmlFor=\"formGroupPassword\" />\r\n                                        <MDBBtn\r\n                                            className={\"mx-0\"} color=\"blue-grey\"\r\n                                            onClick={props.clickHandler}\r\n                                        >\r\n                                            Submit\r\n                                        </MDBBtn>\r\n                                        <h3 className={\"mt-5\"}>{props.message ? props.message : ''}</h3>\r\n                                        <h3 className=\"mt-5\">{props.token ? props.token : ''}</h3>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </div>\r\n                            {/* </div> */}\r\n                        </form>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </main >\r\n    )\r\n};\r\n\r\nexport default LoginForm;","import React, { Component, ChangeEvent, FormEvent } from \"react\";\r\n\r\n// Import module to get/set variables from/in the LocalStorage\r\nimport * as authenticationStore from '../utils/authenticationStore';\r\n\r\n// Import Server-Side Utilities:\r\nimport { api as API } from '../utils/API';\r\n\r\n// Import Components\r\nimport LoginForm from \"../forms/login\";\r\n\r\ninterface PropTypes {\r\n    getRole: () => void,\r\n    history: any\r\n}\r\n\r\nclass LoginContainer extends Component<LoginPropType, LoginStateType> {\r\n    state!: LoginStateType;\r\n    constructor(props: LoginPropType) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            message: '',\r\n            access_token: '',\r\n            refresh_token: '',\r\n            expiration: '',\r\n            hasAccessTokenExpired: false,\r\n            isUserAuthorized: false,\r\n            authToken: '',\r\n            token: ''\r\n        };\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n    } // constructor\r\n\r\n    changeHandler(event: ChangeEvent<HTMLInputElement>): void {\r\n        // First disable default behavior\r\n        event.preventDefault();\r\n\r\n        const {\r\n            name,\r\n            value\r\n        } = event.target;\r\n        console.log(\"--NAME:\", name);\r\n        // if (name && typeof value === 'string') \r\n        // [name]: value\r\n        // set name computed property to the name \"email\", \"password\" of the input element, where the value was entered in login form,and set the corresponding state property to the element's value{\r\n        if (Object.keys(this.state).includes(name)) {\r\n\r\n            this.setState({\r\n                [name]: value\r\n            } as unknown as Pick<LoginStateType, keyof LoginStateType>);  // setState\r\n        }\r\n    } // changeHandler\r\n\r\n    /**\r\n     * Clicks handler handles login form submission events\r\n     * @param event \r\n     */\r\n    async clickHandler(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        console.log(`User Name: ${this.state.email}, Password: ${this.state.password}`);\r\n\r\n        // Package Data to be sent in the Post Request Body\r\n        let data = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n        };\r\n        // Define Call to Server Side utils to post body to the backend server and set states, using login method:\r\n        let login = (data: DataType) => {\r\n            console.log('IN LOGIN CALL');\r\n            API.login(data)\r\n                .then(async (res: any) => {\r\n                    if (res) {\r\n                        // Step 1 of 2: Set state variables from response\r\n                        let { message, access_token, refresh_token, expiration, email } = res.data;\r\n                        this.setState(\r\n                            {\r\n                                access_token,\r\n                                expiration,\r\n                                refresh_token,\r\n                                message,\r\n                                email\r\n                            });\r\n                        console.log(\"RES:\", res);\r\n\r\n                        // Step 2 fo 2: Set Local Storage variables from respons\r\n                        await authenticationStore.setLocalStorage(\r\n                            access_token,\r\n                            refresh_token,\r\n                            expiration,\r\n                            email,\r\n                            message);\r\n\r\n                        /***********************************\r\n                         Get user role and set on App Router\r\n                         ***********************************/\r\n                        let role = await this.props.getRole();\r\n                        \r\n\r\n                        // this.setState({toProducts: true});\r\n                        // push props to the products route in App.js \r\n                        this.props.history.push('/products');\r\n                    }//if\r\n                })\r\n                .catch(async err => {\r\n                    console.log(\"LOGIN ERROR\", err);\r\n                    this.setState(\r\n                        { message: err.message });\r\n                });\r\n        };\r\n\r\n        // Execute login\r\n        login(data);\r\n\r\n        // Reset state variables after submit\r\n        this.setState({\r\n            email: '',\r\n            password: '',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets state variables from LocalStorage\r\n     * @param access_token \r\n     * @param refresh_token \r\n     * @param expiration \r\n     * @param email \r\n     * @param message \r\n     */\r\n    async setStateVariables(access_token: string, refresh_token: string, expiration: string, email: string, message: string) {\r\n        let authToken = \"Bearer \" + access_token;\r\n\r\n        console.log(\"Auth token\", authToken);\r\n        this.setState({ authToken });\r\n\r\n        console.log(\"Refresh token\", refresh_token);\r\n        this.setState({ refresh_token });\r\n\r\n        this.setState({ email });\r\n\r\n        let hasAccessTokenExpired = await authenticationStore.hasAccessTokenExpired();\r\n\r\n        console.log(\"Expired?\", hasAccessTokenExpired);\r\n        this.setState({ hasAccessTokenExpired });\r\n\r\n        this.setState({ isUserAuthorized: true });\r\n\r\n        this.setState({ message });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <LoginForm\r\n                    changeHandler={this.changeHandler}\r\n                    clickHandler={this.clickHandler}\r\n                    email={this.state.email}\r\n                    password={this.state.password}\r\n                    message={this.state.message}\r\n                    token={this.state.token} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n} // class\r\n\r\nexport default LoginContainer;","import React from 'react';\r\nimport \"./styles.css\";\r\n\r\n// export class Uploader extends Component {\r\nexport let ImageSelector = (\r\n    props: ImageSelectorPropType) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={\"input-group img-select-btn\"}>\r\n                <input\r\n                    type={props.imageType}\r\n                    className={`${props.imageClassName} border`}\r\n                    id={props.submitBtnId}\r\n                    ref={props.imageSelectRef}\r\n                    aria-describedby=\"inputGroupFileAddon01\"\r\n                    name={props.imageName}\r\n                    accept={props.fileTypes}\r\n                    onChange={\r\n                        (event) => {\r\n                            props.selectImage(event, props.imageSelectRef, props.previewCanvasRef);\r\n                        }\r\n                    }\r\n                />\r\n                </div>\r\n        </React.Fragment >\r\n    )\r\n};","import React from 'react';\r\nimport { MDBBtn, MDBCol, MDBInputGroup, MDBRow } from \"mdbreact\";\r\nimport { ImageSelector } from \"../image-selector\";\r\nimport './styles.css';\r\n\r\n// export class Uploader extends Component {\r\nexport let ImageUploader = (props: ImageUploadPropType) => {\r\n  let { image, uploaderBorder } = props;\r\n  // create ref\r\n  let imageSelectRef: ImageUploadRefObject<HTMLInputElement> = React.createRef();\r\n  let previewCanvasRef: ImageUploadRefObject<HTMLInputElement> = React.createRef();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <MDBCol size=\"1\" className={uploaderBorder}>\r\n        {/* BLANK */}\r\n      </MDBCol>\r\n\r\n      {/* BROWSE BUTTON */}\r\n      <MDBCol size=\"4\">\r\n        {/* Display Image */}\r\n        <div className=\"col-12 input-border\">\r\n          {/********IMAGE PREVIEW CANVAS*********/}\r\n          <MDBRow>\r\n            <div className=\"name-container name-container-border\">\r\n              <div\r\n                className=\"preview\"\r\n                ref={previewCanvasRef}>\r\n                {/* <h4>Image Preview</h4> */}\r\n                <p id=\"file-msg\"></p>\r\n              </div>\r\n            </div>\r\n          </MDBRow>\r\n          <MDBRow>\r\n            <ImageSelector\r\n              imageName={image.imageName}\r\n              imageClassName={image.className}\r\n              imageType={image.type}\r\n              submitBtnId={image.submitBtnId}\r\n              imageSelectRef={imageSelectRef}\r\n              previewCanvasRef={previewCanvasRef}\r\n              aria={\"inputGroupFileAddon01\"}\r\n              fileTypes={\".png, .jpeg, .jpg\"}\r\n              selectImage={props.selectImage}\r\n            />\r\n          </MDBRow>\r\n        </div>\r\n      </MDBCol>\r\n    </React.Fragment >\r\n  )\r\n};","import React, { ChangeEvent, FormEvent, FC } from 'react';\r\nimport { MDBBtn, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport { ImageUploader } from '../../../components/image-uploader';\r\nimport \"./styles.css\";\r\nimport Text from 'components/inputs/text';\r\n\r\n//FC = FunctionComponent\r\nlet ProductInsertForm: FC<ProductInsertFormPropType> = (props: ProductInsertFormPropType) => {\r\n    console.log(\"PRODUCTINSERTINPUTS\", props.image);\r\n    console.log(\"PRODUCTINSERT FileTypes\", props.image.fileTypes);\r\n    return (\r\n        <main className=\"form-align\">\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol size=\"12\" middle={true}>\r\n                        <form onSubmit={props.insertClickHandler}>\r\n                            <h1 className=\"mt-5\">Product Insert Form</h1>\r\n                            <br />\r\n                            <div className=\"product-name-value-form-group\">\r\n                                <Text\r\n                                    htmlFor=\"formGroupProductName\"\r\n                                    className=\"form-control product-name\"\r\n                                    id={\"formGroupProductName\"}\r\n                                    placeholder={props.placeholderName }\r\n                                    name={\"productName\"}\r\n                                    label={\"Name\"}\r\n                                    value={props.productName}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                <Text\r\n                                    htmlFor={\"formGroupProductValue\"}\r\n                                    className={\"form-control product-value\"}\r\n                                    id={\"formGroupProductValue\"}\r\n                                    placeholder={props.placeholderValue}\r\n                                    name={\"productValue\"}\r\n                                    label={\"Value\"}\r\n                                    value={props.productValue}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                <br />\r\n                                <MDBRow className={\"image-require-border\"}>\r\n                                    {/* REQUIREMENTS */}\r\n                                    <MDBCol size=\"12\">Image Requirements (PNG, JPG):<br />\r\n                                        <MDBCol size=\"7\">\r\n                                            <div className=\"col-12\">\r\n                                                <b>Filesize:</b> &#60; {props.image.maxMB}MB, <b>Dimensions: </b>\r\n                                            Min: {props.image.imageMin}, Max: {props.image.imageMax}\r\n                                            </div>\r\n                                        </MDBCol>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                <MDBRow role=\"main\" className=\"upload-image-form-group image-require-border\">\r\n                                    <br></br>\r\n                                    <ImageUploader\r\n                                        uploaderBorder={\"uploader-border\"}\r\n                                        image={props.image}\r\n                                        submitImageHandler={props.submitImageHandler}\r\n                                        productImage={props.productImage}\r\n                                        selectImage={props.selectImage}\r\n                                        setImageProp={props.setImageProp}\r\n                                    />\r\n                                    <MDBCol\r\n                                        className={\"image-require-border\"}>\r\n                                        {/******SUBMIT BUTTON: PRODUCT/VALUE UPLOAD*********/}\r\n                                        <label htmlFor=\"formGroupSubmitButton\" />\r\n                                        <MDBBtn\r\n                                            id=\"submit-image\"\r\n                                            color=\"blue-grey\"\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Submit\r\n                                        </MDBBtn>\r\n                                        <h3 className=\"mt-5\">{props.message ? props.message : ''}</h3>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </div>\r\n                        </form>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </main >\r\n    )\r\n};\r\n\r\nexport default ProductInsertForm;","// Import Server-Side Utilities:\r\nimport { api as API } from '../utils/API';\r\n\r\nexport default {\r\n    refresh: async (url:string, accessToken: string, refreshToken: string, email: string, expired:boolean) => {\r\n        console.log('In REFRESHTOKENS:', refreshToken);\r\n        /*************************************************************\r\n         *  package and send the body to the endpoint\r\n         ************************************************************/\r\n        let newCredentialResponse = await API.refreshTokens(url, accessToken, refreshToken, email, expired);\r\n        console.log(\"tokenStore: newCredentialResponse = \", newCredentialResponse);\r\n\r\n        /*************************************************************\r\n         * Send the newCredentialResponse back to the calling program\r\n         ************************************************************/\r\n        return newCredentialResponse;\r\n    }\r\n};","import tokenStore from './tokenStore';\r\n// import * as authenticationStore from \"./authenticationStore\";\r\nimport * as auth from '../utils/authenticationStore';\r\n\r\nexport default {\r\n    // Pulls credentials from backend and stores in localstorage\r\n    setLocalCredWNewTokens: async (\r\n        refresh_token: string, refreshURL: string, authToken: string,\r\n        email: string, hasAccessTokenExpired: boolean) => {\r\n        console.log(\"ProductListContainer refresh-token: \", refresh_token);\r\n\r\n        /***************************************\r\n         * Step3: RefreshTokens: If tokens have expired\r\n         * **************************************/\r\n        try {\r\n            /*********************************\r\n             * Step3b:Call refreshTokens to perform update\r\n             *********************************/\r\n            console.log(\"CredentialStore: Before TokenStore Call\");\r\n            let res = await tokenStore.refresh(refreshURL, authToken, refresh_token, email, hasAccessTokenExpired);\r\n            /**************************/\r\n            console.log(\"CredentialStore: After TokenStore Call\");\r\n\r\n            // do something with response\r\n            console.log(\"ProductionList:response returned\", res);\r\n            if (res?.status === 200) {\r\n                console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED RES:\", res);\r\n                /***********************************************\r\n                 * Step4: Set Local Storage Variables\r\n                 ************************************************/\r\n                let { access_token, refresh_token, expiration, email, message } = await auth.setLocalStorage(\r\n                    res.data.access_token,\r\n                    res.data.refresh_token,\r\n                    res.data.expiration,\r\n                    res.data.email,\r\n                    res.data.message);\r\n                console.log(\"After setlocalStorage\");\r\n                /*********************************************\r\n                 * STEP5: Return variables to productListContainer\r\n                 ********************************************/\r\n                return ({\r\n                    access_token,\r\n                    refresh_token,\r\n                    expiration,\r\n                    email,\r\n                    message\r\n                });\r\n                // console.log(\"After return\");\r\n                /********************************************/\r\n                // }\r\n            } // if\r\n        } // try\r\n        catch (err) {\r\n            // Clear all localStorage, due to invalid Refresh token\r\n            if (err.response.status === 401) {\r\n                console.log('401 status received in ProductUpdate');\r\n                /***********************************************\r\n                 * STEP6: Reset Local Storage Variables\r\n                 ************************************************/\r\n                // console.log(\"In if 3: baseURL =\", baseURL);\r\n                await auth.resetLocalStorage();\r\n\r\n                /*********************************************\r\n                 * STEP7: SET STATE VARIABLES FROM Local Storage\r\n                 *********************************************/\r\n                return ({\r\n                    authToken: '',\r\n                    access_token: '',\r\n                    refresh_token: '',\r\n                    expiration: null,\r\n                    email: '',\r\n                    hasAccessTokenExpired: false,\r\n                    isUserAuthorized: false,\r\n                    message: err.response.data.message\r\n                });\r\n            } // if\r\n        } // catch  \r\n    }, // get\r\n    /************************************************\r\n         Get all state credentials from local storage to send a get request for data \r\n    ************************************************/\r\n    getEvaluatedCredentials: (\r\n        curCredentials: CurrentCredentialType) => {\r\n        let authToken = \"Bearer \" + curCredentials.access_token;\r\n\r\n        let hasAccessTokenExpired = auth.hasAccessTokenExpired();\r\n\r\n        const credentials = {\r\n            access_token: curCredentials.access_token,\r\n            refresh_token: curCredentials.refresh_token,\r\n            expiration: curCredentials.expiration,\r\n            email: curCredentials.email,\r\n            message: curCredentials.message,\r\n            hasAccessTokenExpired,\r\n            authToken,\r\n            isUserAuthorized: true,\r\n            refreshed: false\r\n        };\r\n        return credentials;\r\n    }\r\n}; // export","import React from 'react';\r\n// import ViewProductBtn from '../ViewProductBtn';\r\n// import LinkActionBtn from '../LinkActionBtn';\r\n\r\nlet ProductItem = (props: ProductItemPropType) => {\r\n  let name = props.name;\r\n  let nameText = `Name: ${name}`;\r\n  let value = props.value;\r\n  let valueText = `Price: $${value}`;\r\n  let id = props.id;\r\n  // let regex = /['\"']+/g;\r\n  let image: string = props.image;\r\n  // .replace(regex, '');\r\n  console.log('in productLIst:', props);\r\n\r\n  return (\r\n    <div className=\"container-fluid text-center\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n        <br></br>\r\n          <img src={image} alt={`product ${id}`} />\r\n          <p className=\"mt-2\"><b>{name? nameText: ''}</b></p>\r\n          <p><b>{value ? valueText: ''}</b><br /></p>\r\n          <hr />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ProductItem;","import API from './API';\r\nimport ProductViewItem from \"../components/products/list/item\";\r\nimport React from \"react\";\r\n\r\n\r\n/**\r\n* getProductDetails - Get product details for individual product from controller\r\n* @param baseUrl \r\n* @returns  \r\n*/\r\nexport let getProductDetails = async (baseUrl: string, authToken: string, refreshToken: string) => {\r\n    let allProducts = await API.getProduct(baseUrl, authToken, refreshToken);\r\n    let productDetails = allProducts && { ...allProducts.data };\r\n    console.log(\"@ProductDetails\", productDetails)\r\n    const productItemComponent = <ProductViewItem\r\n        image={productDetails.productImage}\r\n        key={productDetails._id}\r\n        id={productDetails._id}\r\n        name={productDetails.name}\r\n        value={productDetails.value}\r\n    /> as JSX.Element;\r\n    return productItemComponent;\r\n}\r\n\r\n/**\r\n* retrieveUpdatedProductList - retrieves all products from the database\r\n* @returns  \r\n*/\r\nexport let retrieveUpdatedProductList = async () => {\r\n    /************************************\r\n     * STEP9: Get the new updated productsList\r\n     ***********************************/\r\n    const baseURL = '/api/products';\r\n    try {\r\n        let res = await API.getProducts(baseURL);\r\n\r\n        let data = res?.data.products;\r\n        console.log(\"productStore:retrieveUpdatedProductList data =\", data);\r\n        return data;\r\n    } catch (err) {\r\n        console.log(\"ERROR\", err);\r\n    }\r\n};\r\n\r\n/**\r\n * Delete Product - Deletes an individual product\r\n * @param url \r\n * @param productId \r\n * @param email \r\n * @param accessToken \r\n * @param refresh_token \r\n * @param expired \r\n * @param [name] \r\n * @param [value] \r\n * @param [imageSrc] \r\n * @returns  \r\n */\r\nexport async function deleteProduct(\r\n    url: string,\r\n    productId: string,\r\n    email: string,\r\n    accessToken: string,\r\n    refresh_token: string,\r\n    expired: boolean,\r\n    name = null,\r\n    value = null,\r\n    imageSrc = null\r\n) {\r\n    console.log('IN DELETE PRODUCT CALL');\r\n    console.log(`DATA URL: ${url}, ATOKENT: ${accessToken}, RTOKEN: ${refresh_token}, EXPIRED: ${expired}, EMAIL: ${email}`);\r\n\r\n    let deleteProductResponse = await API.deleteProduct(url, accessToken, refresh_token, expired, email);\r\n\r\n    /*NEVER COMES BACK*/\r\n    console.log(\"deleteProduct: \", deleteProductResponse);\r\n\r\n    // Return deleteProductResponse from deleteProduct on the backend\r\n    return deleteProductResponse;\r\n}\r\n\r\n// \r\n/**\r\n * Update product - Updates image data in SQL db, with info from request body\r\n * @param url \r\n * @param id \r\n * @param email \r\n * @param authToken \r\n * @param refreshToken \r\n * @param expired \r\n * @param name \r\n * @param value \r\n * @param [image] \r\n * @returns  \r\n */\r\n export let updateProduct = async (\r\n    url: string,\r\n    id: string,\r\n    email: string,\r\n    authToken: string,\r\n    refreshToken: string,\r\n    expired: boolean,\r\n    name: string,\r\n    value: string,\r\n    image = null) => {\r\n    console.log('ProductStore:IN UPDATE PRODUCT CALL', \"expired\", expired);\r\n    let updateResponse = await API.updateProduct(url, authToken, refreshToken, name, value, image, expired, email);\r\n\r\n    // Return results to the calling program\r\n    return updateResponse;\r\n};\r\n\r\n/**\r\n* insertCloudinary - Insert image into cloudinary storage server\r\n* @param baseURL \r\n* @param imageObj \r\n* @returns  \r\n*/\r\nexport let insertCloudinary = async (baseURL: string, imageObj: string) => {\r\n    const cloudinaryResponse = await API.insertCloudinary(baseURL, imageObj);\r\n\r\n    return cloudinaryResponse;\r\n};\r\n\r\n// Define Call to Server Side utils to post body to the backend server:\r\n/**\r\n * Inserts product - Inserts image details from request body into sql db\r\n * @param url \r\n * @param id \r\n * @param email \r\n * @param [authToken] \r\n * @param [refreshToken] \r\n * @param [expired] \r\n * @param name \r\n * @param value \r\n * @param image \r\n * @returns  \r\n */\r\nexport async function insertProduct(\r\n    url: string,\r\n    id: string,\r\n    email: string,\r\n    authToken = null,\r\n    refreshToken = null,\r\n    expired = null,\r\n    name: string,\r\n    value: string,\r\n    image: ImageType) {\r\n    console.log('ProductStore: insertProduct: IN INSERT PRODUCT CALL');\r\n    console.log(\"ProductStore: insertProduct: Insert Product Image:\", image);\r\n    console.log(\"ProductStore: insertProduct: email:\", email);\r\n    let insertResponse = await\r\n        API.insertProduct(url, id, email, authToken, refreshToken, name, value, image, expired);\r\n\r\n    // Return results to the calling program\r\n    return insertResponse;\r\n}\r\n\r\n/**\r\n* Perform DB Actipn - Executes the callback function, with user credentials\r\n* @param [productId] \r\n* @param email \r\n* @param authToken \r\n* @param refreshToken \r\n* @param expired \r\n* @param [name] \r\n* @param [value] \r\n* @param [image] \r\n* @param url \r\n* @param cb \r\n* @returns  \r\n*/\r\nexport let performDBAction = async (\r\n    productId = '',\r\n    email: string,\r\n    authToken: string,\r\n    refreshToken: string,\r\n    expired: boolean,\r\n    name: string | null | undefined = null,\r\n    value: string | null | undefined = null,\r\n    image: ImageType | null = null,\r\n    url: string,\r\n    cb: Function) => {\r\n\r\n    const uniqueProductError: string = \"Request failed with status code 500\";\r\n    const uniqueProductMsg = \"Product name and value exists\";\r\n\r\n    console.log(\"ProductStore: PerformDbAction:\", \"email:\", email);\r\n    console.log('ProductUpdateContainer:refresh_token = ', refreshToken);\r\n\r\n    /**********************************\r\n     *  STEP8: Call method to delete product\r\n     ***********************************/\r\n    try {\r\n        // Set Refresh Token Temporarly to norefresh to clear checkAuthization\r\n        // let refresh_token = 'norefresh';\r\n\r\n        console.log(\"BEFORE UPDATE CALLED\");\r\n        console.log(\"PerformDBAction Image:\", image);\r\n        let callBackResponse = await cb(\r\n            url + productId,\r\n            productId,\r\n            email,\r\n            authToken,\r\n            refreshToken,\r\n            expired,\r\n            name,\r\n            value,\r\n            image\r\n        );\r\n\r\n        console.log(\"AFTER UPDATE CALLED\");\r\n\r\n        console.log(\"RESPONSEMESSAGE \", JSON.stringify(callBackResponse), \"STATUS\", callBackResponse.status);\r\n\r\n        if (callBackResponse.status === 200 || callBackResponse.status === 201) {\r\n            /************************************\r\n             *  10142019: Set the global variable to  \r\n             *  the updated ProductsListContainer\r\n             ***********************************/\r\n\r\n            let productsList = await retrieveUpdatedProductList();\r\n            console.log(\"retrievedUpdatedProductList:\", productsList);\r\n\r\n            let data = {\r\n                message: \"Action Completed\",\r\n                refresh_token: \"norefresh\",\r\n                isUserAuthorized: true,\r\n                hasAccessTokenExpired: false,\r\n                productsList: productsList\r\n            };\r\n\r\n            return data;\r\n        }\r\n    }\r\n    catch (err) {\r\n        console.log('err:', err.message);\r\n        let data = {message: ''};\r\n\r\n        if (err.message === uniqueProductError) {\r\n            data = {\r\n                message: uniqueProductMsg\r\n            };\r\n        } else {\r\n            data = {\r\n                message: err.message\r\n            };\r\n        }\r\n        \r\n        return data\r\n    }\r\n};\r\n\r\n/**\r\n * stage db action - An integrator that passes an id and a callback function \r\n * corresponding to the desired db action to be performed, and retrieves the \r\n * new data and updates the state variables, to be displayed to screen.\r\n * @param id \r\n * @param email \r\n * @param name \r\n * @param value \r\n * @param image \r\n * @param url \r\n * @param refreshToken \r\n * @param authToken \r\n * @param expired \r\n * @param cb \r\n * @returns  \r\n */\r\n export let stageDBAction = async (\r\n    id: string,\r\n    email: string,\r\n    name: string | null,\r\n    value: string | null,\r\n    image: ImageType | null,\r\n    url: string,\r\n    refreshToken: string,\r\n    authToken: string,\r\n    expired: boolean,\r\n    cb: Function) => {\r\n    console.log(\"Start stageDBAction: performDBAction\");\r\n    console.log(\"stageDBAction-email:\", email);\r\n\r\n    // Execute callback function and return results\r\n    let dBActionResults = await performDBAction(\r\n        id,\r\n        email,\r\n        authToken,\r\n        refreshToken,\r\n        expired,\r\n        name,\r\n        value,\r\n        image,\r\n        url,\r\n        cb);\r\n\r\n    console.log(\"PRODUCTINSERT: CONTAINER performDBAction dBActionResults:\", dBActionResults);\r\n\r\n    /************************************\r\n     * Set placeholder text if data was inserted\r\n     ****************************************/\r\n    let namePlaceHolder;\r\n    let valuePlaceHolder;\r\n    if (dBActionResults?.message === \"Action Completed\") {\r\n\r\n        if (name) {\r\n            namePlaceHolder = { placeholderName: name };\r\n        }\r\n        if (value) {\r\n            valuePlaceHolder = { placeholderValue: value };\r\n\r\n        }\r\n    }\r\n    console.log(\"Passed performDBAction\");\r\n    let {\r\n        message,\r\n        isUserAuthorized,\r\n        productsList\r\n    }: PerformDBActionType = dBActionResults!;\r\n\r\n    if (message === \"Request failed with status code 401\") {\r\n        message = \"Please Login\";\r\n    }\r\n    /***************************************************\r\n     * Set objects to be returned from stageDBAction\r\n     *****************************************************/\r\n    let dbObj;\r\n    if (namePlaceHolder && valuePlaceHolder) {\r\n        dbObj = {\r\n            message,\r\n            refreshToken,\r\n            isUserAuthorized,\r\n            expired,\r\n            productsList,\r\n            placeholderName: namePlaceHolder ? namePlaceHolder.placeholderName : '',\r\n            placeholderValue: valuePlaceHolder ? valuePlaceHolder.placeholderValue : ''\r\n        }\r\n    }\r\n    else {\r\n        dbObj = {\r\n            message,\r\n            refreshToken,\r\n            isUserAuthorized,\r\n            hasAccessTokenExpired: expired,\r\n            productsList\r\n        }\r\n    }\r\n\r\n    console.log(\"STAGEDBACTION: productListData =\", productsList);\r\n\r\n    return dbObj;\r\n}\r\n","let setImageParagraphTag = (para: Text, color: string, imageName: string, imageSize: string, imageWidth: number, imageHeight: number, previewCanvas: HTMLCanvasElement) => {\r\n  // Set Paragraph\r\n  para = document.createTextNode('File Name: ' + imageName + ', File Size: ' + imageSize + ', Width: ' + imageWidth + ', Height: ' + imageHeight);\r\n\r\n  let listItem = document.createElement('li');\r\n  listItem.setAttribute('id', 'li-id');\r\n\r\n\r\n  // listItem.appendChild(lnBreak);\r\n  listItem.appendChild(para);\r\n\r\n  let orderedList = document.createElement('ol');\r\n  previewCanvas.appendChild(orderedList);\r\n\r\n  orderedList.appendChild(listItem);\r\n\r\n  listItem.style.color = color;\r\n  // remove canvas if image added\r\n  removeItem('canvas', previewCanvas);\r\n};\r\n\r\nlet removeItem = (element: string, previewCanvas: HTMLCanvasElement) => {\r\n  /************************/\r\n  if (previewCanvas) {\r\n    let item = previewCanvas.getElementsByTagName(`${element}`);\r\n    const isItemCreated = item.length ? true : false;\r\n    console.log(\"item Length\", item.length);\r\n    console.log(\"is item created\", isItemCreated);\r\n    console.log(\"no item\", item);\r\n    if (isItemCreated) {\r\n      previewCanvas.removeChild(item[0]);\r\n    }\r\n    /************************/\r\n  }\r\n\r\n};\r\n\r\nlet removeCanvas = (previewCanvas: HTMLCanvasElement) => {\r\n  if (previewCanvas) {\r\n    var canvasElement = previewCanvas.getElementsByTagName('canvas');\r\n    if (canvasElement.length >= 1) {\r\n      removeItem('canvas', previewCanvas);\r\n      removeItem('ol', previewCanvas);\r\n    }\r\n  }\r\n\r\n};\r\n\r\n\r\nlet setFileMessage = (tag: string, message: string) => {\r\n  const errorTag = document.getElementById(tag)!;\r\n  if (errorTag) {\r\n    errorTag.innerHTML = message;\r\n  }\r\n};\r\n\r\nlet getFormattedFileSize = (files: FileList): string => {\r\n  let curFiles = files;\r\n  return returnFileSize(curFiles[0].size)!;\r\n};\r\n\r\n/*Returns formatted version of file size*/\r\nlet returnFileSize = (number: number) => {\r\n  if (number < 1024) {\r\n    return number + 'bytes'\r\n  } else if (number >= 1024 && number < 1048576) {\r\n    return (number / 1024).toFixed(1) + 'KB'\r\n  } else if (number >= 1048576) {\r\n    return (number / 1048576).toFixed(1) + 'MB'\r\n  }\r\n};\r\n\r\nlet appendImage = (img: HTMLImageElement, canvas: HTMLCanvasElement, previewCanvas: HTMLCanvasElement) => {\r\n  img.onload = () => {\r\n    // Set canvas dimension to match image\r\n    canvas.width = img.width\r\n    canvas.height = img.height\r\n    // canvas.width = previewCanvas.width;\r\n    // canvas.height = previewCanvas.height;\r\n    var context: CanvasRenderingContext2D = canvas.getContext('2d')!;\r\n\r\n    // Draw image to canvas centered\r\n    // https://stackoverflow.com/questions/16317971/draw-images-on-in-the-middle-of-a-canvas\r\n    context.drawImage(img, canvas.width / 2 - img.width / 2,\r\n      canvas.height / 2 - img.height / 2);\r\n    // previewCanvas.appendChild(canvas);\r\n    canvas.setAttribute(\"class\", \"img-fluid\");\r\n    previewCanvas.prepend(canvas);\r\n  };\r\n};\r\n\r\nlet checkImageDimensions = (imageWidth: number, imageMin: number, imageHeight: number, imageMax: number) => {\r\n  let areDimensionsValid = false;\r\n  // let para = document.createTextNode('');\r\n\r\n  // if dimensions valid\r\n  if (imageWidth >= imageMin && imageWidth <= imageMax && imageHeight >= imageMin && imageHeight <= imageMax) {\r\n    areDimensionsValid = true;\r\n  }\r\n  // dimensions not valid\r\n  else {\r\n    areDimensionsValid = false;\r\n  }\r\n  return areDimensionsValid;\r\n};\r\n\r\nlet setFileSize = (areDimensionsValid: boolean, errorTag: string, acceptedMsg: string, unacceptedMsg: string, imageName: string, imageSize: string, files: FileList, previewCanvas: HTMLCanvasElement, imageWidth: number, imageHeight: number) => {\r\n  let para = document.createTextNode('');\r\n  if (areDimensionsValid) {\r\n    // Set file size with Units:\r\n    imageSize = getFormattedFileSize(files);\r\n    setImageParagraphTag(para, 'black', imageName, imageSize, imageWidth, imageHeight, previewCanvas);\r\n    setFileMessage(errorTag, acceptedMsg);\r\n    let submitBtn: HTMLButtonElement = document.getElementById('submit-image') as HTMLButtonElement;\r\n    submitBtn.disabled = false;\r\n  }\r\n  else {\r\n    console.log(\"****DIMENSIONS NOT VALID****\");\r\n    const submitImgBtn: HTMLButtonElement = document.getElementById('submit-image') as HTMLButtonElement;\r\n    submitImgBtn.disabled = true;\r\n\r\n    // Set file size with Units:\r\n    imageSize = getFormattedFileSize(files);\r\n    setImageParagraphTag(para, 'red', imageName, imageSize, imageWidth, imageHeight, previewCanvas);\r\n    setFileMessage(errorTag, unacceptedMsg);\r\n  }\r\n  return imageSize;\r\n};\r\n\r\nlet isFileSelected = (input: HTMLInputElement) => {\r\n  let curFiles = input ? input.files : null;\r\n  return curFiles;\r\n};\r\n\r\nlet imgOnError = (previewCanvas: HTMLCanvasElement, imageWidth: number, imageMax: number, imageHeight: number, errorTag: string, invalidMsg: string) => {\r\n  if (imageWidth <= imageMax && imageHeight <= imageMax) {\r\n    console.log('NOT A Valid File: ');\r\n    setFileMessage(errorTag, invalidMsg);\r\n    const submitImgBtn: HTMLButtonElement = document.getElementById('submit-image') as HTMLButtonElement;\r\n    submitImgBtn.disabled = true;\r\n    console.log(\"IMAGE ERROR ONLOAD\");\r\n  }\r\n  // Remove Canvas and Paragraph for wrong dimensions or no file.\r\n  removeCanvas(previewCanvas);\r\n  console.log(\"in imgONERROR\");\r\n}; // oneerror\r\n\r\n\r\nlet displayImage = (img: HTMLImageElement, areDimensionsValid: boolean, previewCanvas: HTMLCanvasElement) => {\r\n  var canvasElement = previewCanvas.getElementsByTagName('canvas');\r\n  var canvas = document.createElement('canvas');\r\n  console.log(\"DISPLAYIMAGE CANVASELEMENT:\", canvasElement);\r\n  if (!areDimensionsValid) {\r\n\r\n  }\r\n  // No Image added to canvas\r\n  else if (canvasElement.length === 0) {\r\n    appendImage(img, canvas, previewCanvas)\r\n  }\r\n  // Image added to canvas\r\n  else {\r\n    removeItem('canvas', previewCanvas);\r\n    appendImage(img, canvas, previewCanvas);\r\n  }\r\n};\r\n\r\nlet loadImage = (img: HTMLImageElement, blob: Blob): Promise<ImagePropsType> => {\r\n  console.log(\"IMG\", img, \"BLOB\", blob);\r\n  return new Promise(function (resolve, reject) {\r\n    // define source\r\n    img.src = URL.createObjectURL(blob);\r\n    // resolve promise onLoad\r\n    img.onload = () => {\r\n\r\n      const imageProps: ImagePropsType = {\r\n        imageName: blob.name,\r\n        imageHeight: img.height,\r\n        imageWidth: img.width,\r\n        imageSize: blob.size,\r\n        imageSrc: img.src\r\n      };\r\n      resolve(imageProps);\r\n    };\r\n    // reject promise onError\r\n    img.onerror = () => {\r\n      reject(\"rejected\");\r\n    };\r\n  });\r\n};\r\n\r\n/* Base64 Decoder: Remove the metadata\r\nhttps://www.base64decode.net/base64-image-decoder */\r\nlet convertImageFromUrlToBase64String = async (url: string): Promise<string> => {\r\n  console.log(\"In convertImageStart\");\r\n  var img = new Image();\r\n  img.crossOrigin = 'Anonymous'\r\n  var dataUrl;\r\n  return new Promise(function (resolve, reject) {\r\n    // Setting the img.src will call img.onload when the src is loaded\r\n    console.log(\"URL1: \", url);\r\n    // Pull Width/Height from URL and store in img objec\r\n    img.src = url;// url is the img src\r\n    console.log(\"URL2: \", url);\r\n\r\n    img.onload = () => {\r\n      var canvas = document.createElement('canvas');\r\n      console.log(`canvas width: ${canvas.width}`);\r\n      canvas.width = img.width;\r\n      canvas.height = img.height;\r\n      console.log(\"IMGWIDTH:\", img.width, \"IMGHEIGHT:\", img.height);\r\n\r\n      // Get a canvas reference to draw to the canvas\r\n      var context: CanvasRenderingContext2D = canvas.getContext('2d')!;\r\n      console.log(`canvas width: ${canvas.width}`);\r\n      // Draw image to the canvas centered\r\n      // https://stackoverflow.com/questions/16317971/draw-images-on-in-the-middle-of-a-canvas\r\n      context.drawImage(img, canvas.width / 2 - img.width / 2,\r\n        canvas.height / 2 - img.height / 2);\r\n      // Return a data URI containing a representation of the image in jpg format\r\n      dataUrl = canvas.toDataURL('image/jpg');\r\n      console.log(\"Images loaded helper.js resolved\", typeof dataUrl);\r\n      resolve(dataUrl);\r\n    };\r\n\r\n    // reject promis onError\r\n    img.onerror = (err) => {\r\n      reject(\"image rejected in BASE64 Conversion:\"+ err);\r\n    };\r\n  }); // promise\r\n};// convertImage\r\n\r\n// Check whether the file type of the input file is valid\r\nlet isFileTypeValid = (file: File, fileTypes: string[]) => {\r\n  if (file) {\r\n    console.log(\"FILEType :\", file.type);\r\n    for (var i = 0; i < fileTypes.length; i++) {\r\n      if (file.type === fileTypes[i]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  else\r\n    return false;\r\n};\r\n\r\nexport {\r\n  setImageParagraphTag, removeItem, removeCanvas, setFileMessage, getFormattedFileSize, appendImage, checkImageDimensions, setFileSize, isFileSelected, imgOnError, displayImage,\r\n  loadImage, convertImageFromUrlToBase64String, isFileTypeValid, returnFileSize\r\n};","import React, { Component, FormEvent } from \"react\";\r\n// Import module to get/set variables from/in the LocalStorage\r\nimport * as authenticationStore from '../../utils/authenticationStore';\r\n\r\n// Import Components\r\nimport ProductInsertForm from \"../../forms/product/insert\";\r\nimport credentialStore from '../../utils/credentialStore';\r\nimport { insertProduct, stageDBAction } from '../../utils/productStore';\r\nimport * as imgHelper from './utils/helpers';\r\nimport { insertCloudinary } from '../../utils/productStore';\r\nimport { ChangeEvent } from \"react\";\r\nimport { Moment } from \"moment\";\r\nimport './styles.css';\r\n\r\nclass ProductInsertContainer extends Component<ProductInserContainerPropType, ProductInserContainerStateType>  {\r\n    cloudinaryURL = '/api/products/cloudinary/insert/';\r\n    refreshURL = '/api/user/login/refresh';\r\n    baseURL = '/api/products/product/insert/';\r\n    constructor(props: ProductInserContainerPropType) {\r\n        super(props);\r\n        this.state = {\r\n            productId: '',\r\n            productName: '',\r\n            productValue: '',\r\n            productImage: '',\r\n            placeholderName: '',\r\n            placeholderValue: '',\r\n            productsList: [],\r\n            authToken: '',\r\n            refresh_token: '',\r\n            email: '',\r\n            hasAccessTokenExpired: false,\r\n            isUserAuthorized: true,\r\n            message: '',\r\n            // Image imputs for Image Uploader component\r\n            image: {\r\n                base64Str: '',\r\n                cloudImageUrl: '',\r\n                cloudImagePublicId: '',\r\n                input: '',\r\n                file: '',\r\n                submitBtnId: \"image-input\",\r\n                fileTypes: [\r\n                    'image/jpeg',\r\n                    'image/jpg',\r\n                    'image/png'\r\n                ],\r\n                imageName: '',\r\n                imageWidth: 0,\r\n                imageHeight: 0,\r\n                imageSize: 0,\r\n                imageSrc: '',\r\n                imageMin: 200,\r\n                imageMax: 450,\r\n                maxMB: 2,\r\n                errorTag: 'file-msg',\r\n                invalidMsg: 'Not a valid file.',\r\n                unacceptedMsg: 'File not accepted.',\r\n                acceptedMsg: 'File accepted.',\r\n                fileMsgElement: '',\r\n                previewCanvasElement: '',\r\n                submitImageElement: '',\r\n                className: \"customFileInput\",\r\n                type: \"file\"\r\n            }\r\n\r\n        };\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.insertClickHandler = this.insertClickHandler.bind(this);\r\n        // @ts-ignore\r\n        this.insertProduct = insertProduct.bind(this);\r\n        this.productImageClickHandler = this.productImageClickHandler.bind(this);\r\n        this.submitImageHandler = this.submitImageHandler.bind(this);\r\n        this.selectImage = this.selectImage.bind(this);\r\n        this.setImageProp = this.setImageProp.bind(this);\r\n        this.message = this.message.bind(this);\r\n    } // constructor\r\n\r\n    setElementRef() {\r\n        this.setImageProp(\"fileMsgElement\", document.getElementById(this.state.image.errorTag));\r\n\r\n        console.log(\"ImageUploaderStateMounted\", this.state.image.imageMin);\r\n    }\r\n\r\n    //  Select an image\r\n    /************/\r\n    async selectImage(event: FormEvent<HTMLInputElement>, imageSelectRef: ImageUploadRefObject<HTMLInputElement>, previewCanvasRef: ImageUploadRefObject<HTMLDivElement>) {\r\n        // event.preventDefault();\r\n        event.persist();\r\n        console.log(\"EVENT:\", event);\r\n        console.log(\"IMGREF:\", imageSelectRef, \"; PVCanvasRef:\", previewCanvasRef);\r\n        console.log(\"SELECTIMAGE imageSelectRef:\", imageSelectRef?.current, \"previewCanvasRef:\", previewCanvasRef?.current, \"imageSelectRef1:\", typeof imageSelectRef);\r\n\r\n        // Get Reference to the canvas\r\n        let previewCanvasElement = previewCanvasRef?.current;\r\n        let inputElement = imageSelectRef?.current;\r\n        \r\n        this.setImageProp(\"previewCanvasElement\", previewCanvasElement);\r\n        this.setImageProp(\"input\", inputElement);\r\n\r\n        // Create copy of image props\r\n        let image = this.state.image;\r\n        console.log(\"In Contanier: imagebtn:\", image.submitBtnId, \"file:\", image.input, \"file2\", image.file);\r\n\r\n        // 12/12: Handle image name display;\r\n        /*******************************************/\r\n        await this.productImageClickHandler(event);\r\n        /*******************************************/\r\n\r\n        // copy image.input  to state.image\r\n        this.setState({ image: image });\r\n\r\n        // this.setImageProp(\"input\", image.file);\r\n        console.log(\"FILE INPUT: \", this.state.image.input);\r\n\r\n        this.setImageProp(\"file\", this.state.image.file);\r\n\r\n        let img;\r\n\r\n        if (imgHelper.isFileSelected(image.input) && imgHelper.isFileTypeValid(image.file, image.fileTypes)) {\r\n            var blob = image.input.files[0];\r\n\r\n            // save image back to prop\r\n            img = new Image();\r\n            try {\r\n                const loadedImgResult: ImagePropsType = await imgHelper.loadImage(img, blob);\r\n                console.log(\"loadedImgResult\", loadedImgResult);\r\n\r\n                // Set variables\r\n                img.src = loadedImgResult.imageSrc.toString();\r\n                this.setImageProp(\"imageSrc\", loadedImgResult.imageSrc);\r\n                this.setImageProp(\"imageWidth\", loadedImgResult.imageWidth);\r\n                this.setImageProp(\"imageHeight\", loadedImgResult.imageHeight);\r\n                this.setImageProp(\"imageSize\", loadedImgResult.imageSize);\r\n                this.setImageProp(\"imageName\", loadedImgResult.imageName);\r\n\r\n                console.log(\"DISPLAYIMAGE PREVIEW CANVAS:\", image.previewCanvasElement, \"*\", \"state:\", this.state.image.previewCanvasElement);\r\n\r\n                // remove OL tag\r\n                imgHelper.removeItem('ol', image.previewCanvasElement);\r\n                var areDimensionsValid = imgHelper.checkImageDimensions(image.imageWidth, image.imageMin, image.imageHeight, image.imageMax);\r\n                console.log(\"AREDIMENSIONSVALID:\", areDimensionsValid);\r\n\r\n                this.setImageProp(\"imageSize\", imgHelper.setFileSize(areDimensionsValid, image.errorTag, image.acceptedMsg, image.unacceptedMsg, image.imageName, image.imageSize, image.input.files, image.previewCanvasElement, image.imageWidth, image.imageHeight));\r\n\r\n                // Create Canvas and load image\r\n                imgHelper.displayImage(img, areDimensionsValid, image.previewCanvasElement);\r\n\r\n                //12/12/09: set new image prop values\r\n                this.setState({ image });\r\n            }\r\n            catch (err) {\r\n                console.log(\"failure \", err);\r\n                imgHelper.imgOnError(image.previewCanvasElement, image.imageWidth, image.imageMax, image.imageHeight, image.errorTag, image.invalidMsg);\r\n            }\r\n            // console.log(\"IMAGE NAME\", this.imageName);\r\n        }// if\r\n        else {\r\n            imgHelper.removeCanvas(image.previewCanvasElement);\r\n            imgHelper.setFileMessage(image.errorTag, image.unacceptedMsg);\r\n        }\r\n    }\r\n    /************/\r\n    setImageProp(key: string, value: HTMLElement | null | string | number) {\r\n        // Make a copy of props\r\n        var image = this.state.image;\r\n        console.log(\"setImageProp\", image, \"Key\", key, \"Value\", value);\r\n        // update props\r\n        image[key] = value;\r\n\r\n        // PROBLEM\r\n        /*******************/\r\n        console.log(\"image: \", image);\r\n        /*******************/\r\n        // Update state with new value\r\n        this.setState({ image: image });\r\n\r\n        console.log(\"Key:\", [key]);\r\n        console.log(\"Value:\", value);\r\n        console.log(`Image ${key}:`, this.state.image[key]);\r\n    }\r\n    async submitImageHandler(event: FormEvent<HTMLFormElement>, img: any) {\r\n        // Don't refresh the page!\r\n        // event.preventDefault();\r\n        event.persist();\r\n        console.log(\"IN SUBMITIMAGEHANDLER\");\r\n\r\n        //local copy of image\r\n        let image;\r\n        let {\r\n            input,\r\n            imageWidth,\r\n            imageHeight,\r\n            imageMin,\r\n            imageMax,\r\n            imageName,\r\n            imageSize,\r\n            maxMB,\r\n            errorTag,\r\n            acceptedMsg,\r\n            unacceptedMsg,\r\n            fileMsgElement,\r\n            previewCanvasElement,\r\n            imageSrc } = img;\r\n\r\n\r\n        // set img props\r\n        this.setState({\r\n            image: img\r\n        });\r\n        // if file selected\r\n        if (imgHelper.isFileSelected(input)) {\r\n            console.log(\"ActionHelper file selected\");\r\n\r\n            // checks image dimension and file size\r\n            let isInputValid = false\r\n\r\n            // Check Image Dimensions\r\n            if (imageWidth >= imageMin && imageWidth <= imageMax && imageHeight >= imageMin && imageHeight <= imageMax) {\r\n                isInputValid = true\r\n            } else {\r\n                isInputValid = false\r\n            }\r\n\r\n            // Check Image Size\r\n            console.log(\"FileName:\", imageName);\r\n            console.log(\"FileSize:\", imageSize);\r\n\r\n            // Get Unit of Measure\r\n            var unit = imageSize.slice(-2).toLowerCase();\r\n\r\n            // Get FileSize\r\n            var fileSizeNumber = imageSize.replace(/[^\\d.-]/g, '');\r\n\r\n            console.log(\"FILESIZE = \" + fileSizeNumber + \", Unit = \" + unit);\r\n            console.log(\"Max File Size:\", maxMB);\r\n\r\n            if (unit === 'mb') {\r\n                console.log(\"max file size:\", maxMB, \", actual file size:\", fileSizeNumber);\r\n                if (fileSizeNumber <= maxMB) {\r\n                    isInputValid = true\r\n                } else {\r\n                    isInputValid = false\r\n                }\r\n            }\r\n            else if (unit === 'kb') {\r\n                if (fileSizeNumber <= maxMB * 1000) {\r\n                    isInputValid = true\r\n                } else {\r\n                    isInputValid = false\r\n                }\r\n            }\r\n\r\n            // If input is not valid do not accept image and do nothing\r\n            console.log(\"Is Input File Valid:\", isInputValid);\r\n            if (!isInputValid) {\r\n                console.log(\"image not acceptable\");\r\n                if (fileMsgElement) {\r\n                    imgHelper.setFileMessage(errorTag, unacceptedMsg);\r\n                } else {\r\n                    imgHelper.setFileMessage(errorTag, acceptedMsg);\r\n                }\r\n            } else {\r\n                console.log(\"Image is acceptable\");\r\n                var imageUrl = imageSrc;\r\n\r\n                console.log(\"Call convertImageFromURLTOBase\");\r\n                /******************************************************    Converts image to base64String\r\n                ****************************************************/\r\n                let base64StringImage: string = await imgHelper.convertImageFromUrlToBase64String(imageUrl);\r\n                console.log(`***Base64StringImage: ${typeof base64StringImage}`);\r\n                /**************************\r\n                 * Code Burst onChange Event\r\n                 * upload to Cloudinary\r\n                 **************************/\r\n                console.log(\"Calling productStore.insertCloudinary\");\r\n                let cloudinaryResult = await insertCloudinary(this.cloudinaryURL, base64StringImage);\r\n\r\n                // this.setState({cloudImageUrl: cloudinaryResult.url});\r\n                /**************************/\r\n                console.log(\"Converted Image: \", base64StringImage);\r\n                // copy image state to local variable\r\n                image = this.state.image;\r\n                //update cloudImageUrl\r\n                console.log(\"CLOUD URL:\", cloudinaryResult?.data.url);\r\n                image.cloudImageUrl = cloudinaryResult?.data.url;\r\n                console.log(\"CLOUD IMAGEURL:\", image.cloudImageUrl);\r\n                image.cloudImagePublicId = cloudinaryResult?.data.public_id;\r\n\r\n                /****************************/\r\n                // Save image.cloudImagePublicId to db, where productImage == image.cloudImageURL\r\n                /****************************/\r\n                console.log(\"public_id\", image.cloudImagePublicId);\r\n                /*************************** */\r\n\r\n\r\n                // update base64Str\r\n                image.base64Str = base64StringImage;\r\n                // update image state variable\r\n                console.log(\"Image:\", image);\r\n                this.setState({ image: image });\r\n                console.log(\"State image: \", this.state.image, \"cloud image url\", this.state.image.cloudImageUrl);\r\n            }// else\r\n            // remove canvas after submit\r\n            imgHelper.removeCanvas(previewCanvasElement);\r\n            // var image = this.state.image;\r\n\r\n            /*****************************/\r\n            // Reset image Name\r\n            /*******************************/\r\n  \r\n            await this.productImageClickHandler(event);\r\n        } // if file selected\r\n\r\n        console.log(\"SubmitImageHandler: file NOT selected\");\r\n    }// submit-Image on click\r\n\r\n    /***************************************************/\r\n    async setStateVariables(access_token: string, refresh_token: string, expiration: Moment | null, email: string, message: string) {\r\n        /************************************************\r\n         * SET State VARIABLES FROM LocalStorage\r\n         ************************************************/\r\n        let authToken = \"Bearer \" + access_token;\r\n\r\n        console.log(\"Auth token\", authToken);\r\n        this.setState({ authToken });\r\n\r\n        console.log(\"Refresh token\", refresh_token);\r\n        this.setState({ refresh_token });\r\n\r\n        this.setState({ email });\r\n\r\n        let hasAccessTokenExpired = await authenticationStore.hasAccessTokenExpired();\r\n\r\n        console.log(\"Expired?\", hasAccessTokenExpired);\r\n        this.setState({ hasAccessTokenExpired });\r\n\r\n        this.setState({ isUserAuthorized: true });\r\n\r\n        this.setState({ message });\r\n        /************************************************/\r\n    }\r\n\r\n    resetStateVariables() {\r\n        this.setState({ authToken: '' });\r\n        this.setState({ access_token: '' });\r\n        this.setState({ refresh_token: '' });\r\n        this.setState({ email: '' });\r\n        this.setState({ hasAccessTokenExpired: false });\r\n    }\r\n\r\n    componentDidMount({ location } = this.props) {\r\n        this.setElementRef();\r\n        if (location.state) {\r\n            /********************************************\r\n             * Pass product info from click button\r\n             * *****************************************/\r\n            const { name, value } = location.state;\r\n            var image = this.state.image;\r\n            image.imageName = \"Choose File\";\r\n            this.setState({\r\n                placeholderName: name,\r\n                placeholderValue: `$ ${value}`,\r\n                image: image\r\n            });\r\n        }\r\n    }\r\n\r\n    changeHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        // First disable default behavior\r\n        event.preventDefault();\r\n        const {\r\n            name,\r\n            value\r\n        } = event.target;\r\n\r\n        if (name && typeof value === 'string') {\r\n            this.setState(\r\n                {\r\n                    // set name computed property to the name of the element clicked, \r\n                    // and set the corresponding state property to the element's value\r\n                    [name]: value,\r\n                }\r\n            ); \r\n        }\r\n    } // changeHandler\r\n\r\n    async insertClickHandler(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        console.log(\"PRODUCTINSERTCONTAINER: insertCLICKHANDLER CLICKED\");\r\n        try {\r\n\r\n            let name = this.state.productName;\r\n            let value = this.state.productValue;\r\n\r\n            /************************************************************************\r\n             * Reset state variables representing view input after submit\r\n             * **********************************************************************/\r\n            this.setState({ productName: '' });\r\n            this.setState({ productValue: '' });\r\n            this.setState({ placeholderName: '' });\r\n            this.setState({ placeholderValue: '' });\r\n\r\n            /************************************\r\n             * STEP1 of 8: Get Data out of local Storage\r\n             ************************************/\r\n            let { access_token, refresh_token, expiration, email } = await authenticationStore.getLocalStorage();\r\n            /*************************************/\r\n\r\n            /******************************************\r\n             * STEP2 of 8: SET STATE VARIABLES With data returned from localStorage\r\n             *******************************/\r\n            await this.setStateVariables(access_token, refresh_token, expiration, email, this.state.message);\r\n\r\n            console.log(\"hasAccessTokenExpired\", this.state.hasAccessTokenExpired);\r\n            /******************************************\r\n             * STEP3 of 8: Determine if Token Refresh is needed\r\n             *******************************/\r\n            if (this.state.hasAccessTokenExpired) {\r\n                console.log(\"ProductInsertContainer refresh-token: \", this.state.refresh_token);\r\n\r\n                /***************************************\r\n                 * STEP4 of 8: RefreshTokens: If tokens have expired\r\n                 * **************************************/\r\n                try {\r\n                    /*********************************\r\n                     * STEP5 of 8: Call credendentialStore to get refreshTokens and all other \r\n                     * credentials from the API, AND SET LOCAL STORAGE WITH RESULTS\r\n                     *********************************/\r\n                    let newCredentials = await credentialStore.setLocalCredWNewTokens(this.state.refresh_token, this.refreshURL, this.state.authToken, this.state.email, this.state.hasAccessTokenExpired);\r\n                    /**************************/\r\n                    console.log(\"newCredentials STATUS\", newCredentials);\r\n                    if (newCredentials) {\r\n                        console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED newCredentials:\", newCredentials);\r\n\r\n                        /*********************************************\r\n                         * STEP6 of 8: SET STATE VARIABLES RECEIVED FROM CREDENTIAL STORE\r\n                         ********************************************/\r\n                        let { access_token,\r\n                            refresh_token,\r\n                            expiration,\r\n                            email,\r\n                            message } = newCredentials;\r\n\r\n                        // do something with response\r\n                        console.log(\"ProductionInsert:response returned\", newCredentials);\r\n\r\n                        this.setStateVariables(access_token, refresh_token, expiration, email, message);\r\n\r\n                        console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\r\n                        /********************************************/\r\n                    }\r\n                    else {\r\n                        console.log(\"I NEVER MADE IT TO IF\");\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // Clear all localStorage, due to invalid Refresh token\r\n                    console.log(\"ERRORED OUT IN Insert CATCH\");\r\n                    if (err.response.status === 401) {\r\n                        console.log('401 status received in ProductInsert');\r\n                        /***********************************************\r\n                         * Reset Local Storage Variables\r\n                         ************************************************/\r\n                        await authenticationStore.resetLocalStorage();\r\n\r\n                        /*********************************************\r\n                         * SET STATE VARIABLES FROM Local Storage\r\n                         *********************************************/\r\n                        await this.resetStateVariables();\r\n                        console.log('err', err.response);\r\n                        console.log('error status code', err.response.status);\r\n                        this.setState({ isUserAuthorized: false });\r\n                        console.log(\"isUserAuthorised = \", this.state.isUserAuthorized);\r\n                        this.setState({ message: err.response.data.message });\r\n                    } // if\r\n                } // catch\r\n            }\r\n            console.log(\"AUTHORIZED?:\", this.state.isUserAuthorized);\r\n            if (this.state.isUserAuthorized) {\r\n\r\n                // 5/17/2020:\r\n                console.log('ProductInsertContainer:refresh_token = ', this.state.refresh_token);\r\n\r\n                /**************************************\r\n                * Step 7 of 8: ConvertImage to base64:\r\n                * *************************************/\r\n                // 12/22/2019: CONVERT IMAGE TO BASEURL\r\n                /**************************************/\r\n                await this.submitImageHandler(event, this.state.image);\r\n                // console.log(\"base64 still here:\", this.state.image.base64Str);\r\n                console.log(\"In stage\");\r\n                /***********************************************\r\n                 * Step8 of 8: PERFORM A DB ACTION IF TOKENS R VALID \r\n                 **********************************************/\r\n                const dbActionResults = await stageDBAction(\r\n                    this.state.productId,\r\n                    this.state.email,\r\n                    name,\r\n                    value,\r\n                    this.state.image,\r\n                    this.baseURL,\r\n                    this.state.refresh_token,\r\n                    this.state.authToken,\r\n                    this.state.hasAccessTokenExpired,\r\n                    insertProduct);\r\n                console.log(\"Out stage\");\r\n                console.log(\"ProductInsertContainer:\", dbActionResults);\r\n                /***************************************************\r\n                 * Set State with the results of calling the DB Action\r\n                 ***************************************************/\r\n                this.setState(dbActionResults);\r\n            } // if\r\n\r\n        } // try\r\n        catch (err) {\r\n            console.log(err);\r\n            this.setState({\r\n                message: err\r\n            });\r\n        }\r\n    }\r\n\r\n    // Handles changing input text when an image is clicked\r\n    productImageClickHandler(event: FormEvent) {\r\n        // event.preventDefault();\r\n        event.persist();\r\n        let element = document.getElementById(this.state.image.submitBtnId) as HTMLInputElement;\r\n\r\n        // 12/12\r\n        let imageSelectorLabel = document.querySelector(\"#img-select-label\")\r\n        let labelElement;\r\n        let labelValue;\r\n        let imgInputInfo;\r\n        console.log(\"QUERY SELECTOR\", imageSelectorLabel?.innerHTML);\r\n\r\n        console.log(\"Image Selector Element\", element);\r\n        if (element.labels && element.files) {\r\n            console.log(\"ELEMENT:\", element?.files);\r\n            labelElement = element?.labels[0];\r\n            labelValue = labelElement?.textContent;\r\n            imgInputInfo = element?.files[0];\r\n        }\r\n        \r\n        let image;\r\n\r\n        // Upload Image has NO target, so set the labelValue to choose file\r\n        if (!event.target) {\r\n            // copy and update image\r\n            image = this.state.image;\r\n            // update imageName for no event\r\n            image.imageName = \"No File Chosen\";\r\n            console.log(\"ELSE: IMAGENAME:\", image.imageName);\r\n            this.setState({\r\n                image: image\r\n            });\r\n            labelValue = this.state.image.imageName;\r\n            console.log(\"LabelElement:\", labelElement);\r\n            console.log(\"LabelValue:\", labelValue);\r\n            // console.log(\"ProductImageClickHandler: FILENAME:\", fileName);\r\n        }\r\n        // If File selected, Set File and FileName\r\n        if (imgInputInfo && element.files) {\r\n            console.log(\"IMG Select EVENT INFO\", event.target);\r\n            const fileName = element?.files[0].name.toString();\r\n\r\n            let labelValue = labelElement?.textContent;\r\n            console.log(\"PRODUCTIMAGECLICKHANDLER:\", element?.baseURI);\r\n            console.log(\"LabelValue:\", labelValue);\r\n            console.log(\"FILENAME:\", fileName);\r\n\r\n            // copy and update image\r\n            image = this.state.image;\r\n            image.imageName = fileName;\r\n            console.log(\"IF: IMAGENAME:\", image.imageName);\r\n\r\n            // 12/07/2019\r\n            image.file = imgInputInfo;\r\n            console.log(\"ProductImageClickHandler file:\", this.state.image.file);\r\n            this.setState({\r\n                image: image\r\n            });\r\n            console.log(\"ProductImageClickHandler Image Path:\", imgInputInfo);\r\n            console.log(\"ProductImageName:\", this.state.image.imageName);\r\n            labelValue = this.state.image.imageName;\r\n            console.log(\"labelElement:\", labelElement);\r\n            console.log(\"labelValue:\", labelValue);\r\n        }\r\n        // If no file chosen go here\r\n        else {\r\n            image = this.state.image;\r\n            image.imageName = \"No File Chosen\";\r\n            console.log(\"ELSE: IMAGENAME:\", image.imageName);\r\n            this.setImageProp(\r\n                image, image\r\n            );\r\n            labelValue = this.state.imageName;\r\n        }\r\n    }\r\n\r\n    message = () => {\r\n        console.log(\"Message method called\");\r\n    }\r\n    render() {\r\n        if (this.state.image) {\r\n            return (\r\n\r\n                <React.Fragment>\r\n                    <ProductInsertForm\r\n                        changeHandler={this.changeHandler}\r\n                        insertClickHandler={this.insertClickHandler}\r\n                        productImageName={this.state.image.imageName}\r\n                        productName={this.state.productName}\r\n                        productValue={this.state.productValue}\r\n                        productImage={this.state.productImage}\r\n                        placeholderName={this.state.placeholderName}\r\n                        placeholderValue={this.state.placeholderValue}\r\n                        message={this.state.message}\r\n                        image={this.state.image}\r\n                        submitImageHandler={this.submitImageHandler}\r\n                        selectImage={this.selectImage}\r\n                        setImageProp={this.setImageProp}\r\n                    />\r\n                </React.Fragment>\r\n            )\r\n        }\r\n    }\r\n} // class\r\n\r\nexport default ProductInsertContainer;","import \"./style.css\";\r\nimport { Link } from 'react-router-dom';\r\nimport Can from \"components/can\";\r\n\r\nfunction transitionImg(props: TransitionImgPropType) {\r\n  console.log(\"IMG Props:\", props);\r\n  const { name, value } = props.to.state;\r\n  let loggedOut = props.loggedOut;\r\n  let role = props.userRole;\r\n  const imgWithLink = (<Link\r\n    to={props.to}\r\n    className=\"view overlay zoom rounded\">\r\n    <img\r\n      className=\"card-img-top image-rules img-fluid\"\r\n      src={props.productImage}\r\n      alt={`product ${props.id}`} \r\n    />\r\n  </Link>);\r\n\r\n  const imgWithoutLink = (<a className=\"view overlay zoom rounded\" href=\"#\"><img\r\n    className=\"card-img-top image-rules img-fluid\"\r\n    src={props.productImage}\r\n    alt={`product ${props.id}`}\r\n  /></a>);\r\n  return (\r\n    <>\r\n      <div className=\"card-wrapper inline-block\">\r\n        <div className=\"card card-rotating\">\r\n          <Can\r\n            role={role}\r\n            perform=\"products:view\"\r\n            yes={\r\n              () => (\r\n                <>\r\n                  {!loggedOut ? imgWithLink : imgWithoutLink}\r\n                </>\r\n              )}\r\n            no={() =>\r\n              <>\r\n                {imgWithoutLink}\r\n              </>}\r\n          />\r\n          <a>\r\n            <div className=\"mask rgba-white-slight\"></div>\r\n          </a>\r\n          {/* Card Content */}\r\n          <div className=\"card-body card-body-cascade text-center\">\r\n\r\n            {/* Title */}\r\n            <h4 className=\"card-title\"><strong>{name}</strong></h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default transitionImg;","import ProductViewImg from './transition-img';\r\n\r\nlet ProductImageViewBtn = (props: ProdImgViewItemProps) => {\r\n  return (\r\n    <ProductViewImg\r\n      to={\r\n        {\r\n          pathname: `${props.viewPath}${props.id}`,\r\n          state: {\r\n            name: props.name,\r\n            value: props.value,\r\n            id: props.id,\r\n            userRole: props.userRole\r\n          }\r\n        }\r\n      }\r\n      productImage={props.productImage}\r\n      id={props.id}\r\n      userRole={props.userRole}\r\n      loggedOut={props.loggedOut}\r\n      />\r\n  );\r\n};\r\n\r\nexport default ProductImageViewBtn;","import ProductImageViewBtn from \"components/buttons/product-image-view-btn\";\r\n\r\nlet ProductListItem = (props) => {\r\n  let name = props.name;\r\n  let value = props.value;\r\n  let id = props.id;\r\n  let regex = /['\"']+/g;\r\n  let productImage = props.productImage.replace(regex, \"\");\r\n  let userRole = props.role;\r\n  console.log(\"PRODUCTLISTITEM-USERRole:\", userRole);\r\n\r\n  const viewPath = \"/products/product/\";\r\n  let loggedOut = props.loggedOut;\r\n  console.log(\"User loggedOut:\", loggedOut, \" role:\", userRole);\r\n  return (\r\n    <>\r\n      <ProductImageViewBtn\r\n        productImage={productImage}\r\n        id={id}\r\n        userRole={userRole}\r\n        loggedOut={loggedOut}\r\n        value={value}\r\n        name={name}\r\n        viewPath={viewPath}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductListItem;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\r\nimport './styles.css';\r\n\r\nlet UploadSpinner = () => {\r\n    /* jshint ignore:start */\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"fas fa-spin center\">\r\n                <FontAwesomeIcon \r\n                icon={faSpinner} size='5x' \r\n                color='#3B5998' \r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n    /* jshint ignore:end */\r\n};\r\n\r\nexport default UploadSpinner;\r\n","import React, { Component } from \"react\";\r\nimport { urlBtnUpdates } from \"utils/urlBtnUpdates\";\r\n// Import Components\r\nimport ProductsListItem from \"../components/products/list/index\";\r\nimport UploadSpinner from '../components/upload-spinner';\r\n// Import Server-Side Utilities:\r\nimport { api as API } from '../utils/API';\r\n//import utils\r\nimport * as auth from '../utils/authenticationStore';\r\n\r\nclass ProductsListContainer extends Component<ProductsPropType>{\r\n\r\n    baseURL = '/api/products';\r\n\r\n    _productsListData: ProductDataType[];\r\n    state: ProductListStateType;\r\n    constructor(props: ProductsPropType) {\r\n        super(props);\r\n\r\n        /******************************************\r\n                 STEP2a: SET Base URLs\r\n        ******************************************/\r\n        this._productsListData = [];\r\n        this.state = {\r\n            productsList: [],\r\n            productListData: [],\r\n            access_token: '',\r\n            authToken: '',\r\n            refresh_token: '',\r\n            expiration: '',\r\n            email: '',\r\n            hasAccessTokenExpired: false,\r\n            isUserAuthorized: true,\r\n            loading: false,\r\n            message: '',\r\n            role: this.props.role,\r\n            loggedOut: this.props.loggedOut,\r\n        };\r\n    } // constructor\r\n\r\n    resetStateVariables() {\r\n        this.setState({ authToken: '' });\r\n        this.setState({ access_token: '' });\r\n        this.setState({ refresh_token: '' });\r\n        this.setState({ email: '' });\r\n        this.setState({ hasAccessTokenExpired: false });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Execute getProducts\r\n        this.returnProducts(this.baseURL);\r\n        this.setState({ refreshed: false });\r\n        urlBtnUpdates();\r\n    } //componentdidmount\r\n\r\n\r\n    /**\r\n     * Returns products, or set status to loading\r\n     * @param baseURL \r\n     */\r\n    async returnProducts(baseURL: string) {\r\n        /**********************************/\r\n        // 05/24/2020 Start Loading Spinner\r\n        /**********************************/\r\n        this.setState({ loading: true });\r\n        /**********************************/\r\n        try {\r\n            let res = await API.getProducts(baseURL);\r\n            console.log(\"**RES: 1rst\", res);\r\n            if (res) {\r\n                this.productsListData = res.data.products;\r\n                this.setState({ loading: false });\r\n            }\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    get productsListData(): ProductDataType[] {\r\n        return this._productsListData;\r\n    }\r\n    /******************************\r\n     * 1/8/19: setUser HERE\r\n     ******************************/\r\n    set productsListData(data) {\r\n        auth.getLocalStorage().then((curCredentials: any) => { this.setState(curCredentials) });\r\n\r\n        console.log(\"----Data\", data);\r\n        this._productsListData = data;\r\n\r\n        this.setState({ productsListData: this._productsListData });\r\n\r\n    } // setProductList\r\n\r\n    \r\n    /**\r\n     * Loop though each productItem \r\n     * list and save each to the  \r\n     * productList array\r\n     * @returns  productList\r\n     */\r\n    get products() {\r\n        return this.productsListData?.map((product: ProductDataType) => {\r\n            console.log(\"ProductListContainer: Product:\", product);\r\n            return (\r\n                <ProductsListItem\r\n                    role={this.state.role}\r\n                    key={product._id}\r\n                    id={product._id}\r\n                    name={product.name}\r\n                    value={product.value}\r\n                    productImage={product.productImage}\r\n                    loggedOut={this.props.loggedOut}\r\n                />\r\n            )\r\n        });\r\n    }\r\n\r\n    // /**\r\n    //  * Filters click handler - Filters out the item clicked\r\n    //  * @param event \r\n    //  */\r\n    // filterClickHandler(event: React.MouseEvent<HTMLButtonElement>) {\r\n    //     event.preventDefault();\r\n    //     const event_id = (event.target as HTMLButtonElement).id;\r\n    //     console.log('IN Delete PRODUCT CALL', event_id);\r\n\r\n    //     let filteredList: ProductDataType[] = this.productsListData.filter((product: ProductDataType) => {\r\n    //         return (product._id.toString() !== event_id.toString());\r\n    //     })\r\n    //         .map((product: ProductDataType) => {\r\n    //             let data = {\r\n    //                 name: product.name,\r\n    //                 value: product.value,\r\n    //                 productImage: product.productImage,\r\n    //                 _id: product._id,\r\n    //                 key: product._id,\r\n    //                 event: event\r\n    //             };\r\n    //             return data;\r\n    //         });\r\n\r\n    //     this.productsListData = filteredList;\r\n\r\n    // }\r\n\r\n    /**\r\n     * Renders products list container\r\n     * @returns  \r\n     */\r\n    render() {\r\n        /* In order to stop the component from\r\n            rendering before the user's role has been loaded\r\n            a loading state property was added.  When the loading state changes, the page will be rerendered with the correct usr role. */\r\n        if (this.state.loading === true) {\r\n            console.log('loading...');\r\n            return <UploadSpinner />\r\n        } \r\n            var userRole = this.state.role;\r\n            console.log(\"ProductListContainer: userRole =\", userRole, \"LoggedOut:\", this.state.loggedOut);\r\n            console.log(\"****Setting productListData in ProductsListContainer: Render-285:\");\r\n\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"container-fluid text-center\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col\">\r\n                                <br></br>\r\n                                {this.productsListData ? this.products : ''}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n    }\r\n} // class\r\n\r\nexport default ProductsListContainer;","import { MDBContainer, MDBRow, MDBCol, MDBBtn } from \"mdbreact\";\r\nimport Text from \"components/inputs/text\";\r\n\r\nlet ProductUpdateForm = (props: UpdateFormPropType) => {\r\n    const response = props.message;\r\n    const message = (response === 'Request failed with status code 401') ? 'Please login' : response;\r\n    return (\r\n        <main role=\"main\" className=\"form-align flex-shrink-0\">\r\n            <MDBContainer>\r\n                <MDBRow>\r\n                    <MDBCol size=\"12\" middle={true}>\r\n                        <form>\r\n                            <h1 className=\"mt-5\">Product Update Form</h1>\r\n                            <br />\r\n                            {/* name */}\r\n                            <div className=\"form-group\">\r\n                                {/* name */}\r\n                                <Text\r\n                                    htmlFor={\"formGroupEmail\"}\r\n                                    className={\"form-control product-name\"}\r\n                                    id={\"formGroupName\"}\r\n                                    placeholder={props.placeholderName}\r\n                                    label={\"Name\"}\r\n                                    name={\"productName\"}\r\n                                    value={props.productName}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                {/* price */}\r\n                                <Text\r\n                                    htmlFor={\"formGroupName\"}\r\n                                    className={\"form-control\"}\r\n                                    id={\"formGroupValue\"}\r\n                                    placeholder={props.placeholderValue}\r\n                                    name={\"productValue\"}\r\n                                    label={\"Price\"}\r\n                                    value={props.productValue}\r\n                                    changeHandler={props.changeHandler}\r\n                                />\r\n                                {/* button */}\r\n                                <br />\r\n                                <MDBRow>\r\n                                    <MDBCol>\r\n                                        <label htmlFor=\"formGroupName\" />\r\n                                        <MDBBtn\r\n                                            className={\"mx-0\"} color=\"blue-grey\"\r\n                                            onClick={props.updateClickHandler}\r\n                                        >\r\n                                            Submit\r\n                                        </MDBBtn>\r\n                                        <h3 className={\"mt-5\"}>{message}</h3>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </div>\r\n                        </form>\r\n                    </MDBCol>\r\n                </MDBRow>\r\n            </MDBContainer>\r\n        </main >\r\n    )\r\n};\r\n\r\nexport default ProductUpdateForm;","import React, { ChangeEvent, Component } from \"react\";\r\n\r\n// Import module to get/set variables from/in the LocalStorage\r\nimport * as auth from '../utils/authenticationStore';\r\n\r\n// Import Components\r\nimport UpdateForm from \"../forms/product/update\";\r\nimport credentialStore from '../utils/credentialStore';\r\nimport { updateProduct, performDBAction } from '../utils/productStore';\r\nimport { Moment } from \"moment\";\r\nimport { urlBtnUpdates } from \"utils/urlBtnUpdates\";\r\nimport { getProductDetails } from '../utils/productStore';\r\n\r\nclass ProductUpdateContainer extends Component<ProductUpdatePropType> {\r\n    refreshURL: string;\r\n    baseURL: string;\r\n    _productItemComponent!: JSX.Element;\r\n\r\n    state: ProductUpdateStateType;\r\n    constructor(props: ProductUpdatePropType) {\r\n        super(props);\r\n        let pushedProps = props.location.state;\r\n        const name = pushedProps?.name;\r\n        const value = pushedProps?.value;\r\n        this.refreshURL = '/user/login/refresh';\r\n        this.baseURL = '/api/products/product/update/';\r\n        this.state = {\r\n            productItem: {},\r\n            productId: '',\r\n            productName: '',\r\n            productValue: '',\r\n            placeholderName: '',\r\n            placeholderValue: '',\r\n            authToken: '',\r\n            refresh_token: '',\r\n            email: '',\r\n            hasAccessTokenExpired: false,\r\n            isUserAuthorized: true,\r\n            message: '',\r\n        };\r\n        this.setState({ productName: name });\r\n        this.setState({ productValue: value });\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.updateClickHandler = this.updateClickHandler.bind(this);\r\n    } // constructor\r\n\r\n    /**\r\n     * Sets product item component\r\n     */\r\n    set productItemComponent(productItem: JSX.Element) {\r\n        this._productItemComponent = productItem;\r\n        // console.log(\"in get\", this._productItemComponent);\r\n\r\n        this.setState({ productItem: this._productItemComponent });\r\n        // console.log('productItemComponent', this.state.productItem);\r\n    }\r\n\r\n    /**\r\n     * Gets product item component\r\n     */\r\n    get productItemComponent() {\r\n        return this._productItemComponent;\r\n    }\r\n\r\n    async setStateVariables(access_token: string, refresh_token: string, expiration: Moment | null, email: string, message: string) {\r\n        /************************************************\r\n         * SET State VARIABLES FROM LocalStorage\r\n         ************************************************/\r\n        let authToken = \"Bearer \" + access_token;\r\n\r\n        console.log(\"Auth token\", authToken);\r\n        this.setState({ authToken });\r\n\r\n        console.log(\"Refresh token\", refresh_token);\r\n        this.setState({ refresh_token });\r\n\r\n        this.setState({ email });\r\n\r\n        let hasAccessTokenExpired = await auth.hasAccessTokenExpired();\r\n\r\n        console.log(\"Expired?\", hasAccessTokenExpired);\r\n        this.setState({ hasAccessTokenExpired });\r\n\r\n        this.setState({ isUserAuthorized: true });\r\n\r\n        this.setState({ message });\r\n        /************************************************/\r\n    }\r\n\r\n    resetStateVariables() {\r\n        this.setState({ authToken: '' });\r\n        this.setState({ access_token: '' });\r\n        this.setState({ refresh_token: '' });\r\n        this.setState({ email: '' });\r\n        this.setState({ hasAccessTokenExpired: false });\r\n    }\r\n\r\n    /**\r\n     * Parse url and perform data fetch\r\n     * Set state variables for React\r\n     * Managed component\r\n     */\r\n    async componentDidMount() {\r\n        // Update navbar for address bar changes\r\n        urlBtnUpdates();\r\n\r\n        let url = window.location.pathname;\r\n        let urlArray = url.split('/');\r\n        urlArray.splice(3, 1);\r\n        //replace space with app\r\n        urlArray.splice(0, 1, '/api');\r\n        // URL Syntax: /api/products/:id\r\n        urlArray.splice(2, 1);\r\n        const baseUrl = urlArray.join('/');\r\n        // console.log(\"UPDATEBASEURL:\", baseUrl);\r\n\r\n        //4/5/2021\r\n        /************************************/\r\n        /******************************************\r\n             * STEP2: Evaluate localStorage credentials and set STATE VARIABLES with evaluated credentials\r\n             *******************************/\r\n        // Retrieve StateCredentials\r\n        const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n        // Set state credentials\r\n        this.setState(evaluatedCredentials);\r\n\r\n        console.log(\"AUTHTOKEN Set to LocalStorage:\", this.state.authToken);\r\n        /*************************************/\r\n\r\n        console.log(\"hasAccessTokenExpired\", this.state.hasAccessTokenExpired);\r\n        /**************************************************\r\n         * STEP3: If accessToken expired, use refreshToken to generate a new accessToken. If refreshToken expired, clear all tokens from localStorage\r\n         **************************************************/\r\n        if (this.state.hasAccessTokenExpired) {\r\n            try {\r\n                /***********************************\r\n                 * Step4: Call credendentialStore to get new AccessTokens from the API, AND SET LOCAL STORAGE WITH RESULTS, if refreshTokens valid\r\n \r\n                 ***********************************/\r\n                let userCredentials = await credentialStore.setLocalCredWNewTokens(this.state.refresh_token, this.refreshURL, this.state.authToken, this.state.email, this.state.hasAccessTokenExpired);\r\n                /***********************************/\r\n\r\n                if (userCredentials) {\r\n                    console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED userCredentials:\", userCredentials);\r\n                    /*********************************************\r\n                     * STEP5: Evaluate localStorage credentials and set state variables with results \r\n                     ********************************************/   // Get state credentials\r\n                    const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n                    // Set state credentials\r\n                    this.setState(evaluatedCredentials);\r\n\r\n                    console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\r\n                }\r\n                else {\r\n                    console.log(\"I NEVER MADE IT TO IF\");\r\n                }\r\n            }\r\n            catch (err) {\r\n                // Clear all localStorage, due to invalid Refresh token\r\n                console.log(\"err: \", err);\r\n            }\r\n        } // if\r\n        /*************************************************/\r\n        console.log(\"ProductUpdateContainer AUTHORIZED?:\", this.state.isUserAuthorized);\r\n        if (this.state.isUserAuthorized) {\r\n            // make product request like deleteProduct request\r\n            this.productItemComponent = await getProductDetails(baseUrl, this.state.authToken, this.state.refresh_token);\r\n            // object destructring\r\n            const { name, value, id } = this.productItemComponent.props;\r\n            /*******************************************************\r\n             Get data response from http request, after parsing URL\r\n            *******************************************************/\r\n            if (id && name && value) {\r\n\r\n                /*******************************************\r\n                 * Pass item info from click button\r\n                 ******************************************/\r\n                this.setState({\r\n                    productId: id,\r\n                    placeholderName: name,\r\n                    placeholderValue: `$ ${value}`,\r\n                });\r\n            }\r\n            /***********************************************************/\r\n        }\r\n        /******************************/\r\n        //4/5/2021\r\n    }\r\n\r\n    changeHandler(event: ChangeEvent) {\r\n        // First disable default behavior\r\n        event.preventDefault();\r\n\r\n        const {\r\n            name,\r\n            value\r\n        }: EventTargetType = event.target as HTMLInputElement;\r\n\r\n        if (name && typeof value === 'string') {\r\n            // changed from [name]: value\r\n            this.setState(\r\n                {\r\n                    // set name computed property to the name of the element clicked, \r\n                    // and set the corresponding state property to the element's value\r\n                    [name]: value,\r\n                }\r\n                // as unknown as Pick<UpdateStateType, keyof UpdateStateType>\r\n            );  // setState\r\n        }\r\n    } // changeHandler\r\n\r\n    /************************************\r\n    * stageDBActionis an integrator that passes an id and a callback function corresponding to the desired db action to be performed, and retrieves the new data and updates the state variables, to be displayed to screen. \r\n    ************************************/\r\n    async stageDBAction(\r\n        id: string,\r\n        email: string,\r\n        name: string,\r\n        value: string,\r\n        url: string,\r\n        image = null,\r\n        cb: Function) {\r\n        console.log(\"Start performDBAction\");\r\n        //EXECUTE CALLBACK FUNCTION AND RETURN RESULSTS\r\n        console.log(\"hasExpired0:\", this.state.hasAccessTokenExpired);\r\n        let dBActionResult: DbActionResultType | undefined = await performDBAction(\r\n            id,\r\n            email,\r\n            this.state.refresh_token,\r\n            this.state.authToken,\r\n            this.state.hasAccessTokenExpired,\r\n            name,\r\n            value,\r\n            null,\r\n            url,\r\n            cb);\r\n\r\n        console.log(\"hasExpired1:\", this.state.hasAccessTokenExpired);\r\n        /************************************\r\n         * Set placeholder text if data was updated\r\n         ****************************************/\r\n        if (dBActionResult?.message === \"Action Completed\") {\r\n            if (name) {\r\n                this.setState({ placeholderName: name });\r\n            }\r\n            if (value) {\r\n                this.setState({ placeholderValue: value });\r\n            }\r\n        }\r\n        console.log(\"Passed performDBAction\");\r\n\r\n        const {\r\n            message,\r\n            refresh_token,\r\n            isUserAuthorized,\r\n            hasAccessTokenExpired\r\n        }: DbActionResultType = dBActionResult!;\r\n\r\n        console.log(\"hasAccessTokenExpired2:\", hasAccessTokenExpired);\r\n\r\n        /***************************************************\r\n         * Set State with the results of calling the DB Action\r\n         *****************************************************/\r\n        this.setState({\r\n            message: message,\r\n            refresh_token,\r\n            isUserAuthorized,\r\n            hasAccessTokenExpired,\r\n        });\r\n    }\r\n\r\n    async updateClickHandler(event: ChangeEvent) {\r\n        try {\r\n            event.preventDefault();\r\n            let name = this.state.productName;\r\n            let value = this.state.productValue;\r\n            // let email = this.state.email;\r\n\r\n            /************************************************************************\r\n             * Reset state variables representing view input after submit\r\n             ************************************************************************/\r\n            this.setState({ productName: '' });\r\n            this.setState({ productValue: '' });\r\n            this.setState({ placeholderName: '' });\r\n            this.setState({ placeholderValue: '' });\r\n\r\n            /************************************\r\n             * STEP1: Get Data out of local Storage\r\n             ************************************/\r\n            let { access_token, refresh_token, expiration, email, message } = await auth.getLocalStorage();\r\n\r\n            /*************************************/\r\n\r\n            /******************************************\r\n             * STEP2: SET STATE VARIABLES With data returned from localStorage\r\n             *******************************/\r\n            await this.setStateVariables(access_token, refresh_token, expiration, email, message);\r\n\r\n\r\n            console.log(\"HasAccessTokenExpired\", this.state.hasAccessTokenExpired);\r\n            /******************************************\r\n             * STEP3: Determine if Token Refresh is needed\r\n             *******************************/\r\n            if (this.state.hasAccessTokenExpired) {\r\n                console.log(\"ProductUpdateContainer refresh-token: \", this.state.refresh_token);\r\n\r\n                /***************************************\r\n                 * STEP3: RefreshTokens: If tokens have expired\r\n                 * **************************************/\r\n                try {\r\n                    /*********************************\r\n                     * STEP4: Call credendentialStore to get refreshTokens and all other \r\n                     * credentials from the API, AND SET LOCAL STORAGE WITH RESULTS\r\n                     *********************************/\r\n                    let newUserCredentials = await credentialStore.setLocalCredWNewTokens(this.state.refresh_token, this.refreshURL, this.state.authToken, this.state.email, this.state.hasAccessTokenExpired);\r\n                    /**************************/\r\n                    console.log(\"newUserCredentials STATUS\", newUserCredentials);\r\n                    if (newUserCredentials) {\r\n                        console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED newUserCredentials:\", newUserCredentials);\r\n\r\n                        /*********************************************\r\n                         * STEP5: SET STATE VARIABLES RECEIVED FROM CREDENTIAL STORE\r\n                         ********************************************/\r\n                        let { access_token,\r\n                            refresh_token,\r\n                            expiration,\r\n                            email,\r\n                            message } = newUserCredentials;\r\n\r\n                        // do something with response\r\n                        console.log(\"ProductionUpdate:response returned\", newUserCredentials);\r\n\r\n                        this.setStateVariables(access_token, refresh_token, expiration, email, message);\r\n\r\n                        console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\r\n                        /********************************************/\r\n                    }\r\n                    else {\r\n                        // console.log(\"I NEVER MADE IT TO IF\");\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // Clear all localStorage, due to invalid Refresh token\r\n                    console.log(\"ERRORED OUT IN UPDATE CATCH\");\r\n                    if (err.response.status === 401) {\r\n                        console.log('401 Unauthorized user');\r\n                        /***********************************************\r\n                         * Reset Local Storage Variables\r\n                         ************************************************/\r\n                        await auth.resetLocalStorage();\r\n\r\n                        /*********************************************\r\n                         * SET STATE VARIABLES FROM Local Storage\r\n                         *********************************************/\r\n                        await this.resetStateVariables();\r\n                        console.log('err', err.response);\r\n                        console.log('error status code', err.response.status);\r\n                        this.setState({ isUserAuthorized: false });\r\n                        console.log(\"isUserAuthorised = \", this.state.isUserAuthorized);\r\n                        // this.setState({ message: err.response.data.message });\r\n                        this.setState({ message: \"401 Unauthorized user\" });\r\n\r\n                    } // if\r\n                } // catch\r\n            }\r\n            console.log(\"AUTHORIZED?:\", this.state.isUserAuthorized);\r\n            if (this.state.isUserAuthorized) {\r\n                // Refresh_Token should be temporarily set to 'norefresh' in productionAction, as tokens should NOT be refreshed\r\n                // this.setState({ refresh_token: 'norefresh' });\r\n\r\n                console.log('ProductUpdateContainer:refresh_token = ', this.state.refresh_token);\r\n\r\n                /***********************************************\r\n                 * Step6: PERFORM A DB ACTION IF TOKENS R VALID \r\n                 **********************************************/\r\n                //id, name, value, url, file = null, imageSrc = null, cb\r\n\r\n                await this.stageDBAction(\r\n                    this.state.productId,\r\n                    email,\r\n                    name,\r\n                    value,\r\n                    this.baseURL,\r\n                    null,\r\n                    updateProduct);\r\n            } // if\r\n        } // try\r\n        catch (err) {\r\n            console.log(\"User is logged out\");\r\n            this.setState({ message: \"User is logged out\" });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <UpdateForm\r\n                    changeHandler={this.changeHandler}\r\n                    updateClickHandler={this.updateClickHandler}\r\n                    productName={this.state.productName}\r\n                    productValue={this.state.productValue}\r\n                    placeholderName={this.state.placeholderName}\r\n                    placeholderValue={this.state.placeholderValue}\r\n                    message={this.state.message}\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n} // class\r\n\r\nexport default ProductUpdateContainer;","import \"./style.css\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction transitionBtn(props: TransitionBtnPropType) {\r\n  return (\r\n    <Link \r\n      to= {props.to}>\r\n      <button \r\n        type=\"button\" \r\n        className=\"btn custom-btn\" \r\n        tabIndex={0}>\r\n         {props.buttonName}\r\n      </button>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default transitionBtn;","// import './styles.css';\r\nimport ProductUpdateBtn from './transition-btn';\r\n\r\nlet UpdateBtn = (props: ProdUpdateItemProps) => {\r\n    return (\r\n        <ProductUpdateBtn \r\n          to={\r\n            {\r\n              pathname: `${props.path}${props.id}`          \r\n            }\r\n          }\r\n          buttonName={props.btnName}/>\r\n        );\r\n};\r\n\r\nexport default UpdateBtn;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// The ...props means, spread all of the passed props onto this element\r\n// That way we don't have to define them all individually\r\nfunction ActionBtn(props: ActionBtnPropType) {\r\n  const key = props.id;\r\n  const id = props.id;\r\n  const btnClickHandler = props.btnClickHandler;\r\n  return (\r\n    <button \r\n      type=\"button\" \r\n      className=\"btn custom-btn\" \r\n      tabIndex={0}\r\n      onClick={(event) => {btnClickHandler(event)}} \r\n      id={id} \r\n      key={key}\r\n    >\r\n      {props.buttonName}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ActionBtn;","import React from 'react';\r\n// import './styles.css';\r\nimport ActionBtn from './action-btn';\r\n\r\nlet DeleteBtn = (props: ProdDeleteItemProps) => {\r\n    return (\r\n        <ActionBtn \r\n          buttonName={props.btnName}\r\n          id={props.id}\r\n          btnClickHandler={props.btnClickHandler}\r\n          />\r\n        );\r\n};\r\n\r\nexport default DeleteBtn;","import { AxiosResponse } from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport { urlBtnUpdates } from \"utils/urlBtnUpdates\";\r\nimport Can from \"components/can\";\r\n\r\n// import \"../style.css\";\r\nimport UpdateBtn from \"components/buttons/update-btn\";\r\nimport DeleteBtn from \"components/buttons/delete-btn\";\r\nimport * as auth from '../utils/authenticationStore';\r\n\r\nimport { deleteProduct, getProductDetails, stageDBAction } from '../utils/productStore';\r\nimport credentialStore from \"utils/credentialStore\";\r\n\r\nclass ProductViewContainer extends Component<ProductViewPropType> {\r\n    // props!: ProductViewPropType;\r\n    deleteURL = '/api/products/product/delete/';\r\n    refreshURL = '/user/login/refresh';\r\n\r\n    _productItemComponent!: JSX.Element;\r\n    state: ProductViewStateType;\r\n\r\n    deleteProduct: (url: string, productId: string, email: string, accessToken: string, refresh_token: string, expired: boolean, name?: null, value?: null, imageSrc?: null) => Promise<AxiosResponse<any> | undefined>;\r\n\r\n    _productsListData: ProductDataType[];\r\n\r\n    constructor(props: ProductViewPropType) {\r\n        super(props);\r\n\r\n        console.log(\"ViewPROPS:\", props);\r\n        this._productsListData = [];\r\n        // 2/14/21: everthing after baseUrl added\r\n        this.state = {\r\n            productsList: [],\r\n            productListData: [],\r\n            productItem: {},\r\n            baseUrl: '',\r\n            access_token: '',\r\n            authToken: '',\r\n            refresh_token: '',\r\n            expiration: '',\r\n            email: '',\r\n            hasAccessTokenExpired: false,\r\n            isUserAuthorized: true,\r\n            loading: false,\r\n            message: '',\r\n            // role: this.props.role,\r\n        };\r\n\r\n        this.deleteProduct = deleteProduct.bind(this);\r\n        console.log(\"ViewContainer Props1:\", this.props.role);\r\n    } // constructor\r\n\r\n    get productsListData(): ProductDataType[] {\r\n        return this._productsListData;\r\n    }\r\n    /******************************\r\n     * 1/8/19: setUser HERE\r\n     ******************************/\r\n    set productsListData(data) {\r\n        auth.getLocalStorage().then((curCredentials: any) => { this.setState(curCredentials) });\r\n\r\n        console.log(\"----Data\", data);\r\n        this._productsListData = data;\r\n    } // setProductList\r\n\r\n    /**\r\n     * Deletes selected item\r\n     * @param event \r\n     */\r\n    async deleteClickHandler(event: React.MouseEvent<HTMLButtonElement>) {\r\n        try {\r\n            event.preventDefault();\r\n            /************************************\r\n             * STEP1: GET Product ID to be deleted\r\n             ************************************/\r\n            let productId = (event.target as HTMLButtonElement).id;\r\n\r\n            /******************************************\r\n             * STEP2: Evaluate localStorage credentials and set STATE VARIABLES with evaluated credentials\r\n             *******************************/\r\n            // Retrieve StateCredentials\r\n            const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n            // Set state credentials\r\n            this.setState(evaluatedCredentials);\r\n\r\n            console.log(\"AUTHTOKEN Set to LocalStorage:\", this.state.authToken);\r\n            /*************************************/\r\n\r\n            console.log(\"hasAccessTokenExpired\", this.state.hasAccessTokenExpired);\r\n            /**************************************************\r\n             * STEP3: If accessToken expired, use refreshToken to generate a new accessToken. If refreshToken expired, clear all tokens from localStorage\r\n             **************************************************/\r\n            if (this.state.hasAccessTokenExpired) {\r\n                try {\r\n                    /***********************************\r\n                     * Step4: Call credendentialStore to get new AccessTokens from the API, AND SET LOCAL STORAGE WITH RESULTS, if refreshTokens valid\r\n    \r\n                     ***********************************/\r\n                    let userCredentials = await credentialStore.setLocalCredWNewTokens(this.state.refresh_token, this.refreshURL, this.state.authToken, this.state.email, this.state.hasAccessTokenExpired);\r\n                    /***********************************/\r\n\r\n                    if (userCredentials) {\r\n                        console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED userCredentials:\", userCredentials);\r\n                        /*********************************************\r\n                         * STEP5: Evaluate localStorage credentials and set state variables with results \r\n                         ********************************************/   // Get state credentials\r\n                        const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n                        // Set state credentials\r\n                        this.setState(evaluatedCredentials);\r\n\r\n                        console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\r\n                    }\r\n                    else {\r\n                        console.log(\"I NEVER MADE IT TO IF\");\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    // Clear all localStorage, due to invalid Refresh token\r\n                    console.log(\"err: \", err);\r\n                }\r\n            } // if\r\n            /*************************************************/\r\n            console.log(\"AUTHORIZED?:\", this.state.isUserAuthorized);\r\n            if (this.state.isUserAuthorized) {\r\n                /*******************************\r\n                 *STEP 6: PERFORM A DB ACTION IF TOKENS R VALID\r\n                ********************************/\r\n                console.log(\"EMAIL IN STAGEDBACTION:\", this.state.email);\r\n\r\n                // Stage DB Action, by passing it the \r\n                // action to be performed as last argument\r\n                // and setting state with the results\r\n                let dbActionResults = await stageDBAction(\r\n                    productId,\r\n                    this.state.email,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    this.deleteURL,\r\n                    this.state.refresh_token,\r\n                    this.state.authToken,\r\n                    this.state.hasAccessTokenExpired,\r\n                    this.deleteProduct);\r\n\r\n                // Set state variables\r\n                this.setState(dbActionResults);\r\n\r\n                // set instance variable productListData\r\n                this.productsListData = this.state.productsList;\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.log(\"ERROR:\", err);\r\n            console.log(\"User is logged out\");\r\n            this.setState({ message: \"User is logged out\" });\r\n        }\r\n\r\n        // reroute to products page \r\n        this.props.history.push('/products');\r\n    }\r\n    /**\r\n     * Components did mount - Parses the url and \r\n     * makes a backend api request for a product \r\n     * with the product id \r\n     */\r\n    async componentDidMount() {\r\n        // Update navbar for address bar changes\r\n        urlBtnUpdates();\r\n\r\n        let url = window.location.pathname;\r\n        let urlArray = url.split('/');\r\n        console.log(\"@@@URLARRAY:\", urlArray);\r\n        //replace space with app\r\n        urlArray.splice(0, 1, '/api');\r\n        // URL Syntax: /api/products/:id\r\n        urlArray.splice(2, 1);\r\n        const baseUrl = urlArray.join('/');\r\n        // console.log(\"baseUrl:\", baseUrl);\r\n\r\n        //4/5/2021\r\n        /************************************/\r\n        /******************************************\r\n             * STEP2: Evaluate localStorage credentials and set STATE VARIABLES with evaluated credentials\r\n             *******************************/\r\n        // Retrieve StateCredentials\r\n        const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n        // Set state credentials\r\n        this.setState(evaluatedCredentials);\r\n\r\n        console.log(\"ProductViewContainer-AUTHTOKEN Set to LocalStorage:\", this.state.authToken);\r\n        /*************************************/\r\n\r\n        console.log(\"ProductViewContainer- hasAccessTokenExpired:\", this.state.hasAccessTokenExpired);\r\n        /**************************************************\r\n         * STEP3: If accessToken expired, use refreshToken to generate a new accessToken. If refreshToken expired, clear all tokens from localStorage\r\n         **************************************************/\r\n        if (this.state.hasAccessTokenExpired) {\r\n            try {\r\n                /***********************************\r\n                 * Step4: Call credendentialStore to get new AccessTokens from the API, AND SET LOCAL STORAGE WITH RESULTS, if refreshTokens valid\r\n \r\n                 ***********************************/\r\n                let userCredentials = await credentialStore.setLocalCredWNewTokens(this.state.refresh_token, this.refreshURL, this.state.authToken, this.state.email, this.state.hasAccessTokenExpired);\r\n                /***********************************/\r\n\r\n                if (userCredentials) {\r\n                    console.log(\"NEW ACCESS TOKENS HAVE BEEN RECEIVED userCredentials:\", userCredentials);\r\n                    /*********************************************\r\n                     * STEP5: Evaluate localStorage credentials and set state variables with results \r\n                     ********************************************/   // Get state credentials\r\n                    const evaluatedCredentials = credentialStore.getEvaluatedCredentials(await auth.getLocalStorage());\r\n\r\n                    // Set state credentials\r\n                    this.setState(evaluatedCredentials);\r\n\r\n                    console.log(\"New AUTHTOKEN after Refresh:\", this.state.authToken);\r\n                }\r\n                else {\r\n                    console.log(\"RefreshTokens invalid reset local credentials\");\r\n                    this.props.setRole(\"visitor\", true);\r\n                    auth.resetLocalStorage();\r\n                }\r\n            }\r\n            catch (err) {\r\n                // Clear all localStorage, due to invalid Refresh token\r\n                console.log(\"err: \", err);\r\n            }\r\n        } // if\r\n        /*************************************************/\r\n        console.log(\"ProductViewContainer AUTHORIZED?:\", this.state.isUserAuthorized);\r\n        if (this.state.isUserAuthorized) {\r\n            /*******************************\r\n             *STEP 6: PERFORM A DB ACTION IF TOKENS R VALID\r\n            ********************************/\r\n            console.log(\"EMAIL IN STAGEDBACTION:\", this.state.email);\r\n            // make product request and set productItemComponent\r\n            this.productItemComponent = await getProductDetails(baseUrl, this.state.authToken, this.state.refresh_token);\r\n            console.log(\"PRODUCTVIEWCONTAINER-Product:\", this.productItemComponent);\r\n        }\r\n        /************************************/\r\n        //4/5/2021\r\n\r\n        console.log(\"ViewContainer Props2:\", this.props.role);\r\n\r\n        // check if user Credentials Active:\r\n        this.props.areCredentialsValid();\r\n        console.log(\"USER ACTIVE:\", this.props.credentialsActive);\r\n    }// ComponentDidMount\r\n\r\n    /**\r\n     * Sets product item component\r\n     */\r\n    set productItemComponent(productItem: JSX.Element) {\r\n        this._productItemComponent = productItem;\r\n        // console.log(\"in get\", this._productItemComponent);\r\n\r\n        this.setState({ productItem: this._productItemComponent });\r\n        // console.log('productItemComponent', this.state.productItem);\r\n    }\r\n\r\n    /**\r\n     * Gets product item component\r\n     */\r\n    get productItemComponent() {\r\n        return this._productItemComponent;\r\n    }\r\n\r\n    render() {\r\n        const role = this.props.role;\r\n        const product = this.productItemComponent;\r\n        const props = product?.props;\r\n\r\n        const updatePath = \"update/\";\r\n        let loggedOut = this.props.loggedOut;\r\n        console.log(\"User loggedOut:\", loggedOut, \" role:\", role);\r\n        return (\r\n            <React.Fragment>\r\n                {product}\r\n                <div className=\"text-center\">\r\n                    {!loggedOut ? <Can\r\n                        role={role}\r\n                        perform=\"products:update\"\r\n                        yes={\r\n                            () => (\r\n                                <>\r\n                                    <UpdateBtn\r\n                                        id={props?.id}\r\n                                        name={\"Update\"}\r\n                                        value={props?.value}\r\n                                        path={updatePath}\r\n                                        btnName={\"Update\"}\r\n                                    />\r\n                                </>\r\n                            )}\r\n                        no={() => <></>}\r\n                    /> : ''}\r\n                    {!loggedOut ? <Can\r\n                        role={role}\r\n                        perform=\"products:delete\"\r\n                        yes={() => (\r\n                            <>\r\n                                <DeleteBtn\r\n                                    btnName={\"Delete\"}\r\n                                    btnClickHandler={(event) => this.deleteClickHandler(event)}\r\n                                    id={props?.id}\r\n                                />\r\n                            </>\r\n                        )}\r\n                        no={() => <></>}\r\n                    /> : ''}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n} // class\r\n\r\nexport default ProductViewContainer;","import React from \"react\";\r\nimport { MDBBtn, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\r\nimport Text from \"components/inputs/text\";\r\n\r\nlet RegistrationForm = (props) => {\r\n  return (\r\n    <main role=\"main\" className=\"form-align flex-shrink-0\">\r\n      <MDBContainer>\r\n        <MDBRow>\r\n          <MDBCol size=\"12\" middle={true}>\r\n            <form>\r\n              <h1 className=\"mt-5\">Registration Form</h1>\r\n              <br />\r\n              {/* email */}\r\n              <div className=\"form-group\">\r\n                {/* email */}\r\n                <Text\r\n                  htmlFor={\"formGroupEmail\"}\r\n                  className={\"form-control\"}\r\n                  id={\"formGroupEmail\"}\r\n                  // placeholder={\"email\"}\r\n                  name={\"email\"}\r\n                  label={\"Email\"}\r\n                  value={props.email}\r\n                  changeHandler={props.changeHandler}\r\n                />\r\n                {/* password */}\r\n                <Text\r\n                  htmlFor={\"formGroupPassword\"}\r\n                  className={\"form-control\"}\r\n                  id={\"formGroupPassword\"}\r\n                  // placeholder={\"password\"}\r\n                  name={\"password\"}\r\n                  label={\"Password\"}\r\n                  value={props.password}\r\n                  changeHandler={props.changeHandler}\r\n                />\r\n                <br />\r\n                <MDBRow>\r\n                  <MDBCol>\r\n                    <label htmlFor=\"formGroupPassword\" />\r\n                    <MDBBtn\r\n                      className={\"mx-0\"}\r\n                      color=\"blue-grey\"\r\n                      onClick={props.clickHandler}\r\n                    >\r\n                      Submit\r\n                    </MDBBtn>\r\n                    <h3 className=\"mt-5\">\r\n                      {props.message ? props.message : \"\"}\r\n                    </h3>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n              </div>\r\n            </form>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React, { Component } from \"react\";\r\nimport {ChangeEvent} from \"react\";\r\n// import { MDBContainer, MDBRow, MDBCol, MDBCard, MDBCardBody, MDBMask, MDBView } from \"mdbreact\";\r\n\r\n// Import Server-Side Utilities:\r\nimport { api as API } from '../utils/API';\r\n\r\n// Import Components\r\nimport RegistrationForm from \"../forms/registration\";\r\n\r\nclass RegistrationContainer extends Component<RegContainerPropType> {\r\n    state: RegContainerStateType;\r\n\r\n    constructor(props: RegContainerPropType) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            message: '',\r\n            existingUserError: \"Request failed with status code 409\",\r\n            existingUserMsg: \"User exists\"\r\n        };\r\n\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n        this.clickHandler = this.clickHandler.bind(this);\r\n    } // constructor\r\n \r\n    /**\r\n     * Changes handler - Sets state on all input values\r\n     * @param event \r\n     */\r\n    changeHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        // First disable default behavior\r\n        event.preventDefault();\r\n\r\n        const {\r\n            name,\r\n            value\r\n        } = event.target;\r\n\r\n        if (name && typeof value === 'string') {\r\n            this.setState(\r\n                {\r\n                    // set name computed property to the name of the element clicked, \r\n                    // and set the corresponding state property to the element's value\r\n                    [name]: value,\r\n                }\r\n            );  // setState\r\n        }\r\n\r\n    } // changeHandler\r\n\r\n    clickHandler(event: ChangeEvent<HTMLInputElement>) {\r\n        event.preventDefault();\r\n        console.log(`User Name: ${this.state.email}, Password: ${this.state.password}`);\r\n\r\n        // Package Data to be sent in the Post Request Body\r\n        let regData = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n\r\n        // Define Call to Server Side utils to post body to the backend server and set states, using register method:\r\n        let register = (regData: RegDataType) => {\r\n            console.log('IN REGISTER CALL');\r\n            API.register(regData)\r\n                .then(regResponse => {\r\n                    console.log(\"regResponse:\", regResponse);\r\n                      this.setState( { message: regResponse.data.message}); \r\n                })\r\n                .catch(err => {\r\n                    console.log(\"ERROR:\", err, \"Message:\", err.message);\r\n                    if (err.message === this.state.existingUserError){\r\n                        this.setState({ message: this.state.existingUserMsg});\r\n                    } \r\n                    else {\r\n                        this.setState({ message: err.message});\r\n                    }\r\n                });\r\n        };\r\n\r\n        // Execute register\r\n        register(regData);\r\n\r\n        // Reset state variables after submit\r\n        this.setState({\r\n            email: '',\r\n            password: ''\r\n        });\r\n    } // clickHandler\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <RegistrationForm\r\n                    changeHandler={this.changeHandler}\r\n                    clickHandler={this.clickHandler}\r\n                    email={this.state.email}\r\n                    password={this.state.password} \r\n                    message={this.state.message}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n} // class\r\n\r\nexport default RegistrationContainer;","import React, { Component } from \"react\";\r\nimport './App.scss';\r\n// Handle Routes\r\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\n// import { Router } from 'react-router';\r\n\r\n// import logo from './logo.svg';\r\nimport \"./App.css\";\r\n// import MainContent from './components/MainContent';\r\nimport Footer from \"./components/footer\";\r\n// Import Components\r\n// import Navbar from './components/Navbar';\r\nimport Navbar from \"./components/navbar/index\";\r\nimport history from \"./history\";\r\n// Import Pages\r\nimport HomeContainer from \"./pages/HomeContainer\";\r\nimport LoginContainer from \"./pages/LoginContainer\";\r\nimport ProductInsertContainer from \"./pages/ProductInsertContainer\";\r\nimport ProductsListContainer from \"./pages/ProductsListContainer\";\r\nimport ProductUpdateContainer from \"./pages/ProductUpdateContainer\";\r\nimport ProductViewContainer from \"./pages/ProductViewContainer\";\r\nimport RegistrationContainer from \"./pages/RegistrationContainer\";\r\nimport * as auth from \"./utils/authenticationStore\";\r\nimport UploadSpinner from \"./components/upload-spinner\";\r\nimport * as authenticationStore from \"./utils/authenticationStore\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      currentPage: \"\",\r\n      name: \"\",\r\n      role: \"\",\r\n      loading: false,\r\n      redirect: false,\r\n      loggedOut: false,\r\n      credentialsValid: false\r\n    };\r\n\r\n    this.handlePageClick = this.handlePageClick.bind(this);\r\n    this.redirectHome = this.redirectHome.bind(this);\r\n    this.getRole = this.getRole.bind(this);\r\n    this.setRole = this.setRole.bind(this);\r\n    this.areCredentialsValid = this.areCredentialsValid.bind(this);\r\n  } //constructor\r\n\r\n  componentDidMount() {\r\n    this.getRole();\r\n    this.areCredentialsValid();\r\n  }\r\n\r\n  setRole(role, loggedOut) {\r\n    this.setState({\r\n      role: role,\r\n      loggedOut: loggedOut,\r\n    });\r\n  }\r\n\r\n  async areCredentialsValid() {\r\n    const hasAccessTokenExpired = await authenticationStore.hasAccessTokenExpired();\r\n    const credentialsValid = !hasAccessTokenExpired;\r\n    this.setState({credentialsValid: credentialsValid});\r\n    return credentialsValid;\r\n  }\r\n\r\n  // Taken from productionListContainer\r\n  async getRole() {\r\n    const localStateObj = await auth.getLocalStorage();\r\n    console.log(\"APPJS. LOCALSTATEOBJ:\", localStateObj);\r\n    // this.setState(localStateObj);\r\n    console.log(\"EMAIL:\", localStateObj.email);\r\n    const email = localStateObj.email;\r\n    console.log(\"Navbar Mount3 Email:\", email);\r\n\r\n    /* Set user role on state, by using call back\r\n    function instead of async await */\r\n    this.setState({ loading: true });\r\n\r\n    const role = await auth.setUserRole(email).then((data) => {\r\n      console.log(\"setUserRole:\", data.role);\r\n      this.setState({ role: data.role });\r\n      this.setState({ loading: false });\r\n      console.log(\"AFTER WILLMOUNT LOAD user:\", this.state.role);\r\n      /**************************/\r\n      console.log(\"APPJS ROLE B4 Set:\", this.state.role);\r\n      this.setState({ role: data.role });\r\n      console.log(\"APPJS STATE ROLE After Set:\", this.state.role);\r\n      return data.role;\r\n    });\r\n    console.log(\"APP.JS ROLE:\", role);\r\n    this.setState({\r\n      role: role,\r\n      loggedOut: false,\r\n    });\r\n    return role;\r\n    /***************************/\r\n  }\r\n\r\n  redirectHome() {\r\n    //IMPORTANT: Redirect to the selected organization's page.\r\n    console.log(\"Called REDIRECT HOME redirect b4\", this.state.redirect);\r\n    this.setState({\r\n      redirect: true,\r\n      role: \"visitor\",\r\n      loggedOut: true,\r\n    });\r\n    console.log(\"Called REDIRECT HOME redirect after\", this.state.redirect);\r\n    history.push({\r\n      pathname: \"/\",\r\n    });\r\n  }\r\n\r\n  async handlePageClick(event) {\r\n    // IMPORTANT: No preventDefault Here:  It will not allow page to transition to insert form, with a dropdownitem\r\n    // event.preventDefault();\r\n    // event.persist();\r\n\r\n    // Sets the name and currentlyActivePage\r\n    this.setState({\r\n      currentPage: event.target.name,\r\n      name: event.target.name,\r\n    });\r\n\r\n    //01/04/2020:\r\n    if (event.target.name === \"Logout\") {\r\n      this.redirectHome();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"APPJS JUST UPDATED!\");\r\n  }\r\n  render() {\r\n    if (this.state.loading === true) {\r\n      // console.log('loading...');\r\n      return <UploadSpinner />;\r\n    }\r\n    return (\r\n      <Router history={history}>\r\n        {/* <Router> */}\r\n        {/* Refresh={toggle} */}\r\n        <Navbar\r\n          handlePageClick={this.handlePageClick}\r\n          navItems={this.state.navItems}\r\n          currentPage={this.state.currentPage}\r\n          name={this.state.name}\r\n          role={this.state.role}\r\n          redirectHome={this.redirectHome}\r\n          setRole={this.setRole}\r\n          loggedOut={this.state.loggedOut}\r\n          redirect={this.state.redirect}\r\n        />\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={(props) => \r\n            <HomeContainer \r\n              {...props} \r\n            />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/user/registration\"\r\n            component={RegistrationContainer}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/user/login\"\r\n            render={(props) => (\r\n              <LoginContainer {...props} \r\n                getRole={this.getRole} \r\n                role={this.state.role}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/products/product/update/:product_id\"\r\n            component={ProductUpdateContainer}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/product/insert\"\r\n            component={ProductInsertContainer}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/products/product/:product_id\"\r\n            render={(props) => (\r\n              <ProductViewContainer\r\n              {...props}\r\n              role={this.state.role}\r\n              loggedOut={this.state.loggedOut}\r\n              areCredentialsValid={this.areCredentialsValid}\r\n              credentialsActive={this.state.credentialsActive}\r\n              setRole={this.setRole}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/products/\"\r\n            render={(props) => (\r\n              <ProductsListContainer\r\n                {...props}\r\n                role={this.state.role}\r\n                loggedOut={this.state.loggedOut}\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n        <Footer />\r\n      </Router>\r\n    );\r\n  } // render\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// MDBBOOTSTRAP\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\nimport 'bootstrap-css-only/css/bootstrap.min.css';\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}